
Eurobot2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000871c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  080088a4  080088a4  000188a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008af4  08008af4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008af4  08008af4  00018af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008afc  08008afc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008afc  08008afc  00018afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b04  08008b04  00018b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008b08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00000e8c  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000f00  20000f00  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a128  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fa4  00000000  00000000  0003a1cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001360  00000000  00000000  0003d170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001288  00000000  00000000  0003e4d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024144  00000000  00000000  0003f758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000171bf  00000000  00000000  0006389c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000daa4e  00000000  00000000  0007aa5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001554a9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000057b4  00000000  00000000  001554fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000074 	.word	0x20000074
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800888c 	.word	0x0800888c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000078 	.word	0x20000078
 80001c4:	0800888c 	.word	0x0800888c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
 80004e4:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 80004e6:	683b      	ldr	r3, [r7, #0]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	0a5a      	lsrs	r2, r3, #9
 80004ec:	490f      	ldr	r1, [pc, #60]	; (800052c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80004ee:	fba1 1202 	umull	r1, r2, r1, r2
 80004f2:	09d2      	lsrs	r2, r2, #7
 80004f4:	490e      	ldr	r1, [pc, #56]	; (8000530 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 80004f6:	fb01 f202 	mul.w	r2, r1, r2
 80004fa:	1a9b      	subs	r3, r3, r2
 80004fc:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	0a5b      	lsrs	r3, r3, #9
 8000504:	4a09      	ldr	r2, [pc, #36]	; (800052c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000506:	fba2 2303 	umull	r2, r3, r2, r3
 800050a:	09db      	lsrs	r3, r3, #7
 800050c:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	681a      	ldr	r2, [r3, #0]
 8000512:	68bb      	ldr	r3, [r7, #8]
 8000514:	441a      	add	r2, r3
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	68fa      	ldr	r2, [r7, #12]
 800051e:	601a      	str	r2, [r3, #0]
}
 8000520:	bf00      	nop
 8000522:	3714      	adds	r7, #20
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr
 800052c:	00044b83 	.word	0x00044b83
 8000530:	3b9aca00 	.word	0x3b9aca00

08000534 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	2200      	movs	r2, #0
 8000546:	605a      	str	r2, [r3, #4]
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	4618      	mov	r0, r3
 800054c:	370c      	adds	r7, #12
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
	...

08000558 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
 8000560:	4a04      	ldr	r2, [pc, #16]	; (8000574 <_ZN3ros3MsgC1Ev+0x1c>)
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	4618      	mov	r0, r3
 800056a:	370c      	adds	r7, #12
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr
 8000574:	08008ac4 	.word	0x08008ac4

08000578 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
      data()
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	4618      	mov	r0, r3
 8000584:	f7ff ffe8 	bl	8000558 <_ZN3ros3MsgC1Ev>
 8000588:	4a06      	ldr	r2, [pc, #24]	; (80005a4 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	3304      	adds	r3, #4
 8000592:	4618      	mov	r0, r3
 8000594:	f7ff ffce 	bl	8000534 <_ZN3ros4TimeC1Ev>
    {
    }
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	4618      	mov	r0, r3
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	08008aac 	.word	0x08008aac

080005a8 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80005a8:	b480      	push	{r7}
 80005aa:	b085      	sub	sp, #20
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
 80005b0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80005b2:	2300      	movs	r3, #0
 80005b4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	6859      	ldr	r1, [r3, #4]
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	683a      	ldr	r2, [r7, #0]
 80005be:	4413      	add	r3, r2
 80005c0:	b2ca      	uxtb	r2, r1
 80005c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	685b      	ldr	r3, [r3, #4]
 80005c8:	0a19      	lsrs	r1, r3, #8
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	3301      	adds	r3, #1
 80005ce:	683a      	ldr	r2, [r7, #0]
 80005d0:	4413      	add	r3, r2
 80005d2:	b2ca      	uxtb	r2, r1
 80005d4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	685b      	ldr	r3, [r3, #4]
 80005da:	0c19      	lsrs	r1, r3, #16
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	3302      	adds	r3, #2
 80005e0:	683a      	ldr	r2, [r7, #0]
 80005e2:	4413      	add	r3, r2
 80005e4:	b2ca      	uxtb	r2, r1
 80005e6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	685b      	ldr	r3, [r3, #4]
 80005ec:	0e19      	lsrs	r1, r3, #24
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	3303      	adds	r3, #3
 80005f2:	683a      	ldr	r2, [r7, #0]
 80005f4:	4413      	add	r3, r2
 80005f6:	b2ca      	uxtb	r2, r1
 80005f8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	3304      	adds	r3, #4
 80005fe:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	6899      	ldr	r1, [r3, #8]
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	683a      	ldr	r2, [r7, #0]
 8000608:	4413      	add	r3, r2
 800060a:	b2ca      	uxtb	r2, r1
 800060c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	689b      	ldr	r3, [r3, #8]
 8000612:	0a19      	lsrs	r1, r3, #8
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	3301      	adds	r3, #1
 8000618:	683a      	ldr	r2, [r7, #0]
 800061a:	4413      	add	r3, r2
 800061c:	b2ca      	uxtb	r2, r1
 800061e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	689b      	ldr	r3, [r3, #8]
 8000624:	0c19      	lsrs	r1, r3, #16
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	3302      	adds	r3, #2
 800062a:	683a      	ldr	r2, [r7, #0]
 800062c:	4413      	add	r3, r2
 800062e:	b2ca      	uxtb	r2, r1
 8000630:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	689b      	ldr	r3, [r3, #8]
 8000636:	0e19      	lsrs	r1, r3, #24
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	3303      	adds	r3, #3
 800063c:	683a      	ldr	r2, [r7, #0]
 800063e:	4413      	add	r3, r2
 8000640:	b2ca      	uxtb	r2, r1
 8000642:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	3304      	adds	r3, #4
 8000648:	60fb      	str	r3, [r7, #12]
      return offset;
 800064a:	68fb      	ldr	r3, [r7, #12]
    }
 800064c:	4618      	mov	r0, r3
 800064e:	3714      	adds	r7, #20
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr

08000658 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000658:	b480      	push	{r7}
 800065a:	b085      	sub	sp, #20
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000662:	2300      	movs	r3, #0
 8000664:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	683a      	ldr	r2, [r7, #0]
 800066a:	4413      	add	r3, r2
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	461a      	mov	r2, r3
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	685a      	ldr	r2, [r3, #4]
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	3301      	adds	r3, #1
 800067c:	6839      	ldr	r1, [r7, #0]
 800067e:	440b      	add	r3, r1
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	021b      	lsls	r3, r3, #8
 8000684:	431a      	orrs	r2, r3
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	685a      	ldr	r2, [r3, #4]
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	3302      	adds	r3, #2
 8000692:	6839      	ldr	r1, [r7, #0]
 8000694:	440b      	add	r3, r1
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	041b      	lsls	r3, r3, #16
 800069a:	431a      	orrs	r2, r3
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	685a      	ldr	r2, [r3, #4]
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	3303      	adds	r3, #3
 80006a8:	6839      	ldr	r1, [r7, #0]
 80006aa:	440b      	add	r3, r1
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	061b      	lsls	r3, r3, #24
 80006b0:	431a      	orrs	r2, r3
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	3304      	adds	r3, #4
 80006ba:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	683a      	ldr	r2, [r7, #0]
 80006c0:	4413      	add	r3, r2
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	461a      	mov	r2, r3
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	689a      	ldr	r2, [r3, #8]
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	3301      	adds	r3, #1
 80006d2:	6839      	ldr	r1, [r7, #0]
 80006d4:	440b      	add	r3, r1
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	021b      	lsls	r3, r3, #8
 80006da:	431a      	orrs	r2, r3
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	689a      	ldr	r2, [r3, #8]
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	3302      	adds	r3, #2
 80006e8:	6839      	ldr	r1, [r7, #0]
 80006ea:	440b      	add	r3, r1
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	041b      	lsls	r3, r3, #16
 80006f0:	431a      	orrs	r2, r3
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	689a      	ldr	r2, [r3, #8]
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	3303      	adds	r3, #3
 80006fe:	6839      	ldr	r1, [r7, #0]
 8000700:	440b      	add	r3, r1
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	061b      	lsls	r3, r3, #24
 8000706:	431a      	orrs	r2, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	3304      	adds	r3, #4
 8000710:	60fb      	str	r3, [r7, #12]
     return offset;
 8000712:	68fb      	ldr	r3, [r7, #12]
    }
 8000714:	4618      	mov	r0, r3
 8000716:	3714      	adds	r7, #20
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr

08000720 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
 8000728:	4b03      	ldr	r3, [pc, #12]	; (8000738 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 800072a:	4618      	mov	r0, r3
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	080088a4 	.word	0x080088a4

0800073c <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	4b03      	ldr	r3, [pc, #12]	; (8000754 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8000746:	4618      	mov	r0, r3
 8000748:	370c      	adds	r7, #12
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	080088b4 	.word	0x080088b4

08000758 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff fef8 	bl	8000558 <_ZN3ros3MsgC1Ev>
 8000768:	4a0b      	ldr	r2, [pc, #44]	; (8000798 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	2200      	movs	r2, #0
 8000772:	809a      	strh	r2, [r3, #4]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	4a09      	ldr	r2, [pc, #36]	; (800079c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	4a07      	ldr	r2, [pc, #28]	; (800079c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800077e:	60da      	str	r2, [r3, #12]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	4a06      	ldr	r2, [pc, #24]	; (800079c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000784:	611a      	str	r2, [r3, #16]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	2200      	movs	r2, #0
 800078a:	615a      	str	r2, [r3, #20]
    {
    }
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	4618      	mov	r0, r3
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	08008a94 	.word	0x08008a94
 800079c:	080088d8 	.word	0x080088d8

080007a0 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b088      	sub	sp, #32
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80007aa:	2300      	movs	r3, #0
 80007ac:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	8899      	ldrh	r1, [r3, #4]
 80007b2:	69fb      	ldr	r3, [r7, #28]
 80007b4:	683a      	ldr	r2, [r7, #0]
 80007b6:	4413      	add	r3, r2
 80007b8:	b2ca      	uxtb	r2, r1
 80007ba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	889b      	ldrh	r3, [r3, #4]
 80007c0:	0a1b      	lsrs	r3, r3, #8
 80007c2:	b299      	uxth	r1, r3
 80007c4:	69fb      	ldr	r3, [r7, #28]
 80007c6:	3301      	adds	r3, #1
 80007c8:	683a      	ldr	r2, [r7, #0]
 80007ca:	4413      	add	r3, r2
 80007cc:	b2ca      	uxtb	r2, r1
 80007ce:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80007d0:	69fb      	ldr	r3, [r7, #28]
 80007d2:	3302      	adds	r3, #2
 80007d4:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	689b      	ldr	r3, [r3, #8]
 80007da:	4618      	mov	r0, r3
 80007dc:	f7ff fcf4 	bl	80001c8 <strlen>
 80007e0:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80007e2:	69fb      	ldr	r3, [r7, #28]
 80007e4:	683a      	ldr	r2, [r7, #0]
 80007e6:	4413      	add	r3, r2
 80007e8:	69b9      	ldr	r1, [r7, #24]
 80007ea:	4618      	mov	r0, r3
 80007ec:	f001 fd8b 	bl	8002306 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80007f0:	69fb      	ldr	r3, [r7, #28]
 80007f2:	3304      	adds	r3, #4
 80007f4:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	683a      	ldr	r2, [r7, #0]
 80007fa:	18d0      	adds	r0, r2, r3
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	689b      	ldr	r3, [r3, #8]
 8000800:	69ba      	ldr	r2, [r7, #24]
 8000802:	4619      	mov	r1, r3
 8000804:	f007 feaa 	bl	800855c <memcpy>
      offset += length_topic_name;
 8000808:	69fa      	ldr	r2, [r7, #28]
 800080a:	69bb      	ldr	r3, [r7, #24]
 800080c:	4413      	add	r3, r2
 800080e:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	68db      	ldr	r3, [r3, #12]
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff fcd7 	bl	80001c8 <strlen>
 800081a:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 800081c:	69fb      	ldr	r3, [r7, #28]
 800081e:	683a      	ldr	r2, [r7, #0]
 8000820:	4413      	add	r3, r2
 8000822:	6979      	ldr	r1, [r7, #20]
 8000824:	4618      	mov	r0, r3
 8000826:	f001 fd6e 	bl	8002306 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800082a:	69fb      	ldr	r3, [r7, #28]
 800082c:	3304      	adds	r3, #4
 800082e:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8000830:	69fb      	ldr	r3, [r7, #28]
 8000832:	683a      	ldr	r2, [r7, #0]
 8000834:	18d0      	adds	r0, r2, r3
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	68db      	ldr	r3, [r3, #12]
 800083a:	697a      	ldr	r2, [r7, #20]
 800083c:	4619      	mov	r1, r3
 800083e:	f007 fe8d 	bl	800855c <memcpy>
      offset += length_message_type;
 8000842:	69fa      	ldr	r2, [r7, #28]
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	4413      	add	r3, r2
 8000848:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	691b      	ldr	r3, [r3, #16]
 800084e:	4618      	mov	r0, r3
 8000850:	f7ff fcba 	bl	80001c8 <strlen>
 8000854:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8000856:	69fb      	ldr	r3, [r7, #28]
 8000858:	683a      	ldr	r2, [r7, #0]
 800085a:	4413      	add	r3, r2
 800085c:	6939      	ldr	r1, [r7, #16]
 800085e:	4618      	mov	r0, r3
 8000860:	f001 fd51 	bl	8002306 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000864:	69fb      	ldr	r3, [r7, #28]
 8000866:	3304      	adds	r3, #4
 8000868:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800086a:	69fb      	ldr	r3, [r7, #28]
 800086c:	683a      	ldr	r2, [r7, #0]
 800086e:	18d0      	adds	r0, r2, r3
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	691b      	ldr	r3, [r3, #16]
 8000874:	693a      	ldr	r2, [r7, #16]
 8000876:	4619      	mov	r1, r3
 8000878:	f007 fe70 	bl	800855c <memcpy>
      offset += length_md5sum;
 800087c:	69fa      	ldr	r2, [r7, #28]
 800087e:	693b      	ldr	r3, [r7, #16]
 8000880:	4413      	add	r3, r2
 8000882:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	695b      	ldr	r3, [r3, #20]
 8000888:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800088a:	68f9      	ldr	r1, [r7, #12]
 800088c:	69fb      	ldr	r3, [r7, #28]
 800088e:	683a      	ldr	r2, [r7, #0]
 8000890:	4413      	add	r3, r2
 8000892:	b2ca      	uxtb	r2, r1
 8000894:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	0a19      	lsrs	r1, r3, #8
 800089a:	69fb      	ldr	r3, [r7, #28]
 800089c:	3301      	adds	r3, #1
 800089e:	683a      	ldr	r2, [r7, #0]
 80008a0:	4413      	add	r3, r2
 80008a2:	b2ca      	uxtb	r2, r1
 80008a4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	0c19      	lsrs	r1, r3, #16
 80008aa:	69fb      	ldr	r3, [r7, #28]
 80008ac:	3302      	adds	r3, #2
 80008ae:	683a      	ldr	r2, [r7, #0]
 80008b0:	4413      	add	r3, r2
 80008b2:	b2ca      	uxtb	r2, r1
 80008b4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	0e19      	lsrs	r1, r3, #24
 80008ba:	69fb      	ldr	r3, [r7, #28]
 80008bc:	3303      	adds	r3, #3
 80008be:	683a      	ldr	r2, [r7, #0]
 80008c0:	4413      	add	r3, r2
 80008c2:	b2ca      	uxtb	r2, r1
 80008c4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	3304      	adds	r3, #4
 80008ca:	61fb      	str	r3, [r7, #28]
      return offset;
 80008cc:	69fb      	ldr	r3, [r7, #28]
    }
 80008ce:	4618      	mov	r0, r3
 80008d0:	3720      	adds	r7, #32
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80008d6:	b580      	push	{r7, lr}
 80008d8:	b08a      	sub	sp, #40	; 0x28
 80008da:	af00      	add	r7, sp, #0
 80008dc:	6078      	str	r0, [r7, #4]
 80008de:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80008e4:	69bb      	ldr	r3, [r7, #24]
 80008e6:	683a      	ldr	r2, [r7, #0]
 80008e8:	4413      	add	r3, r2
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	b29a      	uxth	r2, r3
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	889b      	ldrh	r3, [r3, #4]
 80008f6:	b21a      	sxth	r2, r3
 80008f8:	69bb      	ldr	r3, [r7, #24]
 80008fa:	3301      	adds	r3, #1
 80008fc:	6839      	ldr	r1, [r7, #0]
 80008fe:	440b      	add	r3, r1
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	021b      	lsls	r3, r3, #8
 8000904:	b21b      	sxth	r3, r3
 8000906:	4313      	orrs	r3, r2
 8000908:	b21b      	sxth	r3, r3
 800090a:	b29a      	uxth	r2, r3
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8000910:	69bb      	ldr	r3, [r7, #24]
 8000912:	3302      	adds	r3, #2
 8000914:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8000916:	69bb      	ldr	r3, [r7, #24]
 8000918:	683a      	ldr	r2, [r7, #0]
 800091a:	441a      	add	r2, r3
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	4611      	mov	r1, r2
 8000922:	4618      	mov	r0, r3
 8000924:	f001 fd0d 	bl	8002342 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000928:	69bb      	ldr	r3, [r7, #24]
 800092a:	3304      	adds	r3, #4
 800092c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800092e:	69bb      	ldr	r3, [r7, #24]
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
 8000932:	69ba      	ldr	r2, [r7, #24]
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	4413      	add	r3, r2
 8000938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800093a:	429a      	cmp	r2, r3
 800093c:	d20c      	bcs.n	8000958 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 800093e:	683a      	ldr	r2, [r7, #0]
 8000940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000942:	441a      	add	r2, r3
 8000944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000946:	3b01      	subs	r3, #1
 8000948:	6839      	ldr	r1, [r7, #0]
 800094a:	440b      	add	r3, r1
 800094c:	7812      	ldrb	r2, [r2, #0]
 800094e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000952:	3301      	adds	r3, #1
 8000954:	627b      	str	r3, [r7, #36]	; 0x24
 8000956:	e7ec      	b.n	8000932 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8000958:	69ba      	ldr	r2, [r7, #24]
 800095a:	697b      	ldr	r3, [r7, #20]
 800095c:	4413      	add	r3, r2
 800095e:	3b01      	subs	r3, #1
 8000960:	683a      	ldr	r2, [r7, #0]
 8000962:	4413      	add	r3, r2
 8000964:	2200      	movs	r2, #0
 8000966:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8000968:	69bb      	ldr	r3, [r7, #24]
 800096a:	3b01      	subs	r3, #1
 800096c:	683a      	ldr	r2, [r7, #0]
 800096e:	441a      	add	r2, r3
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8000974:	69ba      	ldr	r2, [r7, #24]
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	4413      	add	r3, r2
 800097a:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 800097c:	69bb      	ldr	r3, [r7, #24]
 800097e:	683a      	ldr	r2, [r7, #0]
 8000980:	441a      	add	r2, r3
 8000982:	f107 0310 	add.w	r3, r7, #16
 8000986:	4611      	mov	r1, r2
 8000988:	4618      	mov	r0, r3
 800098a:	f001 fcda 	bl	8002342 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800098e:	69bb      	ldr	r3, [r7, #24]
 8000990:	3304      	adds	r3, #4
 8000992:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000994:	69bb      	ldr	r3, [r7, #24]
 8000996:	623b      	str	r3, [r7, #32]
 8000998:	69ba      	ldr	r2, [r7, #24]
 800099a:	693b      	ldr	r3, [r7, #16]
 800099c:	4413      	add	r3, r2
 800099e:	6a3a      	ldr	r2, [r7, #32]
 80009a0:	429a      	cmp	r2, r3
 80009a2:	d20c      	bcs.n	80009be <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 80009a4:	683a      	ldr	r2, [r7, #0]
 80009a6:	6a3b      	ldr	r3, [r7, #32]
 80009a8:	441a      	add	r2, r3
 80009aa:	6a3b      	ldr	r3, [r7, #32]
 80009ac:	3b01      	subs	r3, #1
 80009ae:	6839      	ldr	r1, [r7, #0]
 80009b0:	440b      	add	r3, r1
 80009b2:	7812      	ldrb	r2, [r2, #0]
 80009b4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80009b6:	6a3b      	ldr	r3, [r7, #32]
 80009b8:	3301      	adds	r3, #1
 80009ba:	623b      	str	r3, [r7, #32]
 80009bc:	e7ec      	b.n	8000998 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 80009be:	69ba      	ldr	r2, [r7, #24]
 80009c0:	693b      	ldr	r3, [r7, #16]
 80009c2:	4413      	add	r3, r2
 80009c4:	3b01      	subs	r3, #1
 80009c6:	683a      	ldr	r2, [r7, #0]
 80009c8:	4413      	add	r3, r2
 80009ca:	2200      	movs	r2, #0
 80009cc:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80009ce:	69bb      	ldr	r3, [r7, #24]
 80009d0:	3b01      	subs	r3, #1
 80009d2:	683a      	ldr	r2, [r7, #0]
 80009d4:	441a      	add	r2, r3
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80009da:	69ba      	ldr	r2, [r7, #24]
 80009dc:	693b      	ldr	r3, [r7, #16]
 80009de:	4413      	add	r3, r2
 80009e0:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80009e2:	69bb      	ldr	r3, [r7, #24]
 80009e4:	683a      	ldr	r2, [r7, #0]
 80009e6:	441a      	add	r2, r3
 80009e8:	f107 030c 	add.w	r3, r7, #12
 80009ec:	4611      	mov	r1, r2
 80009ee:	4618      	mov	r0, r3
 80009f0:	f001 fca7 	bl	8002342 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80009f4:	69bb      	ldr	r3, [r7, #24]
 80009f6:	3304      	adds	r3, #4
 80009f8:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80009fa:	69bb      	ldr	r3, [r7, #24]
 80009fc:	61fb      	str	r3, [r7, #28]
 80009fe:	69ba      	ldr	r2, [r7, #24]
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	4413      	add	r3, r2
 8000a04:	69fa      	ldr	r2, [r7, #28]
 8000a06:	429a      	cmp	r2, r3
 8000a08:	d20c      	bcs.n	8000a24 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8000a0a:	683a      	ldr	r2, [r7, #0]
 8000a0c:	69fb      	ldr	r3, [r7, #28]
 8000a0e:	441a      	add	r2, r3
 8000a10:	69fb      	ldr	r3, [r7, #28]
 8000a12:	3b01      	subs	r3, #1
 8000a14:	6839      	ldr	r1, [r7, #0]
 8000a16:	440b      	add	r3, r1
 8000a18:	7812      	ldrb	r2, [r2, #0]
 8000a1a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000a1c:	69fb      	ldr	r3, [r7, #28]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	61fb      	str	r3, [r7, #28]
 8000a22:	e7ec      	b.n	80009fe <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8000a24:	69ba      	ldr	r2, [r7, #24]
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	4413      	add	r3, r2
 8000a2a:	3b01      	subs	r3, #1
 8000a2c:	683a      	ldr	r2, [r7, #0]
 8000a2e:	4413      	add	r3, r2
 8000a30:	2200      	movs	r2, #0
 8000a32:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8000a34:	69bb      	ldr	r3, [r7, #24]
 8000a36:	3b01      	subs	r3, #1
 8000a38:	683a      	ldr	r2, [r7, #0]
 8000a3a:	441a      	add	r2, r3
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8000a40:	69ba      	ldr	r2, [r7, #24]
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	4413      	add	r3, r2
 8000a46:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	69ba      	ldr	r2, [r7, #24]
 8000a50:	6839      	ldr	r1, [r7, #0]
 8000a52:	440a      	add	r2, r1
 8000a54:	7812      	ldrb	r2, [r2, #0]
 8000a56:	4313      	orrs	r3, r2
 8000a58:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000a5a:	68ba      	ldr	r2, [r7, #8]
 8000a5c:	69bb      	ldr	r3, [r7, #24]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	6839      	ldr	r1, [r7, #0]
 8000a62:	440b      	add	r3, r1
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	021b      	lsls	r3, r3, #8
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000a6c:	68ba      	ldr	r2, [r7, #8]
 8000a6e:	69bb      	ldr	r3, [r7, #24]
 8000a70:	3302      	adds	r3, #2
 8000a72:	6839      	ldr	r1, [r7, #0]
 8000a74:	440b      	add	r3, r1
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	041b      	lsls	r3, r3, #16
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000a7e:	68ba      	ldr	r2, [r7, #8]
 8000a80:	69bb      	ldr	r3, [r7, #24]
 8000a82:	3303      	adds	r3, #3
 8000a84:	6839      	ldr	r1, [r7, #0]
 8000a86:	440b      	add	r3, r1
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	061b      	lsls	r3, r3, #24
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8000a90:	68ba      	ldr	r2, [r7, #8]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8000a96:	69bb      	ldr	r3, [r7, #24]
 8000a98:	3304      	adds	r3, #4
 8000a9a:	61bb      	str	r3, [r7, #24]
     return offset;
 8000a9c:	69bb      	ldr	r3, [r7, #24]
    }
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3728      	adds	r7, #40	; 0x28
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
	...

08000aa8 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	4b03      	ldr	r3, [pc, #12]	; (8000ac0 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	080088dc 	.word	0x080088dc

08000ac4 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	4b03      	ldr	r3, [pc, #12]	; (8000adc <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8000ace:	4618      	mov	r0, r3
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	080088f8 	.word	0x080088f8

08000ae0 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff fd34 	bl	8000558 <_ZN3ros3MsgC1Ev>
 8000af0:	4a06      	ldr	r2, [pc, #24]	; (8000b0c <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2200      	movs	r2, #0
 8000afa:	711a      	strb	r2, [r3, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	4a04      	ldr	r2, [pc, #16]	; (8000b10 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8000b00:	609a      	str	r2, [r3, #8]
    {
    }
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4618      	mov	r0, r3
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	08008a7c 	.word	0x08008a7c
 8000b10:	080088d8 	.word	0x080088d8

08000b14 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	683a      	ldr	r2, [r7, #0]
 8000b26:	4413      	add	r3, r2
 8000b28:	687a      	ldr	r2, [r7, #4]
 8000b2a:	7912      	ldrb	r2, [r2, #4]
 8000b2c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	3301      	adds	r3, #1
 8000b32:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	689b      	ldr	r3, [r3, #8]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff fb45 	bl	80001c8 <strlen>
 8000b3e:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	683a      	ldr	r2, [r7, #0]
 8000b44:	4413      	add	r3, r2
 8000b46:	68b9      	ldr	r1, [r7, #8]
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f001 fbdc 	bl	8002306 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	3304      	adds	r3, #4
 8000b52:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	683a      	ldr	r2, [r7, #0]
 8000b58:	18d0      	adds	r0, r2, r3
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	689b      	ldr	r3, [r3, #8]
 8000b5e:	68ba      	ldr	r2, [r7, #8]
 8000b60:	4619      	mov	r1, r3
 8000b62:	f007 fcfb 	bl	800855c <memcpy>
      offset += length_msg;
 8000b66:	68fa      	ldr	r2, [r7, #12]
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	60fb      	str	r3, [r7, #12]
      return offset;
 8000b6e:	68fb      	ldr	r3, [r7, #12]
    }
 8000b70:	4618      	mov	r0, r3
 8000b72:	3710      	adds	r7, #16
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8000b86:	693b      	ldr	r3, [r7, #16]
 8000b88:	683a      	ldr	r2, [r7, #0]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	781a      	ldrb	r2, [r3, #0]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8000b92:	693b      	ldr	r3, [r7, #16]
 8000b94:	3301      	adds	r3, #1
 8000b96:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8000b98:	693b      	ldr	r3, [r7, #16]
 8000b9a:	683a      	ldr	r2, [r7, #0]
 8000b9c:	441a      	add	r2, r3
 8000b9e:	f107 030c 	add.w	r3, r7, #12
 8000ba2:	4611      	mov	r1, r2
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f001 fbcc 	bl	8002342 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	3304      	adds	r3, #4
 8000bae:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000bb0:	693b      	ldr	r3, [r7, #16]
 8000bb2:	617b      	str	r3, [r7, #20]
 8000bb4:	693a      	ldr	r2, [r7, #16]
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	4413      	add	r3, r2
 8000bba:	697a      	ldr	r2, [r7, #20]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d20c      	bcs.n	8000bda <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8000bc0:	683a      	ldr	r2, [r7, #0]
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	441a      	add	r2, r3
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	3b01      	subs	r3, #1
 8000bca:	6839      	ldr	r1, [r7, #0]
 8000bcc:	440b      	add	r3, r1
 8000bce:	7812      	ldrb	r2, [r2, #0]
 8000bd0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	617b      	str	r3, [r7, #20]
 8000bd8:	e7ec      	b.n	8000bb4 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	4413      	add	r3, r2
 8000be0:	3b01      	subs	r3, #1
 8000be2:	683a      	ldr	r2, [r7, #0]
 8000be4:	4413      	add	r3, r2
 8000be6:	2200      	movs	r2, #0
 8000be8:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	3b01      	subs	r3, #1
 8000bee:	683a      	ldr	r2, [r7, #0]
 8000bf0:	441a      	add	r2, r3
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	613b      	str	r3, [r7, #16]
     return offset;
 8000bfe:	693b      	ldr	r3, [r7, #16]
    }
 8000c00:	4618      	mov	r0, r3
 8000c02:	3718      	adds	r7, #24
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	4b03      	ldr	r3, [pc, #12]	; (8000c20 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8000c12:	4618      	mov	r0, r3
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	0800891c 	.word	0x0800891c

08000c24 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	4b03      	ldr	r3, [pc, #12]	; (8000c3c <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8000c2e:	4618      	mov	r0, r3
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	08008930 	.word	0x08008930

08000c40 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff fc84 	bl	8000558 <_ZN3ros3MsgC1Ev>
 8000c50:	4a11      	ldr	r2, [pc, #68]	; (8000c98 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2200      	movs	r2, #0
 8000c5a:	605a      	str	r2, [r3, #4]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2200      	movs	r2, #0
 8000c66:	60da      	str	r2, [r3, #12]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	611a      	str	r2, [r3, #16]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	f04f 0200 	mov.w	r2, #0
 8000c74:	615a      	str	r2, [r3, #20]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2200      	movs	r2, #0
 8000c7a:	619a      	str	r2, [r3, #24]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2200      	movs	r2, #0
 8000c80:	61da      	str	r2, [r3, #28]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2200      	movs	r2, #0
 8000c86:	621a      	str	r2, [r3, #32]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4618      	mov	r0, r3
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	08008a64 	.word	0x08008a64

08000c9c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08a      	sub	sp, #40	; 0x28
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6859      	ldr	r1, [r3, #4]
 8000cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb0:	683a      	ldr	r2, [r7, #0]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	b2ca      	uxtb	r2, r1
 8000cb6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	0a19      	lsrs	r1, r3, #8
 8000cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	683a      	ldr	r2, [r7, #0]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	b2ca      	uxtb	r2, r1
 8000cc8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	0c19      	lsrs	r1, r3, #16
 8000cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd2:	3302      	adds	r3, #2
 8000cd4:	683a      	ldr	r2, [r7, #0]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	b2ca      	uxtb	r2, r1
 8000cda:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	0e19      	lsrs	r1, r3, #24
 8000ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce4:	3303      	adds	r3, #3
 8000ce6:	683a      	ldr	r2, [r7, #0]
 8000ce8:	4413      	add	r3, r2
 8000cea:	b2ca      	uxtb	r2, r1
 8000cec:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8000cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf0:	3304      	adds	r3, #4
 8000cf2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	623b      	str	r3, [r7, #32]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	6a3a      	ldr	r2, [r7, #32]
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	d22b      	bcs.n	8000d5a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	68da      	ldr	r2, [r3, #12]
 8000d06:	6a3b      	ldr	r3, [r7, #32]
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	4413      	add	r3, r2
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8000d10:	6939      	ldr	r1, [r7, #16]
 8000d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d14:	683a      	ldr	r2, [r7, #0]
 8000d16:	4413      	add	r3, r2
 8000d18:	b2ca      	uxtb	r2, r1
 8000d1a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	0a19      	lsrs	r1, r3, #8
 8000d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d22:	3301      	adds	r3, #1
 8000d24:	683a      	ldr	r2, [r7, #0]
 8000d26:	4413      	add	r3, r2
 8000d28:	b2ca      	uxtb	r2, r1
 8000d2a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	0c19      	lsrs	r1, r3, #16
 8000d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d32:	3302      	adds	r3, #2
 8000d34:	683a      	ldr	r2, [r7, #0]
 8000d36:	4413      	add	r3, r2
 8000d38:	b2ca      	uxtb	r2, r1
 8000d3a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8000d3c:	693b      	ldr	r3, [r7, #16]
 8000d3e:	0e19      	lsrs	r1, r3, #24
 8000d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d42:	3303      	adds	r3, #3
 8000d44:	683a      	ldr	r2, [r7, #0]
 8000d46:	4413      	add	r3, r2
 8000d48:	b2ca      	uxtb	r2, r1
 8000d4a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8000d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d4e:	3304      	adds	r3, #4
 8000d50:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000d52:	6a3b      	ldr	r3, [r7, #32]
 8000d54:	3301      	adds	r3, #1
 8000d56:	623b      	str	r3, [r7, #32]
 8000d58:	e7ce      	b.n	8000cf8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6919      	ldr	r1, [r3, #16]
 8000d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d60:	683a      	ldr	r2, [r7, #0]
 8000d62:	4413      	add	r3, r2
 8000d64:	b2ca      	uxtb	r2, r1
 8000d66:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	691b      	ldr	r3, [r3, #16]
 8000d6c:	0a19      	lsrs	r1, r3, #8
 8000d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d70:	3301      	adds	r3, #1
 8000d72:	683a      	ldr	r2, [r7, #0]
 8000d74:	4413      	add	r3, r2
 8000d76:	b2ca      	uxtb	r2, r1
 8000d78:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	691b      	ldr	r3, [r3, #16]
 8000d7e:	0c19      	lsrs	r1, r3, #16
 8000d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d82:	3302      	adds	r3, #2
 8000d84:	683a      	ldr	r2, [r7, #0]
 8000d86:	4413      	add	r3, r2
 8000d88:	b2ca      	uxtb	r2, r1
 8000d8a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	691b      	ldr	r3, [r3, #16]
 8000d90:	0e19      	lsrs	r1, r3, #24
 8000d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d94:	3303      	adds	r3, #3
 8000d96:	683a      	ldr	r2, [r7, #0]
 8000d98:	4413      	add	r3, r2
 8000d9a:	b2ca      	uxtb	r2, r1
 8000d9c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8000d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da0:	3304      	adds	r3, #4
 8000da2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000da4:	2300      	movs	r3, #0
 8000da6:	61fb      	str	r3, [r7, #28]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	691b      	ldr	r3, [r3, #16]
 8000dac:	69fa      	ldr	r2, [r7, #28]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d22b      	bcs.n	8000e0a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	699a      	ldr	r2, [r3, #24]
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	4413      	add	r3, r2
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8000dc0:	68f9      	ldr	r1, [r7, #12]
 8000dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc4:	683a      	ldr	r2, [r7, #0]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	b2ca      	uxtb	r2, r1
 8000dca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	0a19      	lsrs	r1, r3, #8
 8000dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	683a      	ldr	r2, [r7, #0]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	b2ca      	uxtb	r2, r1
 8000dda:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	0c19      	lsrs	r1, r3, #16
 8000de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de2:	3302      	adds	r3, #2
 8000de4:	683a      	ldr	r2, [r7, #0]
 8000de6:	4413      	add	r3, r2
 8000de8:	b2ca      	uxtb	r2, r1
 8000dea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	0e19      	lsrs	r1, r3, #24
 8000df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df2:	3303      	adds	r3, #3
 8000df4:	683a      	ldr	r2, [r7, #0]
 8000df6:	4413      	add	r3, r2
 8000df8:	b2ca      	uxtb	r2, r1
 8000dfa:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8000dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dfe:	3304      	adds	r3, #4
 8000e00:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	3301      	adds	r3, #1
 8000e06:	61fb      	str	r3, [r7, #28]
 8000e08:	e7ce      	b.n	8000da8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	69d9      	ldr	r1, [r3, #28]
 8000e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e10:	683a      	ldr	r2, [r7, #0]
 8000e12:	4413      	add	r3, r2
 8000e14:	b2ca      	uxtb	r2, r1
 8000e16:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	69db      	ldr	r3, [r3, #28]
 8000e1c:	0a19      	lsrs	r1, r3, #8
 8000e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e20:	3301      	adds	r3, #1
 8000e22:	683a      	ldr	r2, [r7, #0]
 8000e24:	4413      	add	r3, r2
 8000e26:	b2ca      	uxtb	r2, r1
 8000e28:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	69db      	ldr	r3, [r3, #28]
 8000e2e:	0c19      	lsrs	r1, r3, #16
 8000e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e32:	3302      	adds	r3, #2
 8000e34:	683a      	ldr	r2, [r7, #0]
 8000e36:	4413      	add	r3, r2
 8000e38:	b2ca      	uxtb	r2, r1
 8000e3a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	69db      	ldr	r3, [r3, #28]
 8000e40:	0e19      	lsrs	r1, r3, #24
 8000e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e44:	3303      	adds	r3, #3
 8000e46:	683a      	ldr	r2, [r7, #0]
 8000e48:	4413      	add	r3, r2
 8000e4a:	b2ca      	uxtb	r2, r1
 8000e4c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8000e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e50:	3304      	adds	r3, #4
 8000e52:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000e54:	2300      	movs	r3, #0
 8000e56:	61bb      	str	r3, [r7, #24]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	69db      	ldr	r3, [r3, #28]
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	d228      	bcs.n	8000eb4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e66:	69bb      	ldr	r3, [r7, #24]
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	4413      	add	r3, r2
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff f9aa 	bl	80001c8 <strlen>
 8000e74:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8000e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e78:	683a      	ldr	r2, [r7, #0]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	6979      	ldr	r1, [r7, #20]
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f001 fa41 	bl	8002306 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e86:	3304      	adds	r3, #4
 8000e88:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8000e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e8c:	683a      	ldr	r2, [r7, #0]
 8000e8e:	18d0      	adds	r0, r2, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	4413      	add	r3, r2
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	697a      	ldr	r2, [r7, #20]
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	f007 fb5c 	bl	800855c <memcpy>
      offset += length_stringsi;
 8000ea4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000eac:	69bb      	ldr	r3, [r7, #24]
 8000eae:	3301      	adds	r3, #1
 8000eb0:	61bb      	str	r3, [r7, #24]
 8000eb2:	e7d1      	b.n	8000e58 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8000eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3728      	adds	r7, #40	; 0x28
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b08e      	sub	sp, #56	; 0x38
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
 8000ec6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ece:	683a      	ldr	r2, [r7, #0]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ed8:	3301      	adds	r3, #1
 8000eda:	683a      	ldr	r2, [r7, #0]
 8000edc:	4413      	add	r3, r2
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	021b      	lsls	r3, r3, #8
 8000ee2:	6a3a      	ldr	r2, [r7, #32]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000eea:	3302      	adds	r3, #2
 8000eec:	683a      	ldr	r2, [r7, #0]
 8000eee:	4413      	add	r3, r2
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	041b      	lsls	r3, r3, #16
 8000ef4:	6a3a      	ldr	r2, [r7, #32]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000efc:	3303      	adds	r3, #3
 8000efe:	683a      	ldr	r2, [r7, #0]
 8000f00:	4413      	add	r3, r2
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	061b      	lsls	r3, r3, #24
 8000f06:	6a3a      	ldr	r2, [r7, #32]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8000f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f0e:	3304      	adds	r3, #4
 8000f10:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	6a3a      	ldr	r2, [r7, #32]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d90a      	bls.n	8000f32 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	68da      	ldr	r2, [r3, #12]
 8000f20:	6a3b      	ldr	r3, [r7, #32]
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	4619      	mov	r1, r3
 8000f26:	4610      	mov	r0, r2
 8000f28:	f007 fb2e 	bl	8008588 <realloc>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6a3a      	ldr	r2, [r7, #32]
 8000f36:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8000f38:	2300      	movs	r3, #0
 8000f3a:	633b      	str	r3, [r7, #48]	; 0x30
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f42:	429a      	cmp	r2, r3
 8000f44:	d236      	bcs.n	8000fb4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000f4e:	6839      	ldr	r1, [r7, #0]
 8000f50:	440a      	add	r2, r1
 8000f52:	7812      	ldrb	r2, [r2, #0]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000f58:	697a      	ldr	r2, [r7, #20]
 8000f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	6839      	ldr	r1, [r7, #0]
 8000f60:	440b      	add	r3, r1
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	021b      	lsls	r3, r3, #8
 8000f66:	4313      	orrs	r3, r2
 8000f68:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000f6a:	697a      	ldr	r2, [r7, #20]
 8000f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f6e:	3302      	adds	r3, #2
 8000f70:	6839      	ldr	r1, [r7, #0]
 8000f72:	440b      	add	r3, r1
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	041b      	lsls	r3, r3, #16
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000f7c:	697a      	ldr	r2, [r7, #20]
 8000f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f80:	3303      	adds	r3, #3
 8000f82:	6839      	ldr	r1, [r7, #0]
 8000f84:	440b      	add	r3, r1
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	061b      	lsls	r3, r3, #24
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8000f8e:	697a      	ldr	r2, [r7, #20]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8000f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f96:	3304      	adds	r3, #4
 8000f98:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	68da      	ldr	r2, [r3, #12]
 8000f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	4413      	add	r3, r2
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	3208      	adds	r2, #8
 8000fa8:	6812      	ldr	r2, [r2, #0]
 8000faa:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8000fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fae:	3301      	adds	r3, #1
 8000fb0:	633b      	str	r3, [r7, #48]	; 0x30
 8000fb2:	e7c3      	b.n	8000f3c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fb6:	683a      	ldr	r2, [r7, #0]
 8000fb8:	4413      	add	r3, r2
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	683a      	ldr	r2, [r7, #0]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	021b      	lsls	r3, r3, #8
 8000fca:	69fa      	ldr	r2, [r7, #28]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fd2:	3302      	adds	r3, #2
 8000fd4:	683a      	ldr	r2, [r7, #0]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	041b      	lsls	r3, r3, #16
 8000fdc:	69fa      	ldr	r2, [r7, #28]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fe4:	3303      	adds	r3, #3
 8000fe6:	683a      	ldr	r2, [r7, #0]
 8000fe8:	4413      	add	r3, r2
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	061b      	lsls	r3, r3, #24
 8000fee:	69fa      	ldr	r2, [r7, #28]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8000ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ff6:	3304      	adds	r3, #4
 8000ff8:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	691b      	ldr	r3, [r3, #16]
 8000ffe:	69fa      	ldr	r2, [r7, #28]
 8001000:	429a      	cmp	r2, r3
 8001002:	d90a      	bls.n	800101a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	699a      	ldr	r2, [r3, #24]
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	4619      	mov	r1, r3
 800100e:	4610      	mov	r0, r2
 8001010:	f007 faba 	bl	8008588 <realloc>
 8001014:	4602      	mov	r2, r0
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	69fa      	ldr	r2, [r7, #28]
 800101e:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001020:	2300      	movs	r3, #0
 8001022:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	691b      	ldr	r3, [r3, #16]
 8001028:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800102a:	429a      	cmp	r2, r3
 800102c:	d236      	bcs.n	800109c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001036:	6839      	ldr	r1, [r7, #0]
 8001038:	440a      	add	r2, r1
 800103a:	7812      	ldrb	r2, [r2, #0]
 800103c:	4313      	orrs	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001044:	3301      	adds	r3, #1
 8001046:	6839      	ldr	r1, [r7, #0]
 8001048:	440b      	add	r3, r1
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	021b      	lsls	r3, r3, #8
 800104e:	4313      	orrs	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001056:	3302      	adds	r3, #2
 8001058:	6839      	ldr	r1, [r7, #0]
 800105a:	440b      	add	r3, r1
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	041b      	lsls	r3, r3, #16
 8001060:	4313      	orrs	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001068:	3303      	adds	r3, #3
 800106a:	6839      	ldr	r1, [r7, #0]
 800106c:	440b      	add	r3, r1
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	061b      	lsls	r3, r3, #24
 8001072:	4313      	orrs	r3, r2
 8001074:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 800107c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800107e:	3304      	adds	r3, #4
 8001080:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	699a      	ldr	r2, [r3, #24]
 8001086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	4413      	add	r3, r2
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	3214      	adds	r2, #20
 8001090:	6812      	ldr	r2, [r2, #0]
 8001092:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001096:	3301      	adds	r3, #1
 8001098:	62fb      	str	r3, [r7, #44]	; 0x2c
 800109a:	e7c3      	b.n	8001024 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800109c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800109e:	683a      	ldr	r2, [r7, #0]
 80010a0:	4413      	add	r3, r2
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80010a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010a8:	3301      	adds	r3, #1
 80010aa:	683a      	ldr	r2, [r7, #0]
 80010ac:	4413      	add	r3, r2
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	021b      	lsls	r3, r3, #8
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80010b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010ba:	3302      	adds	r3, #2
 80010bc:	683a      	ldr	r2, [r7, #0]
 80010be:	4413      	add	r3, r2
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	041b      	lsls	r3, r3, #16
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80010ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010cc:	3303      	adds	r3, #3
 80010ce:	683a      	ldr	r2, [r7, #0]
 80010d0:	4413      	add	r3, r2
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	061b      	lsls	r3, r3, #24
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4313      	orrs	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 80010dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010de:	3304      	adds	r3, #4
 80010e0:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	69db      	ldr	r3, [r3, #28]
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d90a      	bls.n	8001102 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	4619      	mov	r1, r3
 80010f6:	4610      	mov	r0, r2
 80010f8:	f007 fa46 	bl	8008588 <realloc>
 80010fc:	4602      	mov	r2, r0
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001108:	2300      	movs	r3, #0
 800110a:	62bb      	str	r3, [r7, #40]	; 0x28
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	69db      	ldr	r3, [r3, #28]
 8001110:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001112:	429a      	cmp	r2, r3
 8001114:	d23f      	bcs.n	8001196 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001118:	683a      	ldr	r2, [r7, #0]
 800111a:	441a      	add	r2, r3
 800111c:	f107 030c 	add.w	r3, r7, #12
 8001120:	4611      	mov	r1, r2
 8001122:	4618      	mov	r0, r3
 8001124:	f001 f90d 	bl	8002342 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800112a:	3304      	adds	r3, #4
 800112c:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800112e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
 8001132:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	4413      	add	r3, r2
 8001138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800113a:	429a      	cmp	r2, r3
 800113c:	d20c      	bcs.n	8001158 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 800113e:	683a      	ldr	r2, [r7, #0]
 8001140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001142:	441a      	add	r2, r3
 8001144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001146:	3b01      	subs	r3, #1
 8001148:	6839      	ldr	r1, [r7, #0]
 800114a:	440b      	add	r3, r1
 800114c:	7812      	ldrb	r2, [r2, #0]
 800114e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001152:	3301      	adds	r3, #1
 8001154:	627b      	str	r3, [r7, #36]	; 0x24
 8001156:	e7ec      	b.n	8001132 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001158:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	4413      	add	r3, r2
 800115e:	3b01      	subs	r3, #1
 8001160:	683a      	ldr	r2, [r7, #0]
 8001162:	4413      	add	r3, r2
 8001164:	2200      	movs	r2, #0
 8001166:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800116a:	3b01      	subs	r3, #1
 800116c:	683a      	ldr	r2, [r7, #0]
 800116e:	441a      	add	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001174:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	4413      	add	r3, r2
 800117a:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	4413      	add	r3, r2
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	3220      	adds	r2, #32
 800118a:	6812      	ldr	r2, [r2, #0]
 800118c:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 800118e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001190:	3301      	adds	r3, #1
 8001192:	62bb      	str	r3, [r7, #40]	; 0x28
 8001194:	e7ba      	b.n	800110c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8001196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001198:	4618      	mov	r0, r3
 800119a:	3738      	adds	r7, #56	; 0x38
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	4b03      	ldr	r3, [pc, #12]	; (80011b8 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 80011aa:	4618      	mov	r0, r3
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	08008a00 	.word	0x08008a00

080011bc <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	4b03      	ldr	r3, [pc, #12]	; (80011d4 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 80011c6:	4618      	mov	r0, r3
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	08008954 	.word	0x08008954

080011d8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
 80011e4:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	68ba      	ldr	r2, [r7, #8]
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	683a      	ldr	r2, [r7, #0]
 80011f6:	611a      	str	r2, [r3, #16]
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	4618      	mov	r0, r3
 80011fc:	3714      	adds	r7, #20
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8001206:	b580      	push	{r7, lr}
 8001208:	b082      	sub	sp, #8
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
 800120e:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	68d8      	ldr	r0, [r3, #12]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	6891      	ldr	r1, [r2, #8]
 8001220:	683a      	ldr	r2, [r7, #0]
 8001222:	4798      	blx	r3
 8001224:	4603      	mov	r3, r0
  };
 8001226:	4618      	mov	r0, r3
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 800122e:	b480      	push	{r7}
 8001230:	b083      	sub	sp, #12
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	691b      	ldr	r3, [r3, #16]
  }
 800123a:	4618      	mov	r0, r3
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void)
 8001246:	b480      	push	{r7}
 8001248:	b083      	sub	sp, #12
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
    {
    	return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800125c:	f3c3 0308 	ubfx	r3, r3, #0, #9
    }
 8001260:	4618      	mov	r0, r3
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
      huart(&huart4), rind(0), twind(0), tfind(0){
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4a0a      	ldr	r2, [pc, #40]	; (80012a0 <_ZN13STM32HardwareC1Ev+0x34>)
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2200      	movs	r2, #0
 800127e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2200      	movs	r2, #0
 8001286:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2200      	movs	r2, #0
 800128e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4618      	mov	r0, r3
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	2000048c 	.word	0x2000048c

080012a4 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f000 f804 	bl	80012ba <_ZN13STM32Hardware10reset_rbufEv>
    }
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6818      	ldr	r0, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	3304      	adds	r3, #4
 80012ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012ce:	4619      	mov	r1, r3
 80012d0:	f005 ffda 	bl	8007288 <HAL_UART_Receive_DMA>
    }
 80012d4:	bf00      	nop
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <_ZN13STM32Hardware4readEv>:

    int read(){
 80012dc:	b590      	push	{r4, r7, lr}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
      int c = -1;
 80012e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012e8:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f7ff ffa8 	bl	8001246 <_ZN13STM32Hardware10getRdmaIndEv>
 80012f6:	4603      	mov	r3, r0
 80012f8:	429c      	cmp	r4, r3
 80012fa:	bf14      	ite	ne
 80012fc:	2301      	movne	r3, #1
 80012fe:	2300      	moveq	r3, #0
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b00      	cmp	r3, #0
 8001304:	d012      	beq.n	800132c <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800130c:	1c59      	adds	r1, r3, #1
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	4413      	add	r3, r2
 8001318:	791b      	ldrb	r3, [r3, #4]
 800131a:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001322:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 800132c:	68fb      	ldr	r3, [r7, #12]
    }
 800132e:	4618      	mov	r0, r3
 8001330:	3714      	adds	r7, #20
 8001332:	46bd      	mov	sp, r7
 8001334:	bd90      	pop	{r4, r7, pc}
	...

08001338 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2b20      	cmp	r3, #32
 800134c:	d108      	bne.n	8001360 <_ZN13STM32Hardware5flushEv+0x28>
 800134e:	4b28      	ldr	r3, [pc, #160]	; (80013f0 <_ZN13STM32Hardware5flushEv+0xb8>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	f083 0301 	eor.w	r3, r3, #1
 8001356:	b2db      	uxtb	r3, r3
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <_ZN13STM32Hardware5flushEv+0x28>
 800135c:	2301      	movs	r3, #1
 800135e:	e000      	b.n	8001362 <_ZN13STM32Hardware5flushEv+0x2a>
 8001360:	2300      	movs	r3, #0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d03f      	beq.n	80013e6 <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 8001366:	4b22      	ldr	r3, [pc, #136]	; (80013f0 <_ZN13STM32Hardware5flushEv+0xb8>)
 8001368:	2201      	movs	r2, #1
 800136a:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001378:	429a      	cmp	r2, r3
 800137a:	d031      	beq.n	80013e0 <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001388:	429a      	cmp	r2, r3
 800138a:	d20a      	bcs.n	80013a2 <_ZN13STM32Hardware5flushEv+0x6a>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001392:	b29a      	uxth	r2, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800139a:	b29b      	uxth	r3, r3
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	b29b      	uxth	r3, r3
 80013a0:	e006      	b.n	80013b0 <_ZN13STM32Hardware5flushEv+0x78>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6818      	ldr	r0, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80013bc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	4413      	add	r3, r2
 80013c4:	89fa      	ldrh	r2, [r7, #14]
 80013c6:	4619      	mov	r1, r3
 80013c8:	f005 fee0 	bl	800718c <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80013d2:	89fb      	ldrh	r3, [r7, #14]
 80013d4:	4413      	add	r3, r2
 80013d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 80013e0:	4b03      	ldr	r3, [pc, #12]	; (80013f0 <_ZN13STM32Hardware5flushEv+0xb8>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	701a      	strb	r2, [r3, #0]
      }
    }
 80013e6:	bf00      	nop
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20000090 	.word	0x20000090

080013f4 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
      int n = length;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800140a:	bfa8      	it	ge
 800140c:	f44f 7300 	movge.w	r3, #512	; 0x200
 8001410:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001418:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	4293      	cmp	r3, r2
 8001420:	bf28      	it	cs
 8001422:	4613      	movcs	r3, r2
 8001424:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800142c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001430:	68fa      	ldr	r2, [r7, #12]
 8001432:	4413      	add	r3, r2
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	68b9      	ldr	r1, [r7, #8]
 8001438:	4618      	mov	r0, r3
 800143a:	f007 f88f 	bl	800855c <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	4413      	add	r3, r2
 8001448:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8001452:	697a      	ldr	r2, [r7, #20]
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	429a      	cmp	r2, r3
 8001458:	d00b      	beq.n	8001472 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	68ba      	ldr	r2, [r7, #8]
 8001464:	18d1      	adds	r1, r2, r3
 8001466:	697a      	ldr	r2, [r7, #20]
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	461a      	mov	r2, r3
 800146e:	f007 f875 	bl	800855c <memcpy>
      }

      flush();
 8001472:	68f8      	ldr	r0, [r7, #12]
 8001474:	f7ff ff60 	bl	8001338 <_ZN13STM32Hardware5flushEv>
    }
 8001478:	bf00      	nop
 800147a:	3718      	adds	r7, #24
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	f002 fb12 	bl	8003ab0 <HAL_GetTick>
 800148c:	4603      	mov	r3, r0
 800148e:	4618      	mov	r0, r3
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
	...

08001498 <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
      data("")
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff f858 	bl	8000558 <_ZN3ros3MsgC1Ev>
 80014a8:	4a05      	ldr	r2, [pc, #20]	; (80014c0 <_ZN8std_msgs6StringC1Ev+0x28>)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a04      	ldr	r2, [pc, #16]	; (80014c4 <_ZN8std_msgs6StringC1Ev+0x2c>)
 80014b2:	605a      	str	r2, [r3, #4]
    {
    }
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	4618      	mov	r0, r3
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	08008a38 	.word	0x08008a38
 80014c4:	080088d8 	.word	0x080088d8

080014c8 <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	4618      	mov	r0, r3
 80014dc:	f7fe fe74 	bl	80001c8 <strlen>
 80014e0:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	683a      	ldr	r2, [r7, #0]
 80014e6:	4413      	add	r3, r2
 80014e8:	68b9      	ldr	r1, [r7, #8]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f000 ff0b 	bl	8002306 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	3304      	adds	r3, #4
 80014f4:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	18d0      	adds	r0, r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	68ba      	ldr	r2, [r7, #8]
 8001502:	4619      	mov	r1, r3
 8001504:	f007 f82a 	bl	800855c <memcpy>
      offset += length_data;
 8001508:	68fa      	ldr	r2, [r7, #12]
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	4413      	add	r3, r2
 800150e:	60fb      	str	r3, [r7, #12]
      return offset;
 8001510:	68fb      	ldr	r3, [r7, #12]
    }
 8001512:	4618      	mov	r0, r3
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800151a:	b580      	push	{r7, lr}
 800151c:	b086      	sub	sp, #24
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
 8001522:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001524:	2300      	movs	r3, #0
 8001526:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	683a      	ldr	r2, [r7, #0]
 800152c:	441a      	add	r2, r3
 800152e:	f107 030c 	add.w	r3, r7, #12
 8001532:	4611      	mov	r1, r2
 8001534:	4618      	mov	r0, r3
 8001536:	f000 ff04 	bl	8002342 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	3304      	adds	r3, #4
 800153e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	617b      	str	r3, [r7, #20]
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	4413      	add	r3, r2
 800154a:	697a      	ldr	r2, [r7, #20]
 800154c:	429a      	cmp	r2, r3
 800154e:	d20c      	bcs.n	800156a <_ZN8std_msgs6String11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 8001550:	683a      	ldr	r2, [r7, #0]
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	441a      	add	r2, r3
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	3b01      	subs	r3, #1
 800155a:	6839      	ldr	r1, [r7, #0]
 800155c:	440b      	add	r3, r1
 800155e:	7812      	ldrb	r2, [r2, #0]
 8001560:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	3301      	adds	r3, #1
 8001566:	617b      	str	r3, [r7, #20]
 8001568:	e7ec      	b.n	8001544 <_ZN8std_msgs6String11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_data-1]=0;
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	4413      	add	r3, r2
 8001570:	3b01      	subs	r3, #1
 8001572:	683a      	ldr	r2, [r7, #0]
 8001574:	4413      	add	r3, r2
 8001576:	2200      	movs	r2, #0
 8001578:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	3b01      	subs	r3, #1
 800157e:	683a      	ldr	r2, [r7, #0]
 8001580:	441a      	add	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	605a      	str	r2, [r3, #4]
      offset += length_data;
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	4413      	add	r3, r2
 800158c:	613b      	str	r3, [r7, #16]
     return offset;
 800158e:	693b      	ldr	r3, [r7, #16]
    }
 8001590:	4618      	mov	r0, r3
 8001592:	3718      	adds	r7, #24
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <_ZN8std_msgs6String7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/String"; };
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	4b03      	ldr	r3, [pc, #12]	; (80015b0 <_ZN8std_msgs6String7getTypeEv+0x18>)
 80015a2:	4618      	mov	r0, r3
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	08008978 	.word	0x08008978

080015b4 <_ZN8std_msgs6String6getMD5Ev>:
    virtual const char * getMD5() override { return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	4b03      	ldr	r3, [pc, #12]	; (80015cc <_ZN8std_msgs6String6getMD5Ev+0x18>)
 80015be:	4618      	mov	r0, r3
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	08008988 	.word	0x08008988

080015d0 <_ZN12EncoderMotorC1EP12GPIO_TypeDefS1_ttP17TIM_HandleTypeDeftS3_ttS3_t>:
uint16_t speed_convert(float fval); // float to uint16_t convert

class EncoderMotor
{
public:
	EncoderMotor(GPIO_TypeDef* dir_port, GPIO_TypeDef* ena_port,
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
 80015dc:	807b      	strh	r3, [r7, #2]
				uint16_t dir_pin, uint16_t ena_pin,
				TIM_HandleTypeDef* encoder_timer,uint16_t encoder_timer_chanel1,
				TIM_HandleTypeDef* speed_timer,uint16_t speed_timer_chanel1,uint16_t speed_timer_chanel2,
				TIM_HandleTypeDef* pwm_timer,uint16_t pwm_timer_chanel1)
	{
		c_vel,setted_vel,DIR,ENA = 0;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2200      	movs	r2, #0
 80015e2:	715a      	strb	r2, [r3, #5]
		speed_data_register1 = 0;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2200      	movs	r2, #0
 80015e8:	629a      	str	r2, [r3, #40]	; 0x28
		speed_data_register2 = 0;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	2200      	movs	r2, #0
 80015ee:	62da      	str	r2, [r3, #44]	; 0x2c

		DIR_Port = dir_port;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	68ba      	ldr	r2, [r7, #8]
 80015f4:	609a      	str	r2, [r3, #8]
		DIR_Pin = dir_pin;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	887a      	ldrh	r2, [r7, #2]
 80015fa:	819a      	strh	r2, [r3, #12]
		ENA_Port = ena_port;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	611a      	str	r2, [r3, #16]
		ENA1_Pin = ena_pin;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	8b3a      	ldrh	r2, [r7, #24]
 8001606:	829a      	strh	r2, [r3, #20]

		Encoder_Timer = encoder_timer;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	69fa      	ldr	r2, [r7, #28]
 800160c:	619a      	str	r2, [r3, #24]
		Encoder_Timer_Chanel1 = encoder_timer_chanel1;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	8c3a      	ldrh	r2, [r7, #32]
 8001612:	839a      	strh	r2, [r3, #28]

		Speed_Timer = speed_timer;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001618:	621a      	str	r2, [r3, #32]
		Speed_Timer_Chanel1 = speed_timer_chanel1;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800161e:	849a      	strh	r2, [r3, #36]	; 0x24
		Speed_Timer_Chanel2 = speed_timer_chanel2;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001624:	84da      	strh	r2, [r3, #38]	; 0x26

		Pwm_Timer = pwm_timer;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800162a:	631a      	str	r2, [r3, #48]	; 0x30
		Pwm_Timer_Chanel1 = pwm_timer_chanel1;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001630:	869a      	strh	r2, [r3, #52]	; 0x34
		//------------------for use HAL config function
		sConfig.OCMode = TIM_OCMODE_PWM2;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	2270      	movs	r2, #112	; 0x70
 8001636:	639a      	str	r2, [r3, #56]	; 0x38
		sConfig.Pulse = 0;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	2200      	movs	r2, #0
 800163c:	63da      	str	r2, [r3, #60]	; 0x3c
		sConfig.OCPolarity = TIM_OCPOLARITY_HIGH;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2200      	movs	r2, #0
 8001642:	641a      	str	r2, [r3, #64]	; 0x40
		sConfig.OCFastMode = TIM_OCFAST_DISABLE;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2200      	movs	r2, #0
 8001648:	649a      	str	r2, [r3, #72]	; 0x48
		//------------------
		HAL_TIM_IC_Start_DMA(Speed_Timer, Speed_Timer_Chanel1, &speed_data_register1,65535);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	6a18      	ldr	r0, [r3, #32]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001652:	4619      	mov	r1, r3
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800165a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800165e:	f004 faef 	bl	8005c40 <HAL_TIM_IC_Start_DMA>
		HAL_TIM_IC_Start_DMA(Speed_Timer, Speed_Timer_Chanel2, &speed_data_register2,65535);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	6a18      	ldr	r0, [r3, #32]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800166a:	4619      	mov	r1, r3
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8001672:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001676:	f004 fae3 	bl	8005c40 <HAL_TIM_IC_Start_DMA>
	}
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	4618      	mov	r0, r3
 800167e:	3710      	adds	r7, #16
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	4a04      	ldr	r2, [pc, #16]	; (80016a0 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4618      	mov	r0, r3
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	08008a50 	.word	0x08008a50

080016a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff ffe8 	bl	8001684 <_ZN3ros15NodeHandleBase_C1Ev>
 80016b4:	4a36      	ldr	r2, [pc, #216]	; (8001790 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	3304      	adds	r3, #4
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff fdd4 	bl	800126c <_ZN13STM32HardwareC1Ev>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2200      	movs	r2, #0
 80016d0:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2200      	movs	r2, #0
 80016d8:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2200      	movs	r2, #0
 80016e0:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80016ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016ee:	2100      	movs	r1, #0
 80016f0:	4618      	mov	r0, r3
 80016f2:	f006 ff41 	bl	8008578 <memset>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80016fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001700:	2100      	movs	r1, #0
 8001702:	4618      	mov	r0, r3
 8001704:	f006 ff38 	bl	8008578 <memset>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f603 0324 	addw	r3, r3, #2084	; 0x824
 800170e:	2264      	movs	r2, #100	; 0x64
 8001710:	2100      	movs	r1, #0
 8001712:	4618      	mov	r0, r3
 8001714:	f006 ff30 	bl	8008578 <memset>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f603 0388 	addw	r3, r3, #2184	; 0x888
 800171e:	2264      	movs	r2, #100	; 0x64
 8001720:	2100      	movs	r1, #0
 8001722:	4618      	mov	r0, r3
 8001724:	f006 ff28 	bl	8008578 <memset>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2200      	movs	r2, #0
 800174c:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2200      	movs	r2, #0
 8001764:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f603 1314 	addw	r3, r3, #2324	; 0x914
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff fa5e 	bl	8000c40 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	4618      	mov	r0, r3
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	08008a24 	.word	0x08008a24

08001794 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b0a0      	sub	sp, #128	; 0x80
 8001798:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN 1 */

	const char * hello = "Hello World!!";
 800179a:	4b30      	ldr	r3, [pc, #192]	; (800185c <main+0xc8>)
 800179c:	65fb      	str	r3, [r7, #92]	; 0x5c

	int chatter_interval = 1000.0 / 2;
 800179e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80017a2:	65bb      	str	r3, [r7, #88]	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017a4:	f002 f91e 	bl	80039e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  EncoderMotor EMotor_L(dir_port_l,ena_port,dir_pin_l,ena_pin,
      			  	  	encoder_timer_l,encoder_timer_chanel1_l,
    					speed_timer_l,speed_timer_chanel1_l,speed_timer_chanel2_l,
  						pwm_timer_l, pwm_timer_chanel1_l);
 80017a8:	1d38      	adds	r0, r7, #4
 80017aa:	2300      	movs	r3, #0
 80017ac:	9307      	str	r3, [sp, #28]
 80017ae:	4b2c      	ldr	r3, [pc, #176]	; (8001860 <main+0xcc>)
 80017b0:	9306      	str	r3, [sp, #24]
 80017b2:	2308      	movs	r3, #8
 80017b4:	9305      	str	r3, [sp, #20]
 80017b6:	2304      	movs	r3, #4
 80017b8:	9304      	str	r3, [sp, #16]
 80017ba:	4b2a      	ldr	r3, [pc, #168]	; (8001864 <main+0xd0>)
 80017bc:	9303      	str	r3, [sp, #12]
 80017be:	2300      	movs	r3, #0
 80017c0:	9302      	str	r3, [sp, #8]
 80017c2:	4b29      	ldr	r3, [pc, #164]	; (8001868 <main+0xd4>)
 80017c4:	9301      	str	r3, [sp, #4]
 80017c6:	230a      	movs	r3, #10
 80017c8:	9300      	str	r3, [sp, #0]
 80017ca:	2308      	movs	r3, #8
 80017cc:	4a27      	ldr	r2, [pc, #156]	; (800186c <main+0xd8>)
 80017ce:	4927      	ldr	r1, [pc, #156]	; (800186c <main+0xd8>)
 80017d0:	f7ff fefe 	bl	80015d0 <_ZN12EncoderMotorC1EP12GPIO_TypeDefS1_ttP17TIM_HandleTypeDeftS3_ttS3_t>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017d4:	f000 f852 	bl	800187c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017d8:	f000 fd14 	bl	8002204 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80017dc:	f000 fcca 	bl	8002174 <_ZL11MX_DMA_Initv>
  MX_UART4_Init();
 80017e0:	f000 fc9a 	bl	8002118 <_ZL13MX_UART4_Initv>
  MX_RTC_Init();
 80017e4:	f000 f926 	bl	8001a34 <_ZL11MX_RTC_Initv>
  MX_I2C1_Init();
 80017e8:	f000 f8bc 	bl	8001964 <_ZL12MX_I2C1_Initv>
  MX_I2C2_Init();
 80017ec:	f000 f8ee 	bl	80019cc <_ZL12MX_I2C2_Initv>
  MX_TIM2_Init();
 80017f0:	f000 f94a 	bl	8001a88 <_ZL12MX_TIM2_Initv>
  MX_TIM5_Init();
 80017f4:	f000 fb34 	bl	8001e60 <_ZL12MX_TIM5_Initv>
  MX_TIM12_Init();
 80017f8:	f000 fc18 	bl	800202c <_ZL13MX_TIM12_Initv>
  MX_TIM3_Init();
 80017fc:	f000 f9b4 	bl	8001b68 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 8001800:	f000 fa70 	bl	8001ce4 <_ZL12MX_TIM4_Initv>
  MX_TIM9_Init();
 8001804:	f000 fb9c 	bl	8001f40 <_ZL12MX_TIM9_Initv>
  /* USER CODE BEGIN 2 */

    nh.initNode();
 8001808:	4819      	ldr	r0, [pc, #100]	; (8001870 <main+0xdc>)
 800180a:	f000 fdbf 	bl	800238c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
    nh.advertise(chatter);
 800180e:	4919      	ldr	r1, [pc, #100]	; (8001874 <main+0xe0>)
 8001810:	4817      	ldr	r0, [pc, #92]	; (8001870 <main+0xdc>)
 8001812:	f000 fdd8 	bl	80023c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  EMotor_L.update_params(3, 1);
 8001816:	1d3b      	adds	r3, r7, #4
 8001818:	2101      	movs	r1, #1
 800181a:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 800181e:	4618      	mov	r0, r3
 8001820:	f001 fabc 	bl	8002d9c <_ZN12EncoderMotor13update_paramsEfb>
	  EMotor_L.set_params();
 8001824:	1d3b      	adds	r3, r7, #4
 8001826:	4618      	mov	r0, r3
 8001828:	f001 fb2b 	bl	8002e82 <_ZN12EncoderMotor10set_paramsEv>
	  EMotor_L.update_params(3, 1);
 800182c:	1d3b      	adds	r3, r7, #4
 800182e:	2101      	movs	r1, #1
 8001830:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8001834:	4618      	mov	r0, r3
 8001836:	f001 fab1 	bl	8002d9c <_ZN12EncoderMotor13update_paramsEfb>
	  if (nh.connected())
 800183a:	480d      	ldr	r0, [pc, #52]	; (8001870 <main+0xdc>)
 800183c:	f000 fdf3 	bl	8002426 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d006      	beq.n	8001854 <main+0xc0>
		        {

		                str_msg.data = hello;
 8001846:	4a0c      	ldr	r2, [pc, #48]	; (8001878 <main+0xe4>)
 8001848:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800184a:	6053      	str	r3, [r2, #4]
		                chatter.publish(&str_msg);
 800184c:	490a      	ldr	r1, [pc, #40]	; (8001878 <main+0xe4>)
 800184e:	4809      	ldr	r0, [pc, #36]	; (8001874 <main+0xe0>)
 8001850:	f7ff fcd9 	bl	8001206 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		        }

		  nh.spinOnce();
 8001854:	4806      	ldr	r0, [pc, #24]	; (8001870 <main+0xdc>)
 8001856:	f000 fdf3 	bl	8002440 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
	  EMotor_L.update_params(3, 1);
 800185a:	e7dc      	b.n	8001816 <main+0x82>
 800185c:	080089ac 	.word	0x080089ac
 8001860:	2000027c 	.word	0x2000027c
 8001864:	200001a4 	.word	0x200001a4
 8001868:	2000015c 	.word	0x2000015c
 800186c:	40020000 	.word	0x40020000
 8001870:	20000590 	.word	0x20000590
 8001874:	20000ed4 	.word	0x20000ed4
 8001878:	20000ecc 	.word	0x20000ecc

0800187c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b094      	sub	sp, #80	; 0x50
 8001880:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001882:	f107 0320 	add.w	r3, r7, #32
 8001886:	2230      	movs	r2, #48	; 0x30
 8001888:	2100      	movs	r1, #0
 800188a:	4618      	mov	r0, r3
 800188c:	f006 fe74 	bl	8008578 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001890:	f107 030c 	add.w	r3, r7, #12
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	60da      	str	r2, [r3, #12]
 800189e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018a0:	2300      	movs	r3, #0
 80018a2:	60bb      	str	r3, [r7, #8]
 80018a4:	4b2d      	ldr	r3, [pc, #180]	; (800195c <_Z18SystemClock_Configv+0xe0>)
 80018a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a8:	4a2c      	ldr	r2, [pc, #176]	; (800195c <_Z18SystemClock_Configv+0xe0>)
 80018aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ae:	6413      	str	r3, [r2, #64]	; 0x40
 80018b0:	4b2a      	ldr	r3, [pc, #168]	; (800195c <_Z18SystemClock_Configv+0xe0>)
 80018b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b8:	60bb      	str	r3, [r7, #8]
 80018ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018bc:	2300      	movs	r3, #0
 80018be:	607b      	str	r3, [r7, #4]
 80018c0:	4b27      	ldr	r3, [pc, #156]	; (8001960 <_Z18SystemClock_Configv+0xe4>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a26      	ldr	r2, [pc, #152]	; (8001960 <_Z18SystemClock_Configv+0xe4>)
 80018c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018ca:	6013      	str	r3, [r2, #0]
 80018cc:	4b24      	ldr	r3, [pc, #144]	; (8001960 <_Z18SystemClock_Configv+0xe4>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018d4:	607b      	str	r3, [r7, #4]
 80018d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80018d8:	2309      	movs	r3, #9
 80018da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80018e2:	2301      	movs	r3, #1
 80018e4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018e6:	2302      	movs	r3, #2
 80018e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80018f0:	2308      	movs	r3, #8
 80018f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80018f4:	2364      	movs	r3, #100	; 0x64
 80018f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80018f8:	2304      	movs	r3, #4
 80018fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80018fc:	2307      	movs	r3, #7
 80018fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001900:	f107 0320 	add.w	r3, r7, #32
 8001904:	4618      	mov	r0, r3
 8001906:	f003 f8ed 	bl	8004ae4 <HAL_RCC_OscConfig>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	bf14      	ite	ne
 8001910:	2301      	movne	r3, #1
 8001912:	2300      	moveq	r3, #0
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 800191a:	f000 fcef 	bl	80022fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800191e:	230f      	movs	r3, #15
 8001920:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001922:	2302      	movs	r3, #2
 8001924:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001926:	2300      	movs	r3, #0
 8001928:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800192a:	2300      	movs	r3, #0
 800192c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800192e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001932:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001934:	f107 030c 	add.w	r3, r7, #12
 8001938:	2100      	movs	r1, #0
 800193a:	4618      	mov	r0, r3
 800193c:	f003 fb4a 	bl	8004fd4 <HAL_RCC_ClockConfig>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	bf14      	ite	ne
 8001946:	2301      	movne	r3, #1
 8001948:	2300      	moveq	r3, #0
 800194a:	b2db      	uxtb	r3, r3
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <_Z18SystemClock_Configv+0xd8>
  {
    Error_Handler();
 8001950:	f000 fcd4 	bl	80022fc <Error_Handler>
  }
}
 8001954:	bf00      	nop
 8001956:	3750      	adds	r7, #80	; 0x50
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40023800 	.word	0x40023800
 8001960:	40007000 	.word	0x40007000

08001964 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001968:	4b15      	ldr	r3, [pc, #84]	; (80019c0 <_ZL12MX_I2C1_Initv+0x5c>)
 800196a:	4a16      	ldr	r2, [pc, #88]	; (80019c4 <_ZL12MX_I2C1_Initv+0x60>)
 800196c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800196e:	4b14      	ldr	r3, [pc, #80]	; (80019c0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001970:	4a15      	ldr	r2, [pc, #84]	; (80019c8 <_ZL12MX_I2C1_Initv+0x64>)
 8001972:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001974:	4b12      	ldr	r3, [pc, #72]	; (80019c0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001976:	2200      	movs	r2, #0
 8001978:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800197a:	4b11      	ldr	r3, [pc, #68]	; (80019c0 <_ZL12MX_I2C1_Initv+0x5c>)
 800197c:	2200      	movs	r2, #0
 800197e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001980:	4b0f      	ldr	r3, [pc, #60]	; (80019c0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001982:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001986:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001988:	4b0d      	ldr	r3, [pc, #52]	; (80019c0 <_ZL12MX_I2C1_Initv+0x5c>)
 800198a:	2200      	movs	r2, #0
 800198c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800198e:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001990:	2200      	movs	r2, #0
 8001992:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001994:	4b0a      	ldr	r3, [pc, #40]	; (80019c0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001996:	2200      	movs	r2, #0
 8001998:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800199a:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <_ZL12MX_I2C1_Initv+0x5c>)
 800199c:	2200      	movs	r2, #0
 800199e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019a0:	4807      	ldr	r0, [pc, #28]	; (80019c0 <_ZL12MX_I2C1_Initv+0x5c>)
 80019a2:	f002 ff5b 	bl	800485c <HAL_I2C_Init>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	bf14      	ite	ne
 80019ac:	2301      	movne	r3, #1
 80019ae:	2300      	moveq	r3, #0
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 80019b6:	f000 fca1 	bl	80022fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20000094 	.word	0x20000094
 80019c4:	40005400 	.word	0x40005400
 80019c8:	000186a0 	.word	0x000186a0

080019cc <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80019d0:	4b15      	ldr	r3, [pc, #84]	; (8001a28 <_ZL12MX_I2C2_Initv+0x5c>)
 80019d2:	4a16      	ldr	r2, [pc, #88]	; (8001a2c <_ZL12MX_I2C2_Initv+0x60>)
 80019d4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80019d6:	4b14      	ldr	r3, [pc, #80]	; (8001a28 <_ZL12MX_I2C2_Initv+0x5c>)
 80019d8:	4a15      	ldr	r2, [pc, #84]	; (8001a30 <_ZL12MX_I2C2_Initv+0x64>)
 80019da:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019dc:	4b12      	ldr	r3, [pc, #72]	; (8001a28 <_ZL12MX_I2C2_Initv+0x5c>)
 80019de:	2200      	movs	r2, #0
 80019e0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80019e2:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <_ZL12MX_I2C2_Initv+0x5c>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019e8:	4b0f      	ldr	r3, [pc, #60]	; (8001a28 <_ZL12MX_I2C2_Initv+0x5c>)
 80019ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019ee:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019f0:	4b0d      	ldr	r3, [pc, #52]	; (8001a28 <_ZL12MX_I2C2_Initv+0x5c>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80019f6:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <_ZL12MX_I2C2_Initv+0x5c>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019fc:	4b0a      	ldr	r3, [pc, #40]	; (8001a28 <_ZL12MX_I2C2_Initv+0x5c>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a02:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <_ZL12MX_I2C2_Initv+0x5c>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001a08:	4807      	ldr	r0, [pc, #28]	; (8001a28 <_ZL12MX_I2C2_Initv+0x5c>)
 8001a0a:	f002 ff27 	bl	800485c <HAL_I2C_Init>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	bf14      	ite	ne
 8001a14:	2301      	movne	r3, #1
 8001a16:	2300      	moveq	r3, #0
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <_ZL12MX_I2C2_Initv+0x56>
  {
    Error_Handler();
 8001a1e:	f000 fc6d 	bl	80022fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	200000e8 	.word	0x200000e8
 8001a2c:	40005800 	.word	0x40005800
 8001a30:	000186a0 	.word	0x000186a0

08001a34 <_ZL11MX_RTC_Initv>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001a38:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <_ZL11MX_RTC_Initv+0x4c>)
 8001a3a:	4a12      	ldr	r2, [pc, #72]	; (8001a84 <_ZL11MX_RTC_Initv+0x50>)
 8001a3c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001a3e:	4b10      	ldr	r3, [pc, #64]	; (8001a80 <_ZL11MX_RTC_Initv+0x4c>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001a44:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <_ZL11MX_RTC_Initv+0x4c>)
 8001a46:	227f      	movs	r2, #127	; 0x7f
 8001a48:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001a4a:	4b0d      	ldr	r3, [pc, #52]	; (8001a80 <_ZL11MX_RTC_Initv+0x4c>)
 8001a4c:	22ff      	movs	r2, #255	; 0xff
 8001a4e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a50:	4b0b      	ldr	r3, [pc, #44]	; (8001a80 <_ZL11MX_RTC_Initv+0x4c>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a56:	4b0a      	ldr	r3, [pc, #40]	; (8001a80 <_ZL11MX_RTC_Initv+0x4c>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a5c:	4b08      	ldr	r3, [pc, #32]	; (8001a80 <_ZL11MX_RTC_Initv+0x4c>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a62:	4807      	ldr	r0, [pc, #28]	; (8001a80 <_ZL11MX_RTC_Initv+0x4c>)
 8001a64:	f003 fdb8 	bl	80055d8 <HAL_RTC_Init>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	bf14      	ite	ne
 8001a6e:	2301      	movne	r3, #1
 8001a70:	2300      	moveq	r3, #0
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <_ZL11MX_RTC_Initv+0x48>
  {
    Error_Handler();
 8001a78:	f000 fc40 	bl	80022fc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001a7c:	bf00      	nop
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	2000013c 	.word	0x2000013c
 8001a84:	40002800 	.word	0x40002800

08001a88 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b088      	sub	sp, #32
 8001a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001a8e:	f107 030c 	add.w	r3, r7, #12
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	605a      	str	r2, [r3, #4]
 8001a98:	609a      	str	r2, [r3, #8]
 8001a9a:	60da      	str	r2, [r3, #12]
 8001a9c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a9e:	1d3b      	adds	r3, r7, #4
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001aa6:	4b2e      	ldr	r3, [pc, #184]	; (8001b60 <_ZL12MX_TIM2_Initv+0xd8>)
 8001aa8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001aac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001aae:	4b2c      	ldr	r3, [pc, #176]	; (8001b60 <_ZL12MX_TIM2_Initv+0xd8>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab4:	4b2a      	ldr	r3, [pc, #168]	; (8001b60 <_ZL12MX_TIM2_Initv+0xd8>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001aba:	4b29      	ldr	r3, [pc, #164]	; (8001b60 <_ZL12MX_TIM2_Initv+0xd8>)
 8001abc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ac0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ac2:	4b27      	ldr	r3, [pc, #156]	; (8001b60 <_ZL12MX_TIM2_Initv+0xd8>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ac8:	4b25      	ldr	r3, [pc, #148]	; (8001b60 <_ZL12MX_TIM2_Initv+0xd8>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ace:	4824      	ldr	r0, [pc, #144]	; (8001b60 <_ZL12MX_TIM2_Initv+0xd8>)
 8001ad0:	f003 fe7c 	bl	80057cc <HAL_TIM_Base_Init>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	bf14      	ite	ne
 8001ada:	2301      	movne	r3, #1
 8001adc:	2300      	moveq	r3, #0
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <_ZL12MX_TIM2_Initv+0x60>
  {
    Error_Handler();
 8001ae4:	f000 fc0a 	bl	80022fc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8001ae8:	2307      	movs	r3, #7
 8001aea:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001aec:	2350      	movs	r3, #80	; 0x50
 8001aee:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8001af0:	2300      	movs	r3, #0
 8001af2:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 8001af4:	2300      	movs	r3, #0
 8001af6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001af8:	f107 030c 	add.w	r3, r7, #12
 8001afc:	4619      	mov	r1, r3
 8001afe:	4818      	ldr	r0, [pc, #96]	; (8001b60 <_ZL12MX_TIM2_Initv+0xd8>)
 8001b00:	f004 fc6d 	bl	80063de <HAL_TIM_SlaveConfigSynchro>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	bf14      	ite	ne
 8001b0a:	2301      	movne	r3, #1
 8001b0c:	2300      	moveq	r3, #0
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <_ZL12MX_TIM2_Initv+0x90>
  {
    Error_Handler();
 8001b14:	f000 fbf2 	bl	80022fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 8001b18:	2340      	movs	r3, #64	; 0x40
 8001b1a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b20:	1d3b      	adds	r3, r7, #4
 8001b22:	4619      	mov	r1, r3
 8001b24:	480e      	ldr	r0, [pc, #56]	; (8001b60 <_ZL12MX_TIM2_Initv+0xd8>)
 8001b26:	f005 fa67 	bl	8006ff8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	bf14      	ite	ne
 8001b30:	2301      	movne	r3, #1
 8001b32:	2300      	moveq	r3, #0
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <_ZL12MX_TIM2_Initv+0xb6>
  {
    Error_Handler();
 8001b3a:	f000 fbdf 	bl	80022fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  htim2.Instance->CNT=Timer_Encoder_init_value; // установка начального значения таймера, чтобы избежать underflow
 8001b3e:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <_ZL12MX_TIM2_Initv+0xd8>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a08      	ldr	r2, [pc, #32]	; (8001b64 <_ZL12MX_TIM2_Initv+0xdc>)
 8001b44:	625a      	str	r2, [r3, #36]	; 0x24
  htim2.Instance->CR1|=  1UL << 0; //enable timer
 8001b46:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <_ZL12MX_TIM2_Initv+0xd8>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	4b04      	ldr	r3, [pc, #16]	; (8001b60 <_ZL12MX_TIM2_Initv+0xd8>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f042 0201 	orr.w	r2, r2, #1
 8001b54:	601a      	str	r2, [r3, #0]

  /* USER CODE END TIM2_Init 2 */

}
 8001b56:	bf00      	nop
 8001b58:	3720      	adds	r7, #32
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	2000015c 	.word	0x2000015c
 8001b64:	00013880 	.word	0x00013880

08001b68 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b090      	sub	sp, #64	; 0x40
 8001b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	605a      	str	r2, [r3, #4]
 8001b78:	609a      	str	r2, [r3, #8]
 8001b7a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001b7c:	f107 031c 	add.w	r3, r7, #28
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	605a      	str	r2, [r3, #4]
 8001b86:	609a      	str	r2, [r3, #8]
 8001b88:	60da      	str	r2, [r3, #12]
 8001b8a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b8c:	f107 0314 	add.w	r3, r7, #20
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001b96:	1d3b      	adds	r3, r7, #4
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	605a      	str	r2, [r3, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ba2:	4b4e      	ldr	r3, [pc, #312]	; (8001cdc <_ZL12MX_TIM3_Initv+0x174>)
 8001ba4:	4a4e      	ldr	r2, [pc, #312]	; (8001ce0 <_ZL12MX_TIM3_Initv+0x178>)
 8001ba6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001ba8:	4b4c      	ldr	r3, [pc, #304]	; (8001cdc <_ZL12MX_TIM3_Initv+0x174>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bae:	4b4b      	ldr	r3, [pc, #300]	; (8001cdc <_ZL12MX_TIM3_Initv+0x174>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001bb4:	4b49      	ldr	r3, [pc, #292]	; (8001cdc <_ZL12MX_TIM3_Initv+0x174>)
 8001bb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bbc:	4b47      	ldr	r3, [pc, #284]	; (8001cdc <_ZL12MX_TIM3_Initv+0x174>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bc2:	4b46      	ldr	r3, [pc, #280]	; (8001cdc <_ZL12MX_TIM3_Initv+0x174>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001bc8:	4844      	ldr	r0, [pc, #272]	; (8001cdc <_ZL12MX_TIM3_Initv+0x174>)
 8001bca:	f003 fdff 	bl	80057cc <HAL_TIM_Base_Init>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	bf14      	ite	ne
 8001bd4:	2301      	movne	r3, #1
 8001bd6:	2300      	moveq	r3, #0
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <_ZL12MX_TIM3_Initv+0x7a>
  {
    Error_Handler();
 8001bde:	f000 fb8d 	bl	80022fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001be2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001be6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001be8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bec:	4619      	mov	r1, r3
 8001bee:	483b      	ldr	r0, [pc, #236]	; (8001cdc <_ZL12MX_TIM3_Initv+0x174>)
 8001bf0:	f004 fb2e 	bl	8006250 <HAL_TIM_ConfigClockSource>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	bf14      	ite	ne
 8001bfa:	2301      	movne	r3, #1
 8001bfc:	2300      	moveq	r3, #0
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <_ZL12MX_TIM3_Initv+0xa0>
  {
    Error_Handler();
 8001c04:	f000 fb7a 	bl	80022fc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001c08:	4834      	ldr	r0, [pc, #208]	; (8001cdc <_ZL12MX_TIM3_Initv+0x174>)
 8001c0a:	f003 ffbf 	bl	8005b8c <HAL_TIM_IC_Init>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	bf14      	ite	ne
 8001c14:	2301      	movne	r3, #1
 8001c16:	2300      	moveq	r3, #0
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <_ZL12MX_TIM3_Initv+0xba>
  {
    Error_Handler();
 8001c1e:	f000 fb6d 	bl	80022fc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8001c22:	2305      	movs	r3, #5
 8001c24:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 8001c26:	2370      	movs	r3, #112	; 0x70
 8001c28:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001c32:	2300      	movs	r3, #0
 8001c34:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001c36:	f107 031c 	add.w	r3, r7, #28
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4827      	ldr	r0, [pc, #156]	; (8001cdc <_ZL12MX_TIM3_Initv+0x174>)
 8001c3e:	f004 fbce 	bl	80063de <HAL_TIM_SlaveConfigSynchro>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	bf14      	ite	ne
 8001c48:	2301      	movne	r3, #1
 8001c4a:	2300      	moveq	r3, #0
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <_ZL12MX_TIM3_Initv+0xee>
  {
    Error_Handler();
 8001c52:	f000 fb53 	bl	80022fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c56:	2300      	movs	r3, #0
 8001c58:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c5e:	f107 0314 	add.w	r3, r7, #20
 8001c62:	4619      	mov	r1, r3
 8001c64:	481d      	ldr	r0, [pc, #116]	; (8001cdc <_ZL12MX_TIM3_Initv+0x174>)
 8001c66:	f005 f9c7 	bl	8006ff8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	bf14      	ite	ne
 8001c70:	2301      	movne	r3, #1
 8001c72:	2300      	moveq	r3, #0
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <_ZL12MX_TIM3_Initv+0x116>
  {
    Error_Handler();
 8001c7a:	f000 fb3f 	bl	80022fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001c82:	2301      	movs	r3, #1
 8001c84:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001c86:	2300      	movs	r3, #0
 8001c88:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001c8e:	1d3b      	adds	r3, r7, #4
 8001c90:	2204      	movs	r2, #4
 8001c92:	4619      	mov	r1, r3
 8001c94:	4811      	ldr	r0, [pc, #68]	; (8001cdc <_ZL12MX_TIM3_Initv+0x174>)
 8001c96:	f004 f97d 	bl	8005f94 <HAL_TIM_IC_ConfigChannel>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	bf14      	ite	ne
 8001ca0:	2301      	movne	r3, #1
 8001ca2:	2300      	moveq	r3, #0
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <_ZL12MX_TIM3_Initv+0x146>
  {
    Error_Handler();
 8001caa:	f000 fb27 	bl	80022fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001cb2:	1d3b      	adds	r3, r7, #4
 8001cb4:	2208      	movs	r2, #8
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4808      	ldr	r0, [pc, #32]	; (8001cdc <_ZL12MX_TIM3_Initv+0x174>)
 8001cba:	f004 f96b 	bl	8005f94 <HAL_TIM_IC_ConfigChannel>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	bf14      	ite	ne
 8001cc4:	2301      	movne	r3, #1
 8001cc6:	2300      	moveq	r3, #0
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <_ZL12MX_TIM3_Initv+0x16a>
  {
    Error_Handler();
 8001cce:	f000 fb15 	bl	80022fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001cd2:	bf00      	nop
 8001cd4:	3740      	adds	r7, #64	; 0x40
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	200001a4 	.word	0x200001a4
 8001ce0:	40000400 	.word	0x40000400

08001ce4 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b090      	sub	sp, #64	; 0x40
 8001ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001cee:	2200      	movs	r2, #0
 8001cf0:	601a      	str	r2, [r3, #0]
 8001cf2:	605a      	str	r2, [r3, #4]
 8001cf4:	609a      	str	r2, [r3, #8]
 8001cf6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001cf8:	f107 031c 	add.w	r3, r7, #28
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	60da      	str	r2, [r3, #12]
 8001d06:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d08:	f107 0314 	add.w	r3, r7, #20
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001d12:	1d3b      	adds	r3, r7, #4
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d1e:	4b4e      	ldr	r3, [pc, #312]	; (8001e58 <_ZL12MX_TIM4_Initv+0x174>)
 8001d20:	4a4e      	ldr	r2, [pc, #312]	; (8001e5c <_ZL12MX_TIM4_Initv+0x178>)
 8001d22:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001d24:	4b4c      	ldr	r3, [pc, #304]	; (8001e58 <_ZL12MX_TIM4_Initv+0x174>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d2a:	4b4b      	ldr	r3, [pc, #300]	; (8001e58 <_ZL12MX_TIM4_Initv+0x174>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001d30:	4b49      	ldr	r3, [pc, #292]	; (8001e58 <_ZL12MX_TIM4_Initv+0x174>)
 8001d32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d36:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d38:	4b47      	ldr	r3, [pc, #284]	; (8001e58 <_ZL12MX_TIM4_Initv+0x174>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d3e:	4b46      	ldr	r3, [pc, #280]	; (8001e58 <_ZL12MX_TIM4_Initv+0x174>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001d44:	4844      	ldr	r0, [pc, #272]	; (8001e58 <_ZL12MX_TIM4_Initv+0x174>)
 8001d46:	f003 fd41 	bl	80057cc <HAL_TIM_Base_Init>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	bf14      	ite	ne
 8001d50:	2301      	movne	r3, #1
 8001d52:	2300      	moveq	r3, #0
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <_ZL12MX_TIM4_Initv+0x7a>
  {
    Error_Handler();
 8001d5a:	f000 facf 	bl	80022fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d62:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001d64:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d68:	4619      	mov	r1, r3
 8001d6a:	483b      	ldr	r0, [pc, #236]	; (8001e58 <_ZL12MX_TIM4_Initv+0x174>)
 8001d6c:	f004 fa70 	bl	8006250 <HAL_TIM_ConfigClockSource>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	bf14      	ite	ne
 8001d76:	2301      	movne	r3, #1
 8001d78:	2300      	moveq	r3, #0
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <_ZL12MX_TIM4_Initv+0xa0>
  {
    Error_Handler();
 8001d80:	f000 fabc 	bl	80022fc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001d84:	4834      	ldr	r0, [pc, #208]	; (8001e58 <_ZL12MX_TIM4_Initv+0x174>)
 8001d86:	f003 ff01 	bl	8005b8c <HAL_TIM_IC_Init>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	bf14      	ite	ne
 8001d90:	2301      	movne	r3, #1
 8001d92:	2300      	moveq	r3, #0
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <_ZL12MX_TIM4_Initv+0xba>
  {
    Error_Handler();
 8001d9a:	f000 faaf 	bl	80022fc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8001d9e:	2305      	movs	r3, #5
 8001da0:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 8001da2:	2370      	movs	r3, #112	; 0x70
 8001da4:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 8001da6:	2300      	movs	r3, #0
 8001da8:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 8001daa:	2300      	movs	r3, #0
 8001dac:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001dae:	2300      	movs	r3, #0
 8001db0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8001db2:	f107 031c 	add.w	r3, r7, #28
 8001db6:	4619      	mov	r1, r3
 8001db8:	4827      	ldr	r0, [pc, #156]	; (8001e58 <_ZL12MX_TIM4_Initv+0x174>)
 8001dba:	f004 fb10 	bl	80063de <HAL_TIM_SlaveConfigSynchro>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	bf14      	ite	ne
 8001dc4:	2301      	movne	r3, #1
 8001dc6:	2300      	moveq	r3, #0
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <_ZL12MX_TIM4_Initv+0xee>
  {
    Error_Handler();
 8001dce:	f000 fa95 	bl	80022fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001dda:	f107 0314 	add.w	r3, r7, #20
 8001dde:	4619      	mov	r1, r3
 8001de0:	481d      	ldr	r0, [pc, #116]	; (8001e58 <_ZL12MX_TIM4_Initv+0x174>)
 8001de2:	f005 f909 	bl	8006ff8 <HAL_TIMEx_MasterConfigSynchronization>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	bf14      	ite	ne
 8001dec:	2301      	movne	r3, #1
 8001dee:	2300      	moveq	r3, #0
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <_ZL12MX_TIM4_Initv+0x116>
  {
    Error_Handler();
 8001df6:	f000 fa81 	bl	80022fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001e02:	2300      	movs	r3, #0
 8001e04:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001e06:	2300      	movs	r3, #0
 8001e08:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001e0a:	1d3b      	adds	r3, r7, #4
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4811      	ldr	r0, [pc, #68]	; (8001e58 <_ZL12MX_TIM4_Initv+0x174>)
 8001e12:	f004 f8bf 	bl	8005f94 <HAL_TIM_IC_ConfigChannel>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	bf14      	ite	ne
 8001e1c:	2301      	movne	r3, #1
 8001e1e:	2300      	moveq	r3, #0
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <_ZL12MX_TIM4_Initv+0x146>
  {
    Error_Handler();
 8001e26:	f000 fa69 	bl	80022fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001e2e:	1d3b      	adds	r3, r7, #4
 8001e30:	2204      	movs	r2, #4
 8001e32:	4619      	mov	r1, r3
 8001e34:	4808      	ldr	r0, [pc, #32]	; (8001e58 <_ZL12MX_TIM4_Initv+0x174>)
 8001e36:	f004 f8ad 	bl	8005f94 <HAL_TIM_IC_ConfigChannel>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	bf14      	ite	ne
 8001e40:	2301      	movne	r3, #1
 8001e42:	2300      	moveq	r3, #0
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <_ZL12MX_TIM4_Initv+0x16a>
  {
    Error_Handler();
 8001e4a:	f000 fa57 	bl	80022fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001e4e:	bf00      	nop
 8001e50:	3740      	adds	r7, #64	; 0x40
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	200001ec 	.word	0x200001ec
 8001e5c:	40000800 	.word	0x40000800

08001e60 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b088      	sub	sp, #32
 8001e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001e66:	f107 030c 	add.w	r3, r7, #12
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	605a      	str	r2, [r3, #4]
 8001e70:	609a      	str	r2, [r3, #8]
 8001e72:	60da      	str	r2, [r3, #12]
 8001e74:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e76:	1d3b      	adds	r3, r7, #4
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001e7e:	4b2d      	ldr	r3, [pc, #180]	; (8001f34 <_ZL12MX_TIM5_Initv+0xd4>)
 8001e80:	4a2d      	ldr	r2, [pc, #180]	; (8001f38 <_ZL12MX_TIM5_Initv+0xd8>)
 8001e82:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001e84:	4b2b      	ldr	r3, [pc, #172]	; (8001f34 <_ZL12MX_TIM5_Initv+0xd4>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e8a:	4b2a      	ldr	r3, [pc, #168]	; (8001f34 <_ZL12MX_TIM5_Initv+0xd4>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001e90:	4b28      	ldr	r3, [pc, #160]	; (8001f34 <_ZL12MX_TIM5_Initv+0xd4>)
 8001e92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e96:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e98:	4b26      	ldr	r3, [pc, #152]	; (8001f34 <_ZL12MX_TIM5_Initv+0xd4>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e9e:	4b25      	ldr	r3, [pc, #148]	; (8001f34 <_ZL12MX_TIM5_Initv+0xd4>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001ea4:	4823      	ldr	r0, [pc, #140]	; (8001f34 <_ZL12MX_TIM5_Initv+0xd4>)
 8001ea6:	f003 fc91 	bl	80057cc <HAL_TIM_Base_Init>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	bf14      	ite	ne
 8001eb0:	2301      	movne	r3, #1
 8001eb2:	2300      	moveq	r3, #0
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <_ZL12MX_TIM5_Initv+0x5e>
  {
    Error_Handler();
 8001eba:	f000 fa1f 	bl	80022fc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8001ebe:	2307      	movs	r3, #7
 8001ec0:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001ec2:	2350      	movs	r3, #80	; 0x50
 8001ec4:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8001ece:	f107 030c 	add.w	r3, r7, #12
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4817      	ldr	r0, [pc, #92]	; (8001f34 <_ZL12MX_TIM5_Initv+0xd4>)
 8001ed6:	f004 fa82 	bl	80063de <HAL_TIM_SlaveConfigSynchro>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	bf14      	ite	ne
 8001ee0:	2301      	movne	r3, #1
 8001ee2:	2300      	moveq	r3, #0
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <_ZL12MX_TIM5_Initv+0x8e>
  {
    Error_Handler();
 8001eea:	f000 fa07 	bl	80022fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001ef6:	1d3b      	adds	r3, r7, #4
 8001ef8:	4619      	mov	r1, r3
 8001efa:	480e      	ldr	r0, [pc, #56]	; (8001f34 <_ZL12MX_TIM5_Initv+0xd4>)
 8001efc:	f005 f87c 	bl	8006ff8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	bf14      	ite	ne
 8001f06:	2301      	movne	r3, #1
 8001f08:	2300      	moveq	r3, #0
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <_ZL12MX_TIM5_Initv+0xb4>
  {
    Error_Handler();
 8001f10:	f000 f9f4 	bl	80022fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  htim5.Instance->CNT=Timer_Encoder_init_value; // установка начального значения таймера, чтобы избежать underflow
 8001f14:	4b07      	ldr	r3, [pc, #28]	; (8001f34 <_ZL12MX_TIM5_Initv+0xd4>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a08      	ldr	r2, [pc, #32]	; (8001f3c <_ZL12MX_TIM5_Initv+0xdc>)
 8001f1a:	625a      	str	r2, [r3, #36]	; 0x24
  htim5.Instance->CR1|=  1UL << 0; //enable timer
 8001f1c:	4b05      	ldr	r3, [pc, #20]	; (8001f34 <_ZL12MX_TIM5_Initv+0xd4>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	4b04      	ldr	r3, [pc, #16]	; (8001f34 <_ZL12MX_TIM5_Initv+0xd4>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f042 0201 	orr.w	r2, r2, #1
 8001f2a:	601a      	str	r2, [r3, #0]

  /* USER CODE END TIM5_Init 2 */

}
 8001f2c:	bf00      	nop
 8001f2e:	3720      	adds	r7, #32
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	20000234 	.word	0x20000234
 8001f38:	40000c00 	.word	0x40000c00
 8001f3c:	00013880 	.word	0x00013880

08001f40 <_ZL12MX_TIM9_Initv>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b08c      	sub	sp, #48	; 0x30
 8001f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f46:	f107 0320 	add.w	r3, r7, #32
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	601a      	str	r2, [r3, #0]
 8001f4e:	605a      	str	r2, [r3, #4]
 8001f50:	609a      	str	r2, [r3, #8]
 8001f52:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f54:	1d3b      	adds	r3, r7, #4
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]
 8001f5a:	605a      	str	r2, [r3, #4]
 8001f5c:	609a      	str	r2, [r3, #8]
 8001f5e:	60da      	str	r2, [r3, #12]
 8001f60:	611a      	str	r2, [r3, #16]
 8001f62:	615a      	str	r2, [r3, #20]
 8001f64:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001f66:	4b2f      	ldr	r3, [pc, #188]	; (8002024 <_ZL12MX_TIM9_Initv+0xe4>)
 8001f68:	4a2f      	ldr	r2, [pc, #188]	; (8002028 <_ZL12MX_TIM9_Initv+0xe8>)
 8001f6a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8001f6c:	4b2d      	ldr	r3, [pc, #180]	; (8002024 <_ZL12MX_TIM9_Initv+0xe4>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f72:	4b2c      	ldr	r3, [pc, #176]	; (8002024 <_ZL12MX_TIM9_Initv+0xe4>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8001f78:	4b2a      	ldr	r3, [pc, #168]	; (8002024 <_ZL12MX_TIM9_Initv+0xe4>)
 8001f7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f7e:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f80:	4b28      	ldr	r3, [pc, #160]	; (8002024 <_ZL12MX_TIM9_Initv+0xe4>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f86:	4b27      	ldr	r3, [pc, #156]	; (8002024 <_ZL12MX_TIM9_Initv+0xe4>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001f8c:	4825      	ldr	r0, [pc, #148]	; (8002024 <_ZL12MX_TIM9_Initv+0xe4>)
 8001f8e:	f003 fc1d 	bl	80057cc <HAL_TIM_Base_Init>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	bf14      	ite	ne
 8001f98:	2301      	movne	r3, #1
 8001f9a:	2300      	moveq	r3, #0
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <_ZL12MX_TIM9_Initv+0x66>
  {
    Error_Handler();
 8001fa2:	f000 f9ab 	bl	80022fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001faa:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001fac:	f107 0320 	add.w	r3, r7, #32
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	481c      	ldr	r0, [pc, #112]	; (8002024 <_ZL12MX_TIM9_Initv+0xe4>)
 8001fb4:	f004 f94c 	bl	8006250 <HAL_TIM_ConfigClockSource>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	bf14      	ite	ne
 8001fbe:	2301      	movne	r3, #1
 8001fc0:	2300      	moveq	r3, #0
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <_ZL12MX_TIM9_Initv+0x8c>
  {
    Error_Handler();
 8001fc8:	f000 f998 	bl	80022fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001fcc:	4815      	ldr	r0, [pc, #84]	; (8002024 <_ZL12MX_TIM9_Initv+0xe4>)
 8001fce:	f003 fc4c 	bl	800586a <HAL_TIM_PWM_Init>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	bf14      	ite	ne
 8001fd8:	2301      	movne	r3, #1
 8001fda:	2300      	moveq	r3, #0
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <_ZL12MX_TIM9_Initv+0xa6>
  {
    Error_Handler();
 8001fe2:	f000 f98b 	bl	80022fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001fe6:	2370      	movs	r3, #112	; 0x70
 8001fe8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001fea:	2300      	movs	r3, #0
 8001fec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ff6:	1d3b      	adds	r3, r7, #4
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4809      	ldr	r0, [pc, #36]	; (8002024 <_ZL12MX_TIM9_Initv+0xe4>)
 8001ffe:	f004 f865 	bl	80060cc <HAL_TIM_PWM_ConfigChannel>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	bf14      	ite	ne
 8002008:	2301      	movne	r3, #1
 800200a:	2300      	moveq	r3, #0
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <_ZL12MX_TIM9_Initv+0xd6>
  {
    Error_Handler();
 8002012:	f000 f973 	bl	80022fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8002016:	4803      	ldr	r0, [pc, #12]	; (8002024 <_ZL12MX_TIM9_Initv+0xe4>)
 8002018:	f001 faa6 	bl	8003568 <HAL_TIM_MspPostInit>

}
 800201c:	bf00      	nop
 800201e:	3730      	adds	r7, #48	; 0x30
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	2000027c 	.word	0x2000027c
 8002028:	40014000 	.word	0x40014000

0800202c <_ZL13MX_TIM12_Initv>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b08c      	sub	sp, #48	; 0x30
 8002030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002032:	f107 0320 	add.w	r3, r7, #32
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	605a      	str	r2, [r3, #4]
 800203c:	609a      	str	r2, [r3, #8]
 800203e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002040:	1d3b      	adds	r3, r7, #4
 8002042:	2200      	movs	r2, #0
 8002044:	601a      	str	r2, [r3, #0]
 8002046:	605a      	str	r2, [r3, #4]
 8002048:	609a      	str	r2, [r3, #8]
 800204a:	60da      	str	r2, [r3, #12]
 800204c:	611a      	str	r2, [r3, #16]
 800204e:	615a      	str	r2, [r3, #20]
 8002050:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002052:	4b2f      	ldr	r3, [pc, #188]	; (8002110 <_ZL13MX_TIM12_Initv+0xe4>)
 8002054:	4a2f      	ldr	r2, [pc, #188]	; (8002114 <_ZL13MX_TIM12_Initv+0xe8>)
 8002056:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8002058:	4b2d      	ldr	r3, [pc, #180]	; (8002110 <_ZL13MX_TIM12_Initv+0xe4>)
 800205a:	2200      	movs	r2, #0
 800205c:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800205e:	4b2c      	ldr	r3, [pc, #176]	; (8002110 <_ZL13MX_TIM12_Initv+0xe4>)
 8002060:	2200      	movs	r2, #0
 8002062:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8002064:	4b2a      	ldr	r3, [pc, #168]	; (8002110 <_ZL13MX_TIM12_Initv+0xe4>)
 8002066:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800206a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800206c:	4b28      	ldr	r3, [pc, #160]	; (8002110 <_ZL13MX_TIM12_Initv+0xe4>)
 800206e:	2200      	movs	r2, #0
 8002070:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002072:	4b27      	ldr	r3, [pc, #156]	; (8002110 <_ZL13MX_TIM12_Initv+0xe4>)
 8002074:	2200      	movs	r2, #0
 8002076:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8002078:	4825      	ldr	r0, [pc, #148]	; (8002110 <_ZL13MX_TIM12_Initv+0xe4>)
 800207a:	f003 fba7 	bl	80057cc <HAL_TIM_Base_Init>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	bf14      	ite	ne
 8002084:	2301      	movne	r3, #1
 8002086:	2300      	moveq	r3, #0
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <_ZL13MX_TIM12_Initv+0x66>
  {
    Error_Handler();
 800208e:	f000 f935 	bl	80022fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002092:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002096:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8002098:	f107 0320 	add.w	r3, r7, #32
 800209c:	4619      	mov	r1, r3
 800209e:	481c      	ldr	r0, [pc, #112]	; (8002110 <_ZL13MX_TIM12_Initv+0xe4>)
 80020a0:	f004 f8d6 	bl	8006250 <HAL_TIM_ConfigClockSource>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	bf14      	ite	ne
 80020aa:	2301      	movne	r3, #1
 80020ac:	2300      	moveq	r3, #0
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <_ZL13MX_TIM12_Initv+0x8c>
  {
    Error_Handler();
 80020b4:	f000 f922 	bl	80022fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80020b8:	4815      	ldr	r0, [pc, #84]	; (8002110 <_ZL13MX_TIM12_Initv+0xe4>)
 80020ba:	f003 fbd6 	bl	800586a <HAL_TIM_PWM_Init>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	bf14      	ite	ne
 80020c4:	2301      	movne	r3, #1
 80020c6:	2300      	moveq	r3, #0
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <_ZL13MX_TIM12_Initv+0xa6>
  {
    Error_Handler();
 80020ce:	f000 f915 	bl	80022fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80020d2:	2370      	movs	r3, #112	; 0x70
 80020d4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80020d6:	2300      	movs	r3, #0
 80020d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020da:	2300      	movs	r3, #0
 80020dc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020de:	2300      	movs	r3, #0
 80020e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020e2:	1d3b      	adds	r3, r7, #4
 80020e4:	2200      	movs	r2, #0
 80020e6:	4619      	mov	r1, r3
 80020e8:	4809      	ldr	r0, [pc, #36]	; (8002110 <_ZL13MX_TIM12_Initv+0xe4>)
 80020ea:	f003 ffef 	bl	80060cc <HAL_TIM_PWM_ConfigChannel>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	bf14      	ite	ne
 80020f4:	2301      	movne	r3, #1
 80020f6:	2300      	moveq	r3, #0
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <_ZL13MX_TIM12_Initv+0xd6>
  {
    Error_Handler();
 80020fe:	f000 f8fd 	bl	80022fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002102:	4803      	ldr	r0, [pc, #12]	; (8002110 <_ZL13MX_TIM12_Initv+0xe4>)
 8002104:	f001 fa30 	bl	8003568 <HAL_TIM_MspPostInit>

}
 8002108:	bf00      	nop
 800210a:	3730      	adds	r7, #48	; 0x30
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	200002c4 	.word	0x200002c4
 8002114:	40001800 	.word	0x40001800

08002118 <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800211c:	4b13      	ldr	r3, [pc, #76]	; (800216c <_ZL13MX_UART4_Initv+0x54>)
 800211e:	4a14      	ldr	r2, [pc, #80]	; (8002170 <_ZL13MX_UART4_Initv+0x58>)
 8002120:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002122:	4b12      	ldr	r3, [pc, #72]	; (800216c <_ZL13MX_UART4_Initv+0x54>)
 8002124:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002128:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800212a:	4b10      	ldr	r3, [pc, #64]	; (800216c <_ZL13MX_UART4_Initv+0x54>)
 800212c:	2200      	movs	r2, #0
 800212e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002130:	4b0e      	ldr	r3, [pc, #56]	; (800216c <_ZL13MX_UART4_Initv+0x54>)
 8002132:	2200      	movs	r2, #0
 8002134:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002136:	4b0d      	ldr	r3, [pc, #52]	; (800216c <_ZL13MX_UART4_Initv+0x54>)
 8002138:	2200      	movs	r2, #0
 800213a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800213c:	4b0b      	ldr	r3, [pc, #44]	; (800216c <_ZL13MX_UART4_Initv+0x54>)
 800213e:	220c      	movs	r2, #12
 8002140:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002142:	4b0a      	ldr	r3, [pc, #40]	; (800216c <_ZL13MX_UART4_Initv+0x54>)
 8002144:	2200      	movs	r2, #0
 8002146:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002148:	4b08      	ldr	r3, [pc, #32]	; (800216c <_ZL13MX_UART4_Initv+0x54>)
 800214a:	2200      	movs	r2, #0
 800214c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800214e:	4807      	ldr	r0, [pc, #28]	; (800216c <_ZL13MX_UART4_Initv+0x54>)
 8002150:	f004 ffce 	bl	80070f0 <HAL_UART_Init>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	bf14      	ite	ne
 800215a:	2301      	movne	r3, #1
 800215c:	2300      	moveq	r3, #0
 800215e:	b2db      	uxtb	r3, r3
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <_ZL13MX_UART4_Initv+0x50>
  {
    Error_Handler();
 8002164:	f000 f8ca 	bl	80022fc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002168:	bf00      	nop
 800216a:	bd80      	pop	{r7, pc}
 800216c:	2000048c 	.word	0x2000048c
 8002170:	40004c00 	.word	0x40004c00

08002174 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800217a:	2300      	movs	r3, #0
 800217c:	607b      	str	r3, [r7, #4]
 800217e:	4b20      	ldr	r3, [pc, #128]	; (8002200 <_ZL11MX_DMA_Initv+0x8c>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	4a1f      	ldr	r2, [pc, #124]	; (8002200 <_ZL11MX_DMA_Initv+0x8c>)
 8002184:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002188:	6313      	str	r3, [r2, #48]	; 0x30
 800218a:	4b1d      	ldr	r3, [pc, #116]	; (8002200 <_ZL11MX_DMA_Initv+0x8c>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002192:	607b      	str	r3, [r7, #4]
 8002194:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002196:	2200      	movs	r2, #0
 8002198:	2100      	movs	r1, #0
 800219a:	200b      	movs	r0, #11
 800219c:	f001 fd6f 	bl	8003c7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80021a0:	200b      	movs	r0, #11
 80021a2:	f001 fd88 	bl	8003cb6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80021a6:	2200      	movs	r2, #0
 80021a8:	2100      	movs	r1, #0
 80021aa:	200d      	movs	r0, #13
 80021ac:	f001 fd67 	bl	8003c7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80021b0:	200d      	movs	r0, #13
 80021b2:	f001 fd80 	bl	8003cb6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80021b6:	2200      	movs	r2, #0
 80021b8:	2100      	movs	r1, #0
 80021ba:	200e      	movs	r0, #14
 80021bc:	f001 fd5f 	bl	8003c7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80021c0:	200e      	movs	r0, #14
 80021c2:	f001 fd78 	bl	8003cb6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80021c6:	2200      	movs	r2, #0
 80021c8:	2100      	movs	r1, #0
 80021ca:	200f      	movs	r0, #15
 80021cc:	f001 fd57 	bl	8003c7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80021d0:	200f      	movs	r0, #15
 80021d2:	f001 fd70 	bl	8003cb6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80021d6:	2200      	movs	r2, #0
 80021d8:	2100      	movs	r1, #0
 80021da:	2010      	movs	r0, #16
 80021dc:	f001 fd4f 	bl	8003c7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80021e0:	2010      	movs	r0, #16
 80021e2:	f001 fd68 	bl	8003cb6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80021e6:	2200      	movs	r2, #0
 80021e8:	2100      	movs	r1, #0
 80021ea:	202f      	movs	r0, #47	; 0x2f
 80021ec:	f001 fd47 	bl	8003c7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80021f0:	202f      	movs	r0, #47	; 0x2f
 80021f2:	f001 fd60 	bl	8003cb6 <HAL_NVIC_EnableIRQ>

}
 80021f6:	bf00      	nop
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	40023800 	.word	0x40023800

08002204 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b08c      	sub	sp, #48	; 0x30
 8002208:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800220a:	f107 031c 	add.w	r3, r7, #28
 800220e:	2200      	movs	r2, #0
 8002210:	601a      	str	r2, [r3, #0]
 8002212:	605a      	str	r2, [r3, #4]
 8002214:	609a      	str	r2, [r3, #8]
 8002216:	60da      	str	r2, [r3, #12]
 8002218:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800221a:	2300      	movs	r3, #0
 800221c:	61bb      	str	r3, [r7, #24]
 800221e:	4b35      	ldr	r3, [pc, #212]	; (80022f4 <_ZL12MX_GPIO_Initv+0xf0>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	4a34      	ldr	r2, [pc, #208]	; (80022f4 <_ZL12MX_GPIO_Initv+0xf0>)
 8002224:	f043 0310 	orr.w	r3, r3, #16
 8002228:	6313      	str	r3, [r2, #48]	; 0x30
 800222a:	4b32      	ldr	r3, [pc, #200]	; (80022f4 <_ZL12MX_GPIO_Initv+0xf0>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222e:	f003 0310 	and.w	r3, r3, #16
 8002232:	61bb      	str	r3, [r7, #24]
 8002234:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	617b      	str	r3, [r7, #20]
 800223a:	4b2e      	ldr	r3, [pc, #184]	; (80022f4 <_ZL12MX_GPIO_Initv+0xf0>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	4a2d      	ldr	r2, [pc, #180]	; (80022f4 <_ZL12MX_GPIO_Initv+0xf0>)
 8002240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002244:	6313      	str	r3, [r2, #48]	; 0x30
 8002246:	4b2b      	ldr	r3, [pc, #172]	; (80022f4 <_ZL12MX_GPIO_Initv+0xf0>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800224e:	617b      	str	r3, [r7, #20]
 8002250:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002252:	2300      	movs	r3, #0
 8002254:	613b      	str	r3, [r7, #16]
 8002256:	4b27      	ldr	r3, [pc, #156]	; (80022f4 <_ZL12MX_GPIO_Initv+0xf0>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	4a26      	ldr	r2, [pc, #152]	; (80022f4 <_ZL12MX_GPIO_Initv+0xf0>)
 800225c:	f043 0301 	orr.w	r3, r3, #1
 8002260:	6313      	str	r3, [r2, #48]	; 0x30
 8002262:	4b24      	ldr	r3, [pc, #144]	; (80022f4 <_ZL12MX_GPIO_Initv+0xf0>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	613b      	str	r3, [r7, #16]
 800226c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800226e:	2300      	movs	r3, #0
 8002270:	60fb      	str	r3, [r7, #12]
 8002272:	4b20      	ldr	r3, [pc, #128]	; (80022f4 <_ZL12MX_GPIO_Initv+0xf0>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002276:	4a1f      	ldr	r2, [pc, #124]	; (80022f4 <_ZL12MX_GPIO_Initv+0xf0>)
 8002278:	f043 0302 	orr.w	r3, r3, #2
 800227c:	6313      	str	r3, [r2, #48]	; 0x30
 800227e:	4b1d      	ldr	r3, [pc, #116]	; (80022f4 <_ZL12MX_GPIO_Initv+0xf0>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800228a:	2300      	movs	r3, #0
 800228c:	60bb      	str	r3, [r7, #8]
 800228e:	4b19      	ldr	r3, [pc, #100]	; (80022f4 <_ZL12MX_GPIO_Initv+0xf0>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	4a18      	ldr	r2, [pc, #96]	; (80022f4 <_ZL12MX_GPIO_Initv+0xf0>)
 8002294:	f043 0308 	orr.w	r3, r3, #8
 8002298:	6313      	str	r3, [r2, #48]	; 0x30
 800229a:	4b16      	ldr	r3, [pc, #88]	; (80022f4 <_ZL12MX_GPIO_Initv+0xf0>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	f003 0308 	and.w	r3, r3, #8
 80022a2:	60bb      	str	r3, [r7, #8]
 80022a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022a6:	2300      	movs	r3, #0
 80022a8:	607b      	str	r3, [r7, #4]
 80022aa:	4b12      	ldr	r3, [pc, #72]	; (80022f4 <_ZL12MX_GPIO_Initv+0xf0>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ae:	4a11      	ldr	r2, [pc, #68]	; (80022f4 <_ZL12MX_GPIO_Initv+0xf0>)
 80022b0:	f043 0304 	orr.w	r3, r3, #4
 80022b4:	6313      	str	r3, [r2, #48]	; 0x30
 80022b6:	4b0f      	ldr	r3, [pc, #60]	; (80022f4 <_ZL12MX_GPIO_Initv+0xf0>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	f003 0304 	and.w	r3, r3, #4
 80022be:	607b      	str	r3, [r7, #4]
 80022c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIR_L_Pin|DIR_R_Pin|ENA_Pin, GPIO_PIN_RESET);
 80022c2:	2200      	movs	r2, #0
 80022c4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80022c8:	480b      	ldr	r0, [pc, #44]	; (80022f8 <_ZL12MX_GPIO_Initv+0xf4>)
 80022ca:	f002 faad 	bl	8004828 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIR_L_Pin DIR_R_Pin ENA_Pin */
  GPIO_InitStruct.Pin = DIR_L_Pin|DIR_R_Pin|ENA_Pin;
 80022ce:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80022d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022d4:	2301      	movs	r3, #1
 80022d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80022d8:	2302      	movs	r3, #2
 80022da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022dc:	2302      	movs	r3, #2
 80022de:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e0:	f107 031c 	add.w	r3, r7, #28
 80022e4:	4619      	mov	r1, r3
 80022e6:	4804      	ldr	r0, [pc, #16]	; (80022f8 <_ZL12MX_GPIO_Initv+0xf4>)
 80022e8:	f002 f902 	bl	80044f0 <HAL_GPIO_Init>

}
 80022ec:	bf00      	nop
 80022ee:	3730      	adds	r7, #48	; 0x30
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40023800 	.word	0x40023800
 80022f8:	40020000 	.word	0x40020000

080022fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002300:	b672      	cpsid	i
}
 8002302:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002304:	e7fe      	b.n	8002304 <Error_Handler+0x8>

08002306 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8002306:	b480      	push	{r7}
 8002308:	b085      	sub	sp, #20
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
 800230e:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8002310:	2300      	movs	r3, #0
 8002312:	60fb      	str	r3, [r7, #12]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2b03      	cmp	r3, #3
 8002318:	d80d      	bhi.n	8002336 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	00db      	lsls	r3, r3, #3
 800231e:	683a      	ldr	r2, [r7, #0]
 8002320:	fa22 f103 	lsr.w	r1, r2, r3
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	4413      	add	r3, r2
 800232a:	b2ca      	uxtb	r2, r1
 800232c:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	3301      	adds	r3, #1
 8002332:	60fb      	str	r3, [r7, #12]
 8002334:	e7ee      	b.n	8002314 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8002336:	bf00      	nop
 8002338:	3714      	adds	r7, #20
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr

08002342 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8002342:	b480      	push	{r7}
 8002344:	b085      	sub	sp, #20
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
 800234a:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002352:	2300      	movs	r3, #0
 8002354:	60fb      	str	r3, [r7, #12]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2b03      	cmp	r3, #3
 800235a:	d811      	bhi.n	8002380 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6839      	ldr	r1, [r7, #0]
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	440a      	add	r2, r1
 8002366:	7812      	ldrb	r2, [r2, #0]
 8002368:	4611      	mov	r1, r2
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	00d2      	lsls	r2, r2, #3
 800236e:	fa01 f202 	lsl.w	r2, r1, r2
 8002372:	431a      	orrs	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	3301      	adds	r3, #1
 800237c:	60fb      	str	r3, [r7, #12]
 800237e:	e7ea      	b.n	8002356 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8002380:	bf00      	nop
 8002382:	3714      	adds	r7, #20
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3304      	adds	r3, #4
 8002398:	4618      	mov	r0, r3
 800239a:	f7fe ff83 	bl	80012a4 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 80023be:	bf00      	nop
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 80023c6:	b480      	push	{r7}
 80023c8:	b085      	sub	sp, #20
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
 80023ce:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80023d0:	2300      	movs	r3, #0
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2b18      	cmp	r3, #24
 80023d8:	dc1e      	bgt.n	8002418 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
    {
      if (publishers[i] == 0) // empty slot
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	4413      	add	r3, r2
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d111      	bne.n	8002410 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
      {
        publishers[i] = &p;
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	4413      	add	r3, r2
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	60da      	str	r2, [r3, #12]
        return true;
 800240c:	2301      	movs	r3, #1
 800240e:	e004      	b.n	800241a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	3301      	adds	r3, #1
 8002414:	60fb      	str	r3, [r7, #12]
 8002416:	e7dd      	b.n	80023d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 8002418:	2300      	movs	r3, #0
  }
 800241a:	4618      	mov	r0, r3
 800241c:	3714      	adds	r7, #20
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr

08002426 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 8002426:	b480      	push	{r7}
 8002428:	b083      	sub	sp, #12
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
    return configured_;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8002434:	4618      	mov	r0, r3
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3304      	adds	r3, #4
 800244c:	4618      	mov	r0, r3
 800244e:	f7ff f817 	bl	8001480 <_ZN13STM32Hardware4timeEv>
 8002452:	6138      	str	r0, [r7, #16]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8002462:	4293      	cmp	r3, r2
 8002464:	d903      	bls.n	800246e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002474:	2b00      	cmp	r3, #0
 8002476:	d009      	beq.n	800248c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	429a      	cmp	r2, r3
 8002482:	d903      	bls.n	800248c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bool tx_stop_requested = false;
 800248c:	2300      	movs	r3, #0
 800248e:	75fb      	strb	r3, [r7, #23]
    bool saw_time_msg = false;
 8002490:	2300      	movs	r3, #0
 8002492:	75bb      	strb	r3, [r7, #22]
      if (spin_timeout_ > 0)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800249a:	2b00      	cmp	r3, #0
 800249c:	d014      	beq.n	80024c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x88>
        if ((hardware_.time() - c_time) > spin_timeout_)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	3304      	adds	r3, #4
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7fe ffec 	bl	8001480 <_ZN13STM32Hardware4timeEv>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad2      	subs	r2, r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80024b4:	429a      	cmp	r2, r3
 80024b6:	bf8c      	ite	hi
 80024b8:	2301      	movhi	r3, #1
 80024ba:	2300      	movls	r3, #0
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d002      	beq.n	80024c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x88>
          return SPIN_TIMEOUT;
 80024c2:	f06f 0301 	mvn.w	r3, #1
 80024c6:	e1a5      	b.n	8002814 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3d4>
      int data = hardware_.read();
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	3304      	adds	r3, #4
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7fe ff05 	bl	80012dc <_ZN13STM32Hardware4readEv>
 80024d2:	60f8      	str	r0, [r7, #12]
      if (data < 0)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	f2c0 8178 	blt.w	80027cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x38c>
      checksum_ += data;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	441a      	add	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80024f2:	2b07      	cmp	r3, #7
 80024f4:	d11e      	bne.n	8002534 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xf4>
        message_in[index_++] = data;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 80024fc:	1c59      	adds	r1, r3, #1
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	b2d1      	uxtb	r1, r2
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	4413      	add	r3, r2
 800250c:	460a      	mov	r2, r1
 800250e:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8002518:	1e5a      	subs	r2, r3, #1
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1b4      	bne.n	8002494 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
          mode_ = MODE_MSG_CHECKSUM;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2208      	movs	r2, #8
 800252e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8002532:	e7af      	b.n	8002494 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
      else if (mode_ == MODE_FIRST_FF)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800253a:	2b00      	cmp	r3, #0
 800253c:	d128      	bne.n	8002590 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x150>
        if (data == 0xff)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2bff      	cmp	r3, #255	; 0xff
 8002542:	d10d      	bne.n	8002560 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x120>
          mode_++;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800254a:	1c5a      	adds	r2, r3, #1
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	f103 0214 	add.w	r2, r3, #20
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 800255e:	e799      	b.n	8002494 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	3304      	adds	r3, #4
 8002564:	4618      	mov	r0, r3
 8002566:	f7fe ff8b 	bl	8001480 <_ZN13STM32Hardware4timeEv>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	f241 3288 	movw	r2, #5000	; 0x1388
 8002574:	4293      	cmp	r3, r2
 8002576:	bf8c      	ite	hi
 8002578:	2301      	movhi	r3, #1
 800257a:	2300      	movls	r3, #0
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	d088      	beq.n	8002494 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
          configured_ = false;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 800258a:	f06f 0301 	mvn.w	r3, #1
 800258e:	e141      	b.n	8002814 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3d4>
      else if (mode_ == MODE_PROTOCOL_VER)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002596:	2b01      	cmp	r3, #1
 8002598:	d118      	bne.n	80025cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x18c>
        if (data == PROTOCOL_VER)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2bfe      	cmp	r3, #254	; 0xfe
 800259e:	d107      	bne.n	80025b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x170>
          mode_++;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80025a6:	1c5a      	adds	r2, r3, #1
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80025ae:	e771      	b.n	8002494 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
          mode_ = MODE_FIRST_FF;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80025be:	2b00      	cmp	r3, #0
 80025c0:	f47f af68 	bne.w	8002494 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
            requestSyncTime();  /* send a msg back showing our protocol version */
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f000 f929 	bl	800281c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 80025ca:	e763      	b.n	8002494 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d113      	bne.n	80025fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1be>
        bytes_ = data;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	68fa      	ldr	r2, [r7, #12]
 80025da:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80025ec:	1c5a      	adds	r2, r3, #1
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80025fc:	e74a      	b.n	8002494 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002604:	2b03      	cmp	r3, #3
 8002606:	d110      	bne.n	800262a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1ea>
        bytes_ += data << 8;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	021b      	lsls	r3, r3, #8
 8002612:	441a      	add	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002620:	1c5a      	adds	r2, r3, #1
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8002628:	e734      	b.n	8002494 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002630:	2b04      	cmp	r3, #4
 8002632:	d116      	bne.n	8002662 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x222>
        if ((checksum_ % 256) == 255)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 800263a:	425a      	negs	r2, r3
 800263c:	b2db      	uxtb	r3, r3
 800263e:	b2d2      	uxtb	r2, r2
 8002640:	bf58      	it	pl
 8002642:	4253      	negpl	r3, r2
 8002644:	2bff      	cmp	r3, #255	; 0xff
 8002646:	d107      	bne.n	8002658 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x218>
          mode_++;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800264e:	1c5a      	adds	r2, r3, #1
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8002656:	e71d      	b.n	8002494 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8002660:	e718      	b.n	8002494 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002668:	2b05      	cmp	r3, #5
 800266a:	d10f      	bne.n	800268c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x24c>
        topic_ = data;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800267a:	1c5a      	adds	r2, r3, #1
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	68fa      	ldr	r2, [r7, #12]
 8002686:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 800268a:	e703      	b.n	8002494 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002692:	2b06      	cmp	r3, #6
 8002694:	d117      	bne.n	80026c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x286>
        topic_ += data << 8;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	021b      	lsls	r3, r3, #8
 80026a0:	441a      	add	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2207      	movs	r2, #7
 80026ac:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f47f aeec 	bne.w	8002494 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
          mode_ = MODE_MSG_CHECKSUM;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2208      	movs	r2, #8
 80026c0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80026c4:	e6e6      	b.n	8002494 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80026cc:	2b08      	cmp	r3, #8
 80026ce:	f47f aee1 	bne.w	8002494 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
        mode_ = MODE_FIRST_FF;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80026e0:	425a      	negs	r2, r3
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	b2d2      	uxtb	r2, r2
 80026e6:	bf58      	it	pl
 80026e8:	4253      	negpl	r3, r2
 80026ea:	2bff      	cmp	r3, #255	; 0xff
 80026ec:	f47f aed2 	bne.w	8002494 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d110      	bne.n	800271c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2dc>
            requestSyncTime();
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 f88e 	bl	800281c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f000 f8a9 	bl	8002858 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	693a      	ldr	r2, [r7, #16]
 800270a:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 8002716:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800271a:	e07b      	b.n	8002814 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3d4>
          else if (topic_ == TopicInfo::ID_TIME)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8002722:	2b0a      	cmp	r3, #10
 8002724:	d109      	bne.n	800273a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2fa>
            saw_time_msg = true;
 8002726:	2301      	movs	r3, #1
 8002728:	75bb      	strb	r3, [r7, #22]
            syncTime(message_in);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8002730:	4619      	mov	r1, r3
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 f970 	bl	8002a18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8002738:	e6ac      	b.n	8002494 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8002740:	2b06      	cmp	r3, #6
 8002742:	d10e      	bne.n	8002762 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x322>
            req_param_resp.deserialize(message_in);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f603 1214 	addw	r2, r3, #2324	; 0x914
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8002750:	4619      	mov	r1, r3
 8002752:	4610      	mov	r0, r2
 8002754:	f7fe fbb3 	bl	8000ebe <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8002760:	e698      	b.n	8002494 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8002768:	2b0b      	cmp	r3, #11
 800276a:	d106      	bne.n	800277a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x33a>
            configured_ = false;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
            tx_stop_requested = true;
 8002774:	2301      	movs	r3, #1
 8002776:	75fb      	strb	r3, [r7, #23]
 8002778:	e68c      	b.n	8002494 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
            if (subscribers[topic_ - 100])
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8002780:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f202 2222 	addw	r2, r2, #546	; 0x222
 800278a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800278e:	2b00      	cmp	r3, #0
 8002790:	f43f ae80 	beq.w	8002494 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
              subscribers[topic_ - 100]->callback(message_in);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800279a:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f202 2222 	addw	r2, r2, #546	; 0x222
 80027a4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80027ae:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f202 2222 	addw	r2, r2, #546	; 0x222
 80027b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	f202 4224 	addw	r2, r2, #1060	; 0x424
 80027c6:	4611      	mov	r1, r2
 80027c8:	4798      	blx	r3
    while (true)
 80027ca:	e663      	b.n	8002494 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
        break;
 80027cc:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00f      	beq.n	80027f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b8>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d906      	bls.n	80027f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b8>
      requestSyncTime();
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 f816 	bl	800281c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return saw_time_msg ? SPIN_TIME_RECV : (tx_stop_requested ? SPIN_TX_STOP_REQUESTED : SPIN_OK);
 80027f8:	7dbb      	ldrb	r3, [r7, #22]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d002      	beq.n	8002804 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3c4>
 80027fe:	f06f 0303 	mvn.w	r3, #3
 8002802:	e006      	b.n	8002812 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3d2>
 8002804:	7dfb      	ldrb	r3, [r7, #23]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d002      	beq.n	8002810 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3d0>
 800280a:	f06f 0302 	mvn.w	r3, #2
 800280e:	e000      	b.n	8002812 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3d2>
 8002810:	2300      	movs	r3, #0
 8002812:	bf00      	nop
  }
 8002814:	4618      	mov	r0, r3
 8002816:	3718      	adds	r7, #24
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8002824:	f107 030c 	add.w	r3, r7, #12
 8002828:	4618      	mov	r0, r3
 800282a:	f7fd fea5 	bl	8000578 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f107 020c 	add.w	r2, r7, #12
 8002838:	210a      	movs	r1, #10
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	4798      	blx	r3
    rt_time = hardware_.time();
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	3304      	adds	r3, #4
 8002842:	4618      	mov	r0, r3
 8002844:	f7fe fe1c 	bl	8001480 <_ZN13STM32Hardware4timeEv>
 8002848:	4602      	mov	r2, r0
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8002850:	bf00      	nop
 8002852:	3718      	adds	r7, #24
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8002858:	b590      	push	{r4, r7, lr}
 800285a:	b08b      	sub	sp, #44	; 0x2c
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8002860:	f107 030c 	add.w	r3, r7, #12
 8002864:	4618      	mov	r0, r3
 8002866:	f7fd ff77 	bl	8000758 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800286a:	2300      	movs	r3, #0
 800286c:	627b      	str	r3, [r7, #36]	; 0x24
 800286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002870:	2b18      	cmp	r3, #24
 8002872:	dc63      	bgt.n	800293c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002878:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	4413      	add	r3, r2
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d056      	beq.n	8002934 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	4413      	add	r3, r2
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	b29b      	uxth	r3, r3
 8002898:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	4413      	add	r3, r2
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	4413      	add	r3, r2
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	6859      	ldr	r1, [r3, #4]
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	4413      	add	r3, r2
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	3308      	adds	r3, #8
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4608      	mov	r0, r1
 80028d4:	4798      	blx	r3
 80028d6:	4603      	mov	r3, r0
 80028d8:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028de:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	4413      	add	r3, r2
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	6859      	ldr	r1, [r3, #4]
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ee:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	4413      	add	r3, r2
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	330c      	adds	r3, #12
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4608      	mov	r0, r1
 8002902:	4798      	blx	r3
 8002904:	4603      	mov	r3, r0
 8002906:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8002908:	f44f 7300 	mov.w	r3, #512	; 0x200
 800290c:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681c      	ldr	r4, [r3, #0]
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002918:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	4413      	add	r3, r2
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	4618      	mov	r0, r3
 8002924:	f7fe fc83 	bl	800122e <_ZN3ros9Publisher15getEndpointTypeEv>
 8002928:	4601      	mov	r1, r0
 800292a:	f107 030c 	add.w	r3, r7, #12
 800292e:	461a      	mov	r2, r3
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8002934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002936:	3301      	adds	r3, #1
 8002938:	627b      	str	r3, [r7, #36]	; 0x24
 800293a:	e798      	b.n	800286e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800293c:	2300      	movs	r3, #0
 800293e:	627b      	str	r3, [r7, #36]	; 0x24
 8002940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002942:	2b18      	cmp	r3, #24
 8002944:	dc5f      	bgt.n	8002a06 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800294a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800294e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d053      	beq.n	80029fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800295a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800295e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	b29b      	uxth	r3, r3
 8002966:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800296c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800297c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002980:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002988:	f202 2222 	addw	r2, r2, #546	; 0x222
 800298c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	3308      	adds	r3, #8
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4608      	mov	r0, r1
 8002998:	4798      	blx	r3
 800299a:	4603      	mov	r3, r0
 800299c:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029a2:	f202 2222 	addw	r2, r2, #546	; 0x222
 80029a6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ae:	f202 2222 	addw	r2, r2, #546	; 0x222
 80029b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	330c      	adds	r3, #12
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4608      	mov	r0, r1
 80029be:	4798      	blx	r3
 80029c0:	4603      	mov	r3, r0
 80029c2:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 80029c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029c8:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681c      	ldr	r4, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029d4:	f202 2222 	addw	r2, r2, #546	; 0x222
 80029d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029e0:	f202 2222 	addw	r2, r2, #546	; 0x222
 80029e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	3304      	adds	r3, #4
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4608      	mov	r0, r1
 80029f0:	4798      	blx	r3
 80029f2:	4601      	mov	r1, r0
 80029f4:	f107 030c 	add.w	r3, r7, #12
 80029f8:	461a      	mov	r2, r3
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80029fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a00:	3301      	adds	r3, #1
 8002a02:	627b      	str	r3, [r7, #36]	; 0x24
 8002a04:	e79c      	b.n	8002940 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8002a0e:	bf00      	nop
 8002a10:	372c      	adds	r7, #44	; 0x2c
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd90      	pop	{r4, r7, pc}
	...

08002a18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b086      	sub	sp, #24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8002a22:	f107 0308 	add.w	r3, r7, #8
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7fd fda6 	bl	8000578 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	3304      	adds	r3, #4
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7fe fd25 	bl	8001480 <_ZN13STM32Hardware4timeEv>
 8002a36:	4602      	mov	r2, r0
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8002a42:	f107 0308 	add.w	r3, r7, #8
 8002a46:	6839      	ldr	r1, [r7, #0]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7fd fe05 	bl	8000658 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	4915      	ldr	r1, [pc, #84]	; (8002aa8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8002a54:	fba1 1303 	umull	r1, r3, r1, r3
 8002a58:	099b      	lsrs	r3, r3, #6
 8002a5a:	4413      	add	r3, r2
 8002a5c:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8002a5e:	6939      	ldr	r1, [r7, #16]
 8002a60:	697a      	ldr	r2, [r7, #20]
 8002a62:	4b11      	ldr	r3, [pc, #68]	; (8002aa8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8002a64:	fba3 0302 	umull	r0, r3, r3, r2
 8002a68:	099b      	lsrs	r3, r3, #6
 8002a6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a6e:	fb00 f303 	mul.w	r3, r0, r3
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	4a0d      	ldr	r2, [pc, #52]	; (8002aac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8002a76:	fb02 f303 	mul.w	r3, r2, r3
 8002a7a:	440b      	add	r3, r1
 8002a7c:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8002a7e:	f107 0308 	add.w	r3, r7, #8
 8002a82:	3304      	adds	r3, #4
 8002a84:	4619      	mov	r1, r3
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 f8a6 	bl	8002bd8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	3304      	adds	r3, #4
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7fe fcf5 	bl	8001480 <_ZN13STM32Hardware4timeEv>
 8002a96:	4602      	mov	r2, r0
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8002a9e:	bf00      	nop
 8002aa0:	3718      	adds	r7, #24
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	10624dd3 	.word	0x10624dd3
 8002aac:	000f4240 	.word	0x000f4240

08002ab0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b088      	sub	sp, #32
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	2b63      	cmp	r3, #99	; 0x63
 8002ac0:	dd09      	ble.n	8002ad6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8002ac8:	f083 0301 	eor.w	r3, r3, #1
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	e079      	b.n	8002bca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68fa      	ldr	r2, [r7, #12]
 8002ade:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8002ae2:	3207      	adds	r2, #7
 8002ae4:	4611      	mov	r1, r2
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	4798      	blx	r3
 8002aea:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	22ff      	movs	r2, #255	; 0xff
 8002af0:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	22fe      	movs	r2, #254	; 0xfe
 8002af8:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	b2da      	uxtb	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	0a1b      	lsrs	r3, r3, #8
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	b2da      	uxtb	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8002b22:	4413      	add	r3, r2
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	43db      	mvns	r3, r3
 8002b28:	b2da      	uxtb	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	b2da      	uxtb	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	b21b      	sxth	r3, r3
 8002b3e:	121b      	asrs	r3, r3, #8
 8002b40:	b21b      	sxth	r3, r3
 8002b42:	b2da      	uxtb	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8002b4e:	2305      	movs	r3, #5
 8002b50:	61bb      	str	r3, [r7, #24]
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	3306      	adds	r3, #6
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	dc0d      	bgt.n	8002b78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	4413      	add	r3, r2
 8002b62:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	461a      	mov	r2, r3
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	3301      	adds	r3, #1
 8002b74:	61bb      	str	r3, [r7, #24]
 8002b76:	e7ec      	b.n	8002b52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	3307      	adds	r3, #7
 8002b7c:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	425a      	negs	r2, r3
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	b2d2      	uxtb	r2, r2
 8002b86:	bf58      	it	pl
 8002b88:	4253      	negpl	r3, r2
 8002b8a:	b2da      	uxtb	r2, r3
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	1c59      	adds	r1, r3, #1
 8002b90:	6179      	str	r1, [r7, #20]
 8002b92:	43d2      	mvns	r2, r2
 8002b94:	b2d1      	uxtb	r1, r2
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	4413      	add	r3, r2
 8002b9a:	460a      	mov	r2, r1
 8002b9c:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ba6:	dc0a      	bgt.n	8002bbe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	1d18      	adds	r0, r3, #4
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8002bb2:	697a      	ldr	r2, [r7, #20]
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	f7fe fc1d 	bl	80013f4 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	e005      	b.n	8002bca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8002bbe:	4905      	ldr	r1, [pc, #20]	; (8002bd4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8002bc0:	68f8      	ldr	r0, [r7, #12]
 8002bc2:	f000 f849 	bl	8002c58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8002bc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3720      	adds	r7, #32
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	080089bc 	.word	0x080089bc

08002bd8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	3304      	adds	r3, #4
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7fe fc4a 	bl	8001480 <_ZN13STM32Hardware4timeEv>
 8002bec:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	4915      	ldr	r1, [pc, #84]	; (8002c4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8002bf6:	fba1 1303 	umull	r1, r3, r1, r3
 8002bfa:	099b      	lsrs	r3, r3, #6
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	1e5a      	subs	r2, r3, #1
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	6859      	ldr	r1, [r3, #4]
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	4b0f      	ldr	r3, [pc, #60]	; (8002c4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8002c0e:	fba3 0302 	umull	r0, r3, r3, r2
 8002c12:	099b      	lsrs	r3, r3, #6
 8002c14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c18:	fb00 f303 	mul.w	r3, r0, r3
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	4a0c      	ldr	r2, [pc, #48]	; (8002c50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 8002c20:	fb02 f303 	mul.w	r3, r2, r3
 8002c24:	1aca      	subs	r2, r1, r3
 8002c26:	4b0b      	ldr	r3, [pc, #44]	; (8002c54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 8002c28:	4413      	add	r3, r2
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	4610      	mov	r0, r2
 8002c40:	f7fd fc4c 	bl	80004dc <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8002c44:	bf00      	nop
 8002c46:	3710      	adds	r7, #16
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	10624dd3 	.word	0x10624dd3
 8002c50:	000f4240 	.word	0x000f4240
 8002c54:	3b9aca00 	.word	0x3b9aca00

08002c58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8002c62:	683a      	ldr	r2, [r7, #0]
 8002c64:	2103      	movs	r1, #3
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 f804 	bl	8002c74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8002c6c:	bf00      	nop
 8002c6e:	3708      	adds	r7, #8
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b088      	sub	sp, #32
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	607a      	str	r2, [r7, #4]
 8002c80:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8002c82:	f107 0314 	add.w	r3, r7, #20
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7fd ff2a 	bl	8000ae0 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8002c8c:	7afb      	ldrb	r3, [r7, #11]
 8002c8e:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f107 0214 	add.w	r2, r7, #20
 8002c9e:	2107      	movs	r1, #7
 8002ca0:	68f8      	ldr	r0, [r7, #12]
 8002ca2:	4798      	blx	r3
  }
 8002ca4:	bf00      	nop
 8002ca6:	3720      	adds	r7, #32
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d110      	bne.n	8002cde <_Z41__static_initialization_and_destruction_0ii+0x32>
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d10b      	bne.n	8002cde <_Z41__static_initialization_and_destruction_0ii+0x32>
ros::NodeHandle nh;
 8002cc6:	4808      	ldr	r0, [pc, #32]	; (8002ce8 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8002cc8:	f7fe fcec 	bl	80016a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::String str_msg;
 8002ccc:	4807      	ldr	r0, [pc, #28]	; (8002cec <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002cce:	f7fe fbe3 	bl	8001498 <_ZN8std_msgs6StringC1Ev>
ros::Publisher chatter("chatter", &str_msg);
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	4a05      	ldr	r2, [pc, #20]	; (8002cec <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002cd6:	4906      	ldr	r1, [pc, #24]	; (8002cf0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8002cd8:	4806      	ldr	r0, [pc, #24]	; (8002cf4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8002cda:	f7fe fa7d 	bl	80011d8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8002cde:	bf00      	nop
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	20000590 	.word	0x20000590
 8002cec:	20000ecc 	.word	0x20000ecc
 8002cf0:	080089f8 	.word	0x080089f8
 8002cf4:	20000ed4 	.word	0x20000ed4

08002cf8 <_GLOBAL__sub_I_hi2c1>:
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002d00:	2001      	movs	r0, #1
 8002d02:	f7ff ffd3 	bl	8002cac <_Z41__static_initialization_and_destruction_0ii>
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <_Z13speed_convertf>:
 *      Author: Valery_Danilov
 */
#include "motors.h"

uint16_t speed_convert(float fval) // float to uint16_t convert
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	ed87 0a01 	vstr	s0, [r7, #4]
    if (fval > MAX_EMotor_Speed || fval < -MAX_EMotor_Speed) return(UINT16_MAX);
 8002d12:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d16:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8002d1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d22:	dc08      	bgt.n	8002d36 <_Z13speed_convertf+0x2e>
 8002d24:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d28:	eeb9 7a08 	vmov.f32	s14, #152	; 0xc0c00000 -6.0
 8002d2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d34:	d502      	bpl.n	8002d3c <_Z13speed_convertf+0x34>
 8002d36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d3a:	e027      	b.n	8002d8c <_Z13speed_convertf+0x84>
    if (fval >= 0 )
 8002d3c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d40:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d48:	db0f      	blt.n	8002d6a <_Z13speed_convertf+0x62>
    {
        return((uint16_t)((fval) / (MAX_EMotor_Speed) * UINT16_MAX));
 8002d4a:	ed97 7a01 	vldr	s14, [r7, #4]
 8002d4e:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8002d52:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d56:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002d98 <_Z13speed_convertf+0x90>
 8002d5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d62:	ee17 3a90 	vmov	r3, s15
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	e010      	b.n	8002d8c <_Z13speed_convertf+0x84>
    }else
    {
        return((uint16_t)((-fval) / (MAX_EMotor_Speed) * UINT16_MAX));
 8002d6a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d6e:	eeb1 7a67 	vneg.f32	s14, s15
 8002d72:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8002d76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d7a:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002d98 <_Z13speed_convertf+0x90>
 8002d7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d86:	ee17 3a90 	vmov	r3, s15
 8002d8a:	b29b      	uxth	r3, r3
    }
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	477fff00 	.word	0x477fff00

08002d9c <_ZN12EncoderMotor13update_paramsEfb>:

void EncoderMotor::update_params(float w, bool ena)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	ed87 0a02 	vstr	s0, [r7, #8]
 8002da8:	460b      	mov	r3, r1
 8002daa:	71fb      	strb	r3, [r7, #7]
	if ( w > 0 && ena)
 8002dac:	edd7 7a02 	vldr	s15, [r7, #8]
 8002db0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002db8:	dd21      	ble.n	8002dfe <_ZN12EncoderMotor13update_paramsEfb+0x62>
 8002dba:	79fb      	ldrb	r3, [r7, #7]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d01e      	beq.n	8002dfe <_ZN12EncoderMotor13update_paramsEfb+0x62>
	{
		ENA = 1;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	715a      	strb	r2, [r3, #5]
		DIR = 0;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	711a      	strb	r2, [r3, #4]
		setted_vel = speed_convert(w);
 8002dcc:	ed97 0a02 	vldr	s0, [r7, #8]
 8002dd0:	f7ff ff9a 	bl	8002d08 <_Z13speed_convertf>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	805a      	strh	r2, [r3, #2]
		//calc c_vel from DMA
		if ( speed_data_register2 > speed_data_register1 ) c_vel = speed_data_register2 - speed_data_register1;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d947      	bls.n	8002e78 <_ZN12EncoderMotor13update_paramsEfb+0xdc>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	801a      	strh	r2, [r3, #0]

		if ( c_vel < 0 ){
 8002dfc:	e03c      	b.n	8002e78 <_ZN12EncoderMotor13update_paramsEfb+0xdc>

		}
	}else if (ena)
 8002dfe:	79fb      	ldrb	r3, [r7, #7]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d01e      	beq.n	8002e42 <_ZN12EncoderMotor13update_paramsEfb+0xa6>
	{
		ENA = 1;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2201      	movs	r2, #1
 8002e08:	715a      	strb	r2, [r3, #5]
		DIR = 1;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	711a      	strb	r2, [r3, #4]
		setted_vel = speed_convert(w);
 8002e10:	ed97 0a02 	vldr	s0, [r7, #8]
 8002e14:	f7ff ff78 	bl	8002d08 <_Z13speed_convertf>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	805a      	strh	r2, [r3, #2]
		//calc c_vel from DMA
		if ( speed_data_register2 > speed_data_register1 ) c_vel = speed_data_register2 - speed_data_register1;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d926      	bls.n	8002e7a <_ZN12EncoderMotor13update_paramsEfb+0xde>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e30:	b29a      	uxth	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	801a      	strh	r2, [r3, #0]
		ENA = 0;
		setted_vel = 0;
		Speed_Timer->Instance->EGR|= 1UL << 0; // reset speed_timer
		Speed_Timer->Instance->SR&= ~(1UL << 0); //reset interrupt flag
	}
}
 8002e40:	e01b      	b.n	8002e7a <_ZN12EncoderMotor13update_paramsEfb+0xde>
		ENA = 0;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	715a      	strb	r2, [r3, #5]
		setted_vel = 0;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	805a      	strh	r2, [r3, #2]
		Speed_Timer->Instance->EGR|= 1UL << 0; // reset speed_timer
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6a1b      	ldr	r3, [r3, #32]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	695a      	ldr	r2, [r3, #20]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f042 0201 	orr.w	r2, r2, #1
 8002e60:	615a      	str	r2, [r3, #20]
		Speed_Timer->Instance->SR&= ~(1UL << 0); //reset interrupt flag
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	691a      	ldr	r2, [r3, #16]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f022 0201 	bic.w	r2, r2, #1
 8002e74:	611a      	str	r2, [r3, #16]
}
 8002e76:	e000      	b.n	8002e7a <_ZN12EncoderMotor13update_paramsEfb+0xde>
		if ( c_vel < 0 ){
 8002e78:	bf00      	nop
}
 8002e7a:	bf00      	nop
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <_ZN12EncoderMotor10set_paramsEv>:
void EncoderMotor::set_params()
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b082      	sub	sp, #8
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
	if (ENA)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	795b      	ldrb	r3, [r3, #5]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d034      	beq.n	8002efc <_ZN12EncoderMotor10set_paramsEv+0x7a>
	{
		if (DIR){
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	791b      	ldrb	r3, [r3, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d008      	beq.n	8002eac <_ZN12EncoderMotor10set_paramsEv+0x2a>
			HAL_GPIO_WritePin(DIR_Port, DIR_Pin, GPIO_PIN_SET);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6898      	ldr	r0, [r3, #8]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	899b      	ldrh	r3, [r3, #12]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	f001 fcbf 	bl	8004828 <HAL_GPIO_WritePin>
 8002eaa:	e007      	b.n	8002ebc <_ZN12EncoderMotor10set_paramsEv+0x3a>
		}else
		{
			HAL_GPIO_WritePin(DIR_Port, DIR_Pin, GPIO_PIN_RESET);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6898      	ldr	r0, [r3, #8]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	899b      	ldrh	r3, [r3, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	f001 fcb6 	bl	8004828 <HAL_GPIO_WritePin>
		}
		//---set PWM----
		sConfig.Pulse = setted_vel;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	885b      	ldrh	r3, [r3, #2]
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_TIM_PWM_ConfigChannel(Pwm_Timer, &sConfig, Pwm_Timer_Chanel1);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	f003 f8f9 	bl	80060cc <HAL_TIM_PWM_ConfigChannel>
		//--------------
		HAL_TIM_PWM_Start(Pwm_Timer, Pwm_Timer_Chanel1);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	4610      	mov	r0, r2
 8002ee6:	f002 fd19 	bl	800591c <HAL_TIM_PWM_Start>
		HAL_GPIO_WritePin(ENA_Port, ENA1_Pin, GPIO_PIN_SET);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6918      	ldr	r0, [r3, #16]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	8a9b      	ldrh	r3, [r3, #20]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	f001 fc97 	bl	8004828 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENA_Port, ENA1_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(DIR_Port, DIR_Pin, GPIO_PIN_RESET);
		HAL_TIM_PWM_Stop(Pwm_Timer, Pwm_Timer_Chanel1);

	}
}
 8002efa:	e017      	b.n	8002f2c <_ZN12EncoderMotor10set_paramsEv+0xaa>
		HAL_GPIO_WritePin(ENA_Port, ENA1_Pin, GPIO_PIN_RESET);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6918      	ldr	r0, [r3, #16]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	8a9b      	ldrh	r3, [r3, #20]
 8002f04:	2200      	movs	r2, #0
 8002f06:	4619      	mov	r1, r3
 8002f08:	f001 fc8e 	bl	8004828 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIR_Port, DIR_Pin, GPIO_PIN_RESET);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6898      	ldr	r0, [r3, #8]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	899b      	ldrh	r3, [r3, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	4619      	mov	r1, r3
 8002f18:	f001 fc86 	bl	8004828 <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Stop(Pwm_Timer, Pwm_Timer_Chanel1);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8002f24:	4619      	mov	r1, r3
 8002f26:	4610      	mov	r0, r2
 8002f28:	f002 fdc0 	bl	8005aac <HAL_TIM_PWM_Stop>
}
 8002f2c:	bf00      	nop
 8002f2e:	3708      	adds	r7, #8
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	607b      	str	r3, [r7, #4]
 8002f3e:	4b10      	ldr	r3, [pc, #64]	; (8002f80 <HAL_MspInit+0x4c>)
 8002f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f42:	4a0f      	ldr	r2, [pc, #60]	; (8002f80 <HAL_MspInit+0x4c>)
 8002f44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f48:	6453      	str	r3, [r2, #68]	; 0x44
 8002f4a:	4b0d      	ldr	r3, [pc, #52]	; (8002f80 <HAL_MspInit+0x4c>)
 8002f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f52:	607b      	str	r3, [r7, #4]
 8002f54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f56:	2300      	movs	r3, #0
 8002f58:	603b      	str	r3, [r7, #0]
 8002f5a:	4b09      	ldr	r3, [pc, #36]	; (8002f80 <HAL_MspInit+0x4c>)
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	4a08      	ldr	r2, [pc, #32]	; (8002f80 <HAL_MspInit+0x4c>)
 8002f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f64:	6413      	str	r3, [r2, #64]	; 0x40
 8002f66:	4b06      	ldr	r3, [pc, #24]	; (8002f80 <HAL_MspInit+0x4c>)
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f6e:	603b      	str	r3, [r7, #0]
 8002f70:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002f72:	2007      	movs	r0, #7
 8002f74:	f000 fe78 	bl	8003c68 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f78:	bf00      	nop
 8002f7a:	3708      	adds	r7, #8
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	40023800 	.word	0x40023800

08002f84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b08c      	sub	sp, #48	; 0x30
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f8c:	f107 031c 	add.w	r3, r7, #28
 8002f90:	2200      	movs	r2, #0
 8002f92:	601a      	str	r2, [r3, #0]
 8002f94:	605a      	str	r2, [r3, #4]
 8002f96:	609a      	str	r2, [r3, #8]
 8002f98:	60da      	str	r2, [r3, #12]
 8002f9a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a32      	ldr	r2, [pc, #200]	; (800306c <HAL_I2C_MspInit+0xe8>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d12c      	bne.n	8003000 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	61bb      	str	r3, [r7, #24]
 8002faa:	4b31      	ldr	r3, [pc, #196]	; (8003070 <HAL_I2C_MspInit+0xec>)
 8002fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fae:	4a30      	ldr	r2, [pc, #192]	; (8003070 <HAL_I2C_MspInit+0xec>)
 8002fb0:	f043 0302 	orr.w	r3, r3, #2
 8002fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fb6:	4b2e      	ldr	r3, [pc, #184]	; (8003070 <HAL_I2C_MspInit+0xec>)
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	61bb      	str	r3, [r7, #24]
 8002fc0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002fc2:	23c0      	movs	r3, #192	; 0xc0
 8002fc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fc6:	2312      	movs	r3, #18
 8002fc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002fd2:	2304      	movs	r3, #4
 8002fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fd6:	f107 031c 	add.w	r3, r7, #28
 8002fda:	4619      	mov	r1, r3
 8002fdc:	4825      	ldr	r0, [pc, #148]	; (8003074 <HAL_I2C_MspInit+0xf0>)
 8002fde:	f001 fa87 	bl	80044f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	617b      	str	r3, [r7, #20]
 8002fe6:	4b22      	ldr	r3, [pc, #136]	; (8003070 <HAL_I2C_MspInit+0xec>)
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	4a21      	ldr	r2, [pc, #132]	; (8003070 <HAL_I2C_MspInit+0xec>)
 8002fec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ff2:	4b1f      	ldr	r3, [pc, #124]	; (8003070 <HAL_I2C_MspInit+0xec>)
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ffa:	617b      	str	r3, [r7, #20]
 8002ffc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002ffe:	e031      	b.n	8003064 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a1c      	ldr	r2, [pc, #112]	; (8003078 <HAL_I2C_MspInit+0xf4>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d12c      	bne.n	8003064 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800300a:	2300      	movs	r3, #0
 800300c:	613b      	str	r3, [r7, #16]
 800300e:	4b18      	ldr	r3, [pc, #96]	; (8003070 <HAL_I2C_MspInit+0xec>)
 8003010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003012:	4a17      	ldr	r2, [pc, #92]	; (8003070 <HAL_I2C_MspInit+0xec>)
 8003014:	f043 0302 	orr.w	r3, r3, #2
 8003018:	6313      	str	r3, [r2, #48]	; 0x30
 800301a:	4b15      	ldr	r3, [pc, #84]	; (8003070 <HAL_I2C_MspInit+0xec>)
 800301c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	613b      	str	r3, [r7, #16]
 8003024:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003026:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800302a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800302c:	2312      	movs	r3, #18
 800302e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003030:	2300      	movs	r3, #0
 8003032:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003034:	2303      	movs	r3, #3
 8003036:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003038:	2304      	movs	r3, #4
 800303a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800303c:	f107 031c 	add.w	r3, r7, #28
 8003040:	4619      	mov	r1, r3
 8003042:	480c      	ldr	r0, [pc, #48]	; (8003074 <HAL_I2C_MspInit+0xf0>)
 8003044:	f001 fa54 	bl	80044f0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003048:	2300      	movs	r3, #0
 800304a:	60fb      	str	r3, [r7, #12]
 800304c:	4b08      	ldr	r3, [pc, #32]	; (8003070 <HAL_I2C_MspInit+0xec>)
 800304e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003050:	4a07      	ldr	r2, [pc, #28]	; (8003070 <HAL_I2C_MspInit+0xec>)
 8003052:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003056:	6413      	str	r3, [r2, #64]	; 0x40
 8003058:	4b05      	ldr	r3, [pc, #20]	; (8003070 <HAL_I2C_MspInit+0xec>)
 800305a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003060:	60fb      	str	r3, [r7, #12]
 8003062:	68fb      	ldr	r3, [r7, #12]
}
 8003064:	bf00      	nop
 8003066:	3730      	adds	r7, #48	; 0x30
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	40005400 	.word	0x40005400
 8003070:	40023800 	.word	0x40023800
 8003074:	40020400 	.word	0x40020400
 8003078:	40005800 	.word	0x40005800

0800307c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b086      	sub	sp, #24
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003084:	f107 0308 	add.w	r3, r7, #8
 8003088:	2200      	movs	r2, #0
 800308a:	601a      	str	r2, [r3, #0]
 800308c:	605a      	str	r2, [r3, #4]
 800308e:	609a      	str	r2, [r3, #8]
 8003090:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a0c      	ldr	r2, [pc, #48]	; (80030c8 <HAL_RTC_MspInit+0x4c>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d111      	bne.n	80030c0 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800309c:	2302      	movs	r3, #2
 800309e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80030a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030a4:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030a6:	f107 0308 	add.w	r3, r7, #8
 80030aa:	4618      	mov	r0, r3
 80030ac:	f002 f9b2 	bl	8005414 <HAL_RCCEx_PeriphCLKConfig>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80030b6:	f7ff f921 	bl	80022fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80030ba:	4b04      	ldr	r3, [pc, #16]	; (80030cc <HAL_RTC_MspInit+0x50>)
 80030bc:	2201      	movs	r2, #1
 80030be:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80030c0:	bf00      	nop
 80030c2:	3718      	adds	r7, #24
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	40002800 	.word	0x40002800
 80030cc:	42470e3c 	.word	0x42470e3c

080030d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b094      	sub	sp, #80	; 0x50
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80030dc:	2200      	movs	r2, #0
 80030de:	601a      	str	r2, [r3, #0]
 80030e0:	605a      	str	r2, [r3, #4]
 80030e2:	609a      	str	r2, [r3, #8]
 80030e4:	60da      	str	r2, [r3, #12]
 80030e6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030f0:	d12c      	bne.n	800314c <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80030f2:	2300      	movs	r3, #0
 80030f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80030f6:	4b7e      	ldr	r3, [pc, #504]	; (80032f0 <HAL_TIM_Base_MspInit+0x220>)
 80030f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fa:	4a7d      	ldr	r2, [pc, #500]	; (80032f0 <HAL_TIM_Base_MspInit+0x220>)
 80030fc:	f043 0301 	orr.w	r3, r3, #1
 8003100:	6413      	str	r3, [r2, #64]	; 0x40
 8003102:	4b7b      	ldr	r3, [pc, #492]	; (80032f0 <HAL_TIM_Base_MspInit+0x220>)
 8003104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	63bb      	str	r3, [r7, #56]	; 0x38
 800310c:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800310e:	2300      	movs	r3, #0
 8003110:	637b      	str	r3, [r7, #52]	; 0x34
 8003112:	4b77      	ldr	r3, [pc, #476]	; (80032f0 <HAL_TIM_Base_MspInit+0x220>)
 8003114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003116:	4a76      	ldr	r2, [pc, #472]	; (80032f0 <HAL_TIM_Base_MspInit+0x220>)
 8003118:	f043 0301 	orr.w	r3, r3, #1
 800311c:	6313      	str	r3, [r2, #48]	; 0x30
 800311e:	4b74      	ldr	r3, [pc, #464]	; (80032f0 <HAL_TIM_Base_MspInit+0x220>)
 8003120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	637b      	str	r3, [r7, #52]	; 0x34
 8003128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800312a:	2320      	movs	r3, #32
 800312c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800312e:	2302      	movs	r3, #2
 8003130:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003132:	2300      	movs	r3, #0
 8003134:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003136:	2300      	movs	r3, #0
 8003138:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800313a:	2301      	movs	r3, #1
 800313c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800313e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003142:	4619      	mov	r1, r3
 8003144:	486b      	ldr	r0, [pc, #428]	; (80032f4 <HAL_TIM_Base_MspInit+0x224>)
 8003146:	f001 f9d3 	bl	80044f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800314a:	e1f0      	b.n	800352e <HAL_TIM_Base_MspInit+0x45e>
  else if(htim_base->Instance==TIM3)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a69      	ldr	r2, [pc, #420]	; (80032f8 <HAL_TIM_Base_MspInit+0x228>)
 8003152:	4293      	cmp	r3, r2
 8003154:	f040 80de 	bne.w	8003314 <HAL_TIM_Base_MspInit+0x244>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003158:	2300      	movs	r3, #0
 800315a:	633b      	str	r3, [r7, #48]	; 0x30
 800315c:	4b64      	ldr	r3, [pc, #400]	; (80032f0 <HAL_TIM_Base_MspInit+0x220>)
 800315e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003160:	4a63      	ldr	r2, [pc, #396]	; (80032f0 <HAL_TIM_Base_MspInit+0x220>)
 8003162:	f043 0302 	orr.w	r3, r3, #2
 8003166:	6413      	str	r3, [r2, #64]	; 0x40
 8003168:	4b61      	ldr	r3, [pc, #388]	; (80032f0 <HAL_TIM_Base_MspInit+0x220>)
 800316a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	633b      	str	r3, [r7, #48]	; 0x30
 8003172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003174:	2300      	movs	r3, #0
 8003176:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003178:	4b5d      	ldr	r3, [pc, #372]	; (80032f0 <HAL_TIM_Base_MspInit+0x220>)
 800317a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317c:	4a5c      	ldr	r2, [pc, #368]	; (80032f0 <HAL_TIM_Base_MspInit+0x220>)
 800317e:	f043 0301 	orr.w	r3, r3, #1
 8003182:	6313      	str	r3, [r2, #48]	; 0x30
 8003184:	4b5a      	ldr	r3, [pc, #360]	; (80032f0 <HAL_TIM_Base_MspInit+0x220>)
 8003186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800318e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003190:	2300      	movs	r3, #0
 8003192:	62bb      	str	r3, [r7, #40]	; 0x28
 8003194:	4b56      	ldr	r3, [pc, #344]	; (80032f0 <HAL_TIM_Base_MspInit+0x220>)
 8003196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003198:	4a55      	ldr	r2, [pc, #340]	; (80032f0 <HAL_TIM_Base_MspInit+0x220>)
 800319a:	f043 0302 	orr.w	r3, r3, #2
 800319e:	6313      	str	r3, [r2, #48]	; 0x30
 80031a0:	4b53      	ldr	r3, [pc, #332]	; (80032f0 <HAL_TIM_Base_MspInit+0x220>)
 80031a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a4:	f003 0302 	and.w	r3, r3, #2
 80031a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80031aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80031ac:	2300      	movs	r3, #0
 80031ae:	627b      	str	r3, [r7, #36]	; 0x24
 80031b0:	4b4f      	ldr	r3, [pc, #316]	; (80032f0 <HAL_TIM_Base_MspInit+0x220>)
 80031b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b4:	4a4e      	ldr	r2, [pc, #312]	; (80032f0 <HAL_TIM_Base_MspInit+0x220>)
 80031b6:	f043 0308 	orr.w	r3, r3, #8
 80031ba:	6313      	str	r3, [r2, #48]	; 0x30
 80031bc:	4b4c      	ldr	r3, [pc, #304]	; (80032f0 <HAL_TIM_Base_MspInit+0x220>)
 80031be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c0:	f003 0308 	and.w	r3, r3, #8
 80031c4:	627b      	str	r3, [r7, #36]	; 0x24
 80031c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80031c8:	2380      	movs	r3, #128	; 0x80
 80031ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031cc:	2302      	movs	r3, #2
 80031ce:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d0:	2300      	movs	r3, #0
 80031d2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031d4:	2300      	movs	r3, #0
 80031d6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80031d8:	2302      	movs	r3, #2
 80031da:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80031e0:	4619      	mov	r1, r3
 80031e2:	4844      	ldr	r0, [pc, #272]	; (80032f4 <HAL_TIM_Base_MspInit+0x224>)
 80031e4:	f001 f984 	bl	80044f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80031e8:	2301      	movs	r3, #1
 80031ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ec:	2302      	movs	r3, #2
 80031ee:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f0:	2300      	movs	r3, #0
 80031f2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031f4:	2300      	movs	r3, #0
 80031f6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80031f8:	2302      	movs	r3, #2
 80031fa:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003200:	4619      	mov	r1, r3
 8003202:	483e      	ldr	r0, [pc, #248]	; (80032fc <HAL_TIM_Base_MspInit+0x22c>)
 8003204:	f001 f974 	bl	80044f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003208:	2304      	movs	r3, #4
 800320a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800320c:	2302      	movs	r3, #2
 800320e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003210:	2300      	movs	r3, #0
 8003212:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003214:	2300      	movs	r3, #0
 8003216:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003218:	2302      	movs	r3, #2
 800321a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800321c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003220:	4619      	mov	r1, r3
 8003222:	4837      	ldr	r0, [pc, #220]	; (8003300 <HAL_TIM_Base_MspInit+0x230>)
 8003224:	f001 f964 	bl	80044f0 <HAL_GPIO_Init>
    hdma_tim3_ch2.Instance = DMA1_Stream5;
 8003228:	4b36      	ldr	r3, [pc, #216]	; (8003304 <HAL_TIM_Base_MspInit+0x234>)
 800322a:	4a37      	ldr	r2, [pc, #220]	; (8003308 <HAL_TIM_Base_MspInit+0x238>)
 800322c:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Channel = DMA_CHANNEL_5;
 800322e:	4b35      	ldr	r3, [pc, #212]	; (8003304 <HAL_TIM_Base_MspInit+0x234>)
 8003230:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8003234:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003236:	4b33      	ldr	r3, [pc, #204]	; (8003304 <HAL_TIM_Base_MspInit+0x234>)
 8003238:	2200      	movs	r2, #0
 800323a:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800323c:	4b31      	ldr	r3, [pc, #196]	; (8003304 <HAL_TIM_Base_MspInit+0x234>)
 800323e:	2200      	movs	r2, #0
 8003240:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8003242:	4b30      	ldr	r3, [pc, #192]	; (8003304 <HAL_TIM_Base_MspInit+0x234>)
 8003244:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003248:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800324a:	4b2e      	ldr	r3, [pc, #184]	; (8003304 <HAL_TIM_Base_MspInit+0x234>)
 800324c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003250:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003252:	4b2c      	ldr	r3, [pc, #176]	; (8003304 <HAL_TIM_Base_MspInit+0x234>)
 8003254:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003258:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 800325a:	4b2a      	ldr	r3, [pc, #168]	; (8003304 <HAL_TIM_Base_MspInit+0x234>)
 800325c:	2200      	movs	r2, #0
 800325e:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 8003260:	4b28      	ldr	r3, [pc, #160]	; (8003304 <HAL_TIM_Base_MspInit+0x234>)
 8003262:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003266:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003268:	4b26      	ldr	r3, [pc, #152]	; (8003304 <HAL_TIM_Base_MspInit+0x234>)
 800326a:	2200      	movs	r2, #0
 800326c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 800326e:	4825      	ldr	r0, [pc, #148]	; (8003304 <HAL_TIM_Base_MspInit+0x234>)
 8003270:	f000 fd3c 	bl	8003cec <HAL_DMA_Init>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <HAL_TIM_Base_MspInit+0x1ae>
      Error_Handler();
 800327a:	f7ff f83f 	bl	80022fc <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a20      	ldr	r2, [pc, #128]	; (8003304 <HAL_TIM_Base_MspInit+0x234>)
 8003282:	629a      	str	r2, [r3, #40]	; 0x28
 8003284:	4a1f      	ldr	r2, [pc, #124]	; (8003304 <HAL_TIM_Base_MspInit+0x234>)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch3.Instance = DMA1_Stream7;
 800328a:	4b20      	ldr	r3, [pc, #128]	; (800330c <HAL_TIM_Base_MspInit+0x23c>)
 800328c:	4a20      	ldr	r2, [pc, #128]	; (8003310 <HAL_TIM_Base_MspInit+0x240>)
 800328e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch3.Init.Channel = DMA_CHANNEL_5;
 8003290:	4b1e      	ldr	r3, [pc, #120]	; (800330c <HAL_TIM_Base_MspInit+0x23c>)
 8003292:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8003296:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003298:	4b1c      	ldr	r3, [pc, #112]	; (800330c <HAL_TIM_Base_MspInit+0x23c>)
 800329a:	2200      	movs	r2, #0
 800329c:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800329e:	4b1b      	ldr	r3, [pc, #108]	; (800330c <HAL_TIM_Base_MspInit+0x23c>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80032a4:	4b19      	ldr	r3, [pc, #100]	; (800330c <HAL_TIM_Base_MspInit+0x23c>)
 80032a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032aa:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80032ac:	4b17      	ldr	r3, [pc, #92]	; (800330c <HAL_TIM_Base_MspInit+0x23c>)
 80032ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80032b2:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80032b4:	4b15      	ldr	r3, [pc, #84]	; (800330c <HAL_TIM_Base_MspInit+0x23c>)
 80032b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80032ba:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch3.Init.Mode = DMA_NORMAL;
 80032bc:	4b13      	ldr	r3, [pc, #76]	; (800330c <HAL_TIM_Base_MspInit+0x23c>)
 80032be:	2200      	movs	r2, #0
 80032c0:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 80032c2:	4b12      	ldr	r3, [pc, #72]	; (800330c <HAL_TIM_Base_MspInit+0x23c>)
 80032c4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80032c8:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80032ca:	4b10      	ldr	r3, [pc, #64]	; (800330c <HAL_TIM_Base_MspInit+0x23c>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch3) != HAL_OK)
 80032d0:	480e      	ldr	r0, [pc, #56]	; (800330c <HAL_TIM_Base_MspInit+0x23c>)
 80032d2:	f000 fd0b 	bl	8003cec <HAL_DMA_Init>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <HAL_TIM_Base_MspInit+0x210>
      Error_Handler();
 80032dc:	f7ff f80e 	bl	80022fc <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim3_ch3);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a0a      	ldr	r2, [pc, #40]	; (800330c <HAL_TIM_Base_MspInit+0x23c>)
 80032e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80032e6:	4a09      	ldr	r2, [pc, #36]	; (800330c <HAL_TIM_Base_MspInit+0x23c>)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6393      	str	r3, [r2, #56]	; 0x38
}
 80032ec:	e11f      	b.n	800352e <HAL_TIM_Base_MspInit+0x45e>
 80032ee:	bf00      	nop
 80032f0:	40023800 	.word	0x40023800
 80032f4:	40020000 	.word	0x40020000
 80032f8:	40000400 	.word	0x40000400
 80032fc:	40020400 	.word	0x40020400
 8003300:	40020c00 	.word	0x40020c00
 8003304:	2000030c 	.word	0x2000030c
 8003308:	40026088 	.word	0x40026088
 800330c:	2000036c 	.word	0x2000036c
 8003310:	400260b8 	.word	0x400260b8
  else if(htim_base->Instance==TIM4)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a87      	ldr	r2, [pc, #540]	; (8003538 <HAL_TIM_Base_MspInit+0x468>)
 800331a:	4293      	cmp	r3, r2
 800331c:	f040 80ae 	bne.w	800347c <HAL_TIM_Base_MspInit+0x3ac>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003320:	2300      	movs	r3, #0
 8003322:	623b      	str	r3, [r7, #32]
 8003324:	4b85      	ldr	r3, [pc, #532]	; (800353c <HAL_TIM_Base_MspInit+0x46c>)
 8003326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003328:	4a84      	ldr	r2, [pc, #528]	; (800353c <HAL_TIM_Base_MspInit+0x46c>)
 800332a:	f043 0304 	orr.w	r3, r3, #4
 800332e:	6413      	str	r3, [r2, #64]	; 0x40
 8003330:	4b82      	ldr	r3, [pc, #520]	; (800353c <HAL_TIM_Base_MspInit+0x46c>)
 8003332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003334:	f003 0304 	and.w	r3, r3, #4
 8003338:	623b      	str	r3, [r7, #32]
 800333a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800333c:	2300      	movs	r3, #0
 800333e:	61fb      	str	r3, [r7, #28]
 8003340:	4b7e      	ldr	r3, [pc, #504]	; (800353c <HAL_TIM_Base_MspInit+0x46c>)
 8003342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003344:	4a7d      	ldr	r2, [pc, #500]	; (800353c <HAL_TIM_Base_MspInit+0x46c>)
 8003346:	f043 0308 	orr.w	r3, r3, #8
 800334a:	6313      	str	r3, [r2, #48]	; 0x30
 800334c:	4b7b      	ldr	r3, [pc, #492]	; (800353c <HAL_TIM_Base_MspInit+0x46c>)
 800334e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003350:	f003 0308 	and.w	r3, r3, #8
 8003354:	61fb      	str	r3, [r7, #28]
 8003356:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003358:	2300      	movs	r3, #0
 800335a:	61bb      	str	r3, [r7, #24]
 800335c:	4b77      	ldr	r3, [pc, #476]	; (800353c <HAL_TIM_Base_MspInit+0x46c>)
 800335e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003360:	4a76      	ldr	r2, [pc, #472]	; (800353c <HAL_TIM_Base_MspInit+0x46c>)
 8003362:	f043 0310 	orr.w	r3, r3, #16
 8003366:	6313      	str	r3, [r2, #48]	; 0x30
 8003368:	4b74      	ldr	r3, [pc, #464]	; (800353c <HAL_TIM_Base_MspInit+0x46c>)
 800336a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336c:	f003 0310 	and.w	r3, r3, #16
 8003370:	61bb      	str	r3, [r7, #24]
 8003372:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003374:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003378:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800337a:	2302      	movs	r3, #2
 800337c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800337e:	2300      	movs	r3, #0
 8003380:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003382:	2300      	movs	r3, #0
 8003384:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003386:	2302      	movs	r3, #2
 8003388:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800338a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800338e:	4619      	mov	r1, r3
 8003390:	486b      	ldr	r0, [pc, #428]	; (8003540 <HAL_TIM_Base_MspInit+0x470>)
 8003392:	f001 f8ad 	bl	80044f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003396:	2301      	movs	r3, #1
 8003398:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800339a:	2302      	movs	r3, #2
 800339c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339e:	2300      	movs	r3, #0
 80033a0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033a2:	2300      	movs	r3, #0
 80033a4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80033a6:	2302      	movs	r3, #2
 80033a8:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80033aa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80033ae:	4619      	mov	r1, r3
 80033b0:	4864      	ldr	r0, [pc, #400]	; (8003544 <HAL_TIM_Base_MspInit+0x474>)
 80033b2:	f001 f89d 	bl	80044f0 <HAL_GPIO_Init>
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 80033b6:	4b64      	ldr	r3, [pc, #400]	; (8003548 <HAL_TIM_Base_MspInit+0x478>)
 80033b8:	4a64      	ldr	r2, [pc, #400]	; (800354c <HAL_TIM_Base_MspInit+0x47c>)
 80033ba:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 80033bc:	4b62      	ldr	r3, [pc, #392]	; (8003548 <HAL_TIM_Base_MspInit+0x478>)
 80033be:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80033c2:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80033c4:	4b60      	ldr	r3, [pc, #384]	; (8003548 <HAL_TIM_Base_MspInit+0x478>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80033ca:	4b5f      	ldr	r3, [pc, #380]	; (8003548 <HAL_TIM_Base_MspInit+0x478>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80033d0:	4b5d      	ldr	r3, [pc, #372]	; (8003548 <HAL_TIM_Base_MspInit+0x478>)
 80033d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033d6:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80033d8:	4b5b      	ldr	r3, [pc, #364]	; (8003548 <HAL_TIM_Base_MspInit+0x478>)
 80033da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033de:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80033e0:	4b59      	ldr	r3, [pc, #356]	; (8003548 <HAL_TIM_Base_MspInit+0x478>)
 80033e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80033e6:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 80033e8:	4b57      	ldr	r3, [pc, #348]	; (8003548 <HAL_TIM_Base_MspInit+0x478>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80033ee:	4b56      	ldr	r3, [pc, #344]	; (8003548 <HAL_TIM_Base_MspInit+0x478>)
 80033f0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80033f4:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80033f6:	4b54      	ldr	r3, [pc, #336]	; (8003548 <HAL_TIM_Base_MspInit+0x478>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 80033fc:	4852      	ldr	r0, [pc, #328]	; (8003548 <HAL_TIM_Base_MspInit+0x478>)
 80033fe:	f000 fc75 	bl	8003cec <HAL_DMA_Init>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d001      	beq.n	800340c <HAL_TIM_Base_MspInit+0x33c>
      Error_Handler();
 8003408:	f7fe ff78 	bl	80022fc <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a4e      	ldr	r2, [pc, #312]	; (8003548 <HAL_TIM_Base_MspInit+0x478>)
 8003410:	625a      	str	r2, [r3, #36]	; 0x24
 8003412:	4a4d      	ldr	r2, [pc, #308]	; (8003548 <HAL_TIM_Base_MspInit+0x478>)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim4_ch2.Instance = DMA1_Stream3;
 8003418:	4b4d      	ldr	r3, [pc, #308]	; (8003550 <HAL_TIM_Base_MspInit+0x480>)
 800341a:	4a4e      	ldr	r2, [pc, #312]	; (8003554 <HAL_TIM_Base_MspInit+0x484>)
 800341c:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch2.Init.Channel = DMA_CHANNEL_2;
 800341e:	4b4c      	ldr	r3, [pc, #304]	; (8003550 <HAL_TIM_Base_MspInit+0x480>)
 8003420:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003424:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003426:	4b4a      	ldr	r3, [pc, #296]	; (8003550 <HAL_TIM_Base_MspInit+0x480>)
 8003428:	2200      	movs	r2, #0
 800342a:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800342c:	4b48      	ldr	r3, [pc, #288]	; (8003550 <HAL_TIM_Base_MspInit+0x480>)
 800342e:	2200      	movs	r2, #0
 8003430:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8003432:	4b47      	ldr	r3, [pc, #284]	; (8003550 <HAL_TIM_Base_MspInit+0x480>)
 8003434:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003438:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800343a:	4b45      	ldr	r3, [pc, #276]	; (8003550 <HAL_TIM_Base_MspInit+0x480>)
 800343c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003440:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003442:	4b43      	ldr	r3, [pc, #268]	; (8003550 <HAL_TIM_Base_MspInit+0x480>)
 8003444:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003448:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch2.Init.Mode = DMA_NORMAL;
 800344a:	4b41      	ldr	r3, [pc, #260]	; (8003550 <HAL_TIM_Base_MspInit+0x480>)
 800344c:	2200      	movs	r2, #0
 800344e:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 8003450:	4b3f      	ldr	r3, [pc, #252]	; (8003550 <HAL_TIM_Base_MspInit+0x480>)
 8003452:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003456:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003458:	4b3d      	ldr	r3, [pc, #244]	; (8003550 <HAL_TIM_Base_MspInit+0x480>)
 800345a:	2200      	movs	r2, #0
 800345c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch2) != HAL_OK)
 800345e:	483c      	ldr	r0, [pc, #240]	; (8003550 <HAL_TIM_Base_MspInit+0x480>)
 8003460:	f000 fc44 	bl	8003cec <HAL_DMA_Init>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <HAL_TIM_Base_MspInit+0x39e>
      Error_Handler();
 800346a:	f7fe ff47 	bl	80022fc <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim4_ch2);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a37      	ldr	r2, [pc, #220]	; (8003550 <HAL_TIM_Base_MspInit+0x480>)
 8003472:	629a      	str	r2, [r3, #40]	; 0x28
 8003474:	4a36      	ldr	r2, [pc, #216]	; (8003550 <HAL_TIM_Base_MspInit+0x480>)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6393      	str	r3, [r2, #56]	; 0x38
}
 800347a:	e058      	b.n	800352e <HAL_TIM_Base_MspInit+0x45e>
  else if(htim_base->Instance==TIM5)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a35      	ldr	r2, [pc, #212]	; (8003558 <HAL_TIM_Base_MspInit+0x488>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d12c      	bne.n	80034e0 <HAL_TIM_Base_MspInit+0x410>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003486:	2300      	movs	r3, #0
 8003488:	617b      	str	r3, [r7, #20]
 800348a:	4b2c      	ldr	r3, [pc, #176]	; (800353c <HAL_TIM_Base_MspInit+0x46c>)
 800348c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348e:	4a2b      	ldr	r2, [pc, #172]	; (800353c <HAL_TIM_Base_MspInit+0x46c>)
 8003490:	f043 0308 	orr.w	r3, r3, #8
 8003494:	6413      	str	r3, [r2, #64]	; 0x40
 8003496:	4b29      	ldr	r3, [pc, #164]	; (800353c <HAL_TIM_Base_MspInit+0x46c>)
 8003498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349a:	f003 0308 	and.w	r3, r3, #8
 800349e:	617b      	str	r3, [r7, #20]
 80034a0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034a2:	2300      	movs	r3, #0
 80034a4:	613b      	str	r3, [r7, #16]
 80034a6:	4b25      	ldr	r3, [pc, #148]	; (800353c <HAL_TIM_Base_MspInit+0x46c>)
 80034a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034aa:	4a24      	ldr	r2, [pc, #144]	; (800353c <HAL_TIM_Base_MspInit+0x46c>)
 80034ac:	f043 0301 	orr.w	r3, r3, #1
 80034b0:	6313      	str	r3, [r2, #48]	; 0x30
 80034b2:	4b22      	ldr	r3, [pc, #136]	; (800353c <HAL_TIM_Base_MspInit+0x46c>)
 80034b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	613b      	str	r3, [r7, #16]
 80034bc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80034be:	2301      	movs	r3, #1
 80034c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c2:	2302      	movs	r3, #2
 80034c4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c6:	2300      	movs	r3, #0
 80034c8:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ca:	2300      	movs	r3, #0
 80034cc:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80034ce:	2302      	movs	r3, #2
 80034d0:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034d2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80034d6:	4619      	mov	r1, r3
 80034d8:	4820      	ldr	r0, [pc, #128]	; (800355c <HAL_TIM_Base_MspInit+0x48c>)
 80034da:	f001 f809 	bl	80044f0 <HAL_GPIO_Init>
}
 80034de:	e026      	b.n	800352e <HAL_TIM_Base_MspInit+0x45e>
  else if(htim_base->Instance==TIM9)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a1e      	ldr	r2, [pc, #120]	; (8003560 <HAL_TIM_Base_MspInit+0x490>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d10e      	bne.n	8003508 <HAL_TIM_Base_MspInit+0x438>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80034ea:	2300      	movs	r3, #0
 80034ec:	60fb      	str	r3, [r7, #12]
 80034ee:	4b13      	ldr	r3, [pc, #76]	; (800353c <HAL_TIM_Base_MspInit+0x46c>)
 80034f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f2:	4a12      	ldr	r2, [pc, #72]	; (800353c <HAL_TIM_Base_MspInit+0x46c>)
 80034f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034f8:	6453      	str	r3, [r2, #68]	; 0x44
 80034fa:	4b10      	ldr	r3, [pc, #64]	; (800353c <HAL_TIM_Base_MspInit+0x46c>)
 80034fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003502:	60fb      	str	r3, [r7, #12]
 8003504:	68fb      	ldr	r3, [r7, #12]
}
 8003506:	e012      	b.n	800352e <HAL_TIM_Base_MspInit+0x45e>
  else if(htim_base->Instance==TIM12)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a15      	ldr	r2, [pc, #84]	; (8003564 <HAL_TIM_Base_MspInit+0x494>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d10d      	bne.n	800352e <HAL_TIM_Base_MspInit+0x45e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003512:	2300      	movs	r3, #0
 8003514:	60bb      	str	r3, [r7, #8]
 8003516:	4b09      	ldr	r3, [pc, #36]	; (800353c <HAL_TIM_Base_MspInit+0x46c>)
 8003518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351a:	4a08      	ldr	r2, [pc, #32]	; (800353c <HAL_TIM_Base_MspInit+0x46c>)
 800351c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003520:	6413      	str	r3, [r2, #64]	; 0x40
 8003522:	4b06      	ldr	r3, [pc, #24]	; (800353c <HAL_TIM_Base_MspInit+0x46c>)
 8003524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800352a:	60bb      	str	r3, [r7, #8]
 800352c:	68bb      	ldr	r3, [r7, #8]
}
 800352e:	bf00      	nop
 8003530:	3750      	adds	r7, #80	; 0x50
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	40000800 	.word	0x40000800
 800353c:	40023800 	.word	0x40023800
 8003540:	40020c00 	.word	0x40020c00
 8003544:	40021000 	.word	0x40021000
 8003548:	200003cc 	.word	0x200003cc
 800354c:	40026010 	.word	0x40026010
 8003550:	2000042c 	.word	0x2000042c
 8003554:	40026058 	.word	0x40026058
 8003558:	40000c00 	.word	0x40000c00
 800355c:	40020000 	.word	0x40020000
 8003560:	40014000 	.word	0x40014000
 8003564:	40001800 	.word	0x40001800

08003568 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b08a      	sub	sp, #40	; 0x28
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003570:	f107 0314 	add.w	r3, r7, #20
 8003574:	2200      	movs	r2, #0
 8003576:	601a      	str	r2, [r3, #0]
 8003578:	605a      	str	r2, [r3, #4]
 800357a:	609a      	str	r2, [r3, #8]
 800357c:	60da      	str	r2, [r3, #12]
 800357e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM9)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a24      	ldr	r2, [pc, #144]	; (8003618 <HAL_TIM_MspPostInit+0xb0>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d11e      	bne.n	80035c8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800358a:	2300      	movs	r3, #0
 800358c:	613b      	str	r3, [r7, #16]
 800358e:	4b23      	ldr	r3, [pc, #140]	; (800361c <HAL_TIM_MspPostInit+0xb4>)
 8003590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003592:	4a22      	ldr	r2, [pc, #136]	; (800361c <HAL_TIM_MspPostInit+0xb4>)
 8003594:	f043 0310 	orr.w	r3, r3, #16
 8003598:	6313      	str	r3, [r2, #48]	; 0x30
 800359a:	4b20      	ldr	r3, [pc, #128]	; (800361c <HAL_TIM_MspPostInit+0xb4>)
 800359c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359e:	f003 0310 	and.w	r3, r3, #16
 80035a2:	613b      	str	r3, [r7, #16]
 80035a4:	693b      	ldr	r3, [r7, #16]
    /**TIM9 GPIO Configuration
    PE5     ------> TIM9_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80035a6:	2320      	movs	r3, #32
 80035a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035aa:	2302      	movs	r3, #2
 80035ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ae:	2300      	movs	r3, #0
 80035b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035b2:	2300      	movs	r3, #0
 80035b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80035b6:	2303      	movs	r3, #3
 80035b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80035ba:	f107 0314 	add.w	r3, r7, #20
 80035be:	4619      	mov	r1, r3
 80035c0:	4817      	ldr	r0, [pc, #92]	; (8003620 <HAL_TIM_MspPostInit+0xb8>)
 80035c2:	f000 ff95 	bl	80044f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80035c6:	e023      	b.n	8003610 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM12)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a15      	ldr	r2, [pc, #84]	; (8003624 <HAL_TIM_MspPostInit+0xbc>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d11e      	bne.n	8003610 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035d2:	2300      	movs	r3, #0
 80035d4:	60fb      	str	r3, [r7, #12]
 80035d6:	4b11      	ldr	r3, [pc, #68]	; (800361c <HAL_TIM_MspPostInit+0xb4>)
 80035d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035da:	4a10      	ldr	r2, [pc, #64]	; (800361c <HAL_TIM_MspPostInit+0xb4>)
 80035dc:	f043 0302 	orr.w	r3, r3, #2
 80035e0:	6313      	str	r3, [r2, #48]	; 0x30
 80035e2:	4b0e      	ldr	r3, [pc, #56]	; (800361c <HAL_TIM_MspPostInit+0xb4>)
 80035e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	60fb      	str	r3, [r7, #12]
 80035ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80035ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80035f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f4:	2302      	movs	r3, #2
 80035f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f8:	2300      	movs	r3, #0
 80035fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035fc:	2300      	movs	r3, #0
 80035fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003600:	2309      	movs	r3, #9
 8003602:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003604:	f107 0314 	add.w	r3, r7, #20
 8003608:	4619      	mov	r1, r3
 800360a:	4807      	ldr	r0, [pc, #28]	; (8003628 <HAL_TIM_MspPostInit+0xc0>)
 800360c:	f000 ff70 	bl	80044f0 <HAL_GPIO_Init>
}
 8003610:	bf00      	nop
 8003612:	3728      	adds	r7, #40	; 0x28
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	40014000 	.word	0x40014000
 800361c:	40023800 	.word	0x40023800
 8003620:	40021000 	.word	0x40021000
 8003624:	40001800 	.word	0x40001800
 8003628:	40020400 	.word	0x40020400

0800362c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b08a      	sub	sp, #40	; 0x28
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003634:	f107 0314 	add.w	r3, r7, #20
 8003638:	2200      	movs	r2, #0
 800363a:	601a      	str	r2, [r3, #0]
 800363c:	605a      	str	r2, [r3, #4]
 800363e:	609a      	str	r2, [r3, #8]
 8003640:	60da      	str	r2, [r3, #12]
 8003642:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a5c      	ldr	r2, [pc, #368]	; (80037bc <HAL_UART_MspInit+0x190>)
 800364a:	4293      	cmp	r3, r2
 800364c:	f040 80b1 	bne.w	80037b2 <HAL_UART_MspInit+0x186>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003650:	2300      	movs	r3, #0
 8003652:	613b      	str	r3, [r7, #16]
 8003654:	4b5a      	ldr	r3, [pc, #360]	; (80037c0 <HAL_UART_MspInit+0x194>)
 8003656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003658:	4a59      	ldr	r2, [pc, #356]	; (80037c0 <HAL_UART_MspInit+0x194>)
 800365a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800365e:	6413      	str	r3, [r2, #64]	; 0x40
 8003660:	4b57      	ldr	r3, [pc, #348]	; (80037c0 <HAL_UART_MspInit+0x194>)
 8003662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003664:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003668:	613b      	str	r3, [r7, #16]
 800366a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800366c:	2300      	movs	r3, #0
 800366e:	60fb      	str	r3, [r7, #12]
 8003670:	4b53      	ldr	r3, [pc, #332]	; (80037c0 <HAL_UART_MspInit+0x194>)
 8003672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003674:	4a52      	ldr	r2, [pc, #328]	; (80037c0 <HAL_UART_MspInit+0x194>)
 8003676:	f043 0301 	orr.w	r3, r3, #1
 800367a:	6313      	str	r3, [r2, #48]	; 0x30
 800367c:	4b50      	ldr	r3, [pc, #320]	; (80037c0 <HAL_UART_MspInit+0x194>)
 800367e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	60fb      	str	r3, [r7, #12]
 8003686:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003688:	2300      	movs	r3, #0
 800368a:	60bb      	str	r3, [r7, #8]
 800368c:	4b4c      	ldr	r3, [pc, #304]	; (80037c0 <HAL_UART_MspInit+0x194>)
 800368e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003690:	4a4b      	ldr	r2, [pc, #300]	; (80037c0 <HAL_UART_MspInit+0x194>)
 8003692:	f043 0304 	orr.w	r3, r3, #4
 8003696:	6313      	str	r3, [r2, #48]	; 0x30
 8003698:	4b49      	ldr	r3, [pc, #292]	; (80037c0 <HAL_UART_MspInit+0x194>)
 800369a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369c:	f003 0304 	and.w	r3, r3, #4
 80036a0:	60bb      	str	r3, [r7, #8]
 80036a2:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA1     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80036a4:	2302      	movs	r3, #2
 80036a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a8:	2302      	movs	r3, #2
 80036aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ac:	2300      	movs	r3, #0
 80036ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036b0:	2303      	movs	r3, #3
 80036b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80036b4:	2308      	movs	r3, #8
 80036b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036b8:	f107 0314 	add.w	r3, r7, #20
 80036bc:	4619      	mov	r1, r3
 80036be:	4841      	ldr	r0, [pc, #260]	; (80037c4 <HAL_UART_MspInit+0x198>)
 80036c0:	f000 ff16 	bl	80044f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80036c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ca:	2302      	movs	r3, #2
 80036cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ce:	2300      	movs	r3, #0
 80036d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036d2:	2303      	movs	r3, #3
 80036d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80036d6:	2308      	movs	r3, #8
 80036d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036da:	f107 0314 	add.w	r3, r7, #20
 80036de:	4619      	mov	r1, r3
 80036e0:	4839      	ldr	r0, [pc, #228]	; (80037c8 <HAL_UART_MspInit+0x19c>)
 80036e2:	f000 ff05 	bl	80044f0 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80036e6:	4b39      	ldr	r3, [pc, #228]	; (80037cc <HAL_UART_MspInit+0x1a0>)
 80036e8:	4a39      	ldr	r2, [pc, #228]	; (80037d0 <HAL_UART_MspInit+0x1a4>)
 80036ea:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80036ec:	4b37      	ldr	r3, [pc, #220]	; (80037cc <HAL_UART_MspInit+0x1a0>)
 80036ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80036f2:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80036f4:	4b35      	ldr	r3, [pc, #212]	; (80037cc <HAL_UART_MspInit+0x1a0>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80036fa:	4b34      	ldr	r3, [pc, #208]	; (80037cc <HAL_UART_MspInit+0x1a0>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003700:	4b32      	ldr	r3, [pc, #200]	; (80037cc <HAL_UART_MspInit+0x1a0>)
 8003702:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003706:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003708:	4b30      	ldr	r3, [pc, #192]	; (80037cc <HAL_UART_MspInit+0x1a0>)
 800370a:	2200      	movs	r2, #0
 800370c:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800370e:	4b2f      	ldr	r3, [pc, #188]	; (80037cc <HAL_UART_MspInit+0x1a0>)
 8003710:	2200      	movs	r2, #0
 8003712:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8003714:	4b2d      	ldr	r3, [pc, #180]	; (80037cc <HAL_UART_MspInit+0x1a0>)
 8003716:	2200      	movs	r2, #0
 8003718:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800371a:	4b2c      	ldr	r3, [pc, #176]	; (80037cc <HAL_UART_MspInit+0x1a0>)
 800371c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003720:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003722:	4b2a      	ldr	r3, [pc, #168]	; (80037cc <HAL_UART_MspInit+0x1a0>)
 8003724:	2200      	movs	r2, #0
 8003726:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8003728:	4828      	ldr	r0, [pc, #160]	; (80037cc <HAL_UART_MspInit+0x1a0>)
 800372a:	f000 fadf 	bl	8003cec <HAL_DMA_Init>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d001      	beq.n	8003738 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8003734:	f7fe fde2 	bl	80022fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a24      	ldr	r2, [pc, #144]	; (80037cc <HAL_UART_MspInit+0x1a0>)
 800373c:	639a      	str	r2, [r3, #56]	; 0x38
 800373e:	4a23      	ldr	r2, [pc, #140]	; (80037cc <HAL_UART_MspInit+0x1a0>)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8003744:	4b23      	ldr	r3, [pc, #140]	; (80037d4 <HAL_UART_MspInit+0x1a8>)
 8003746:	4a24      	ldr	r2, [pc, #144]	; (80037d8 <HAL_UART_MspInit+0x1ac>)
 8003748:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 800374a:	4b22      	ldr	r3, [pc, #136]	; (80037d4 <HAL_UART_MspInit+0x1a8>)
 800374c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003750:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003752:	4b20      	ldr	r3, [pc, #128]	; (80037d4 <HAL_UART_MspInit+0x1a8>)
 8003754:	2240      	movs	r2, #64	; 0x40
 8003756:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003758:	4b1e      	ldr	r3, [pc, #120]	; (80037d4 <HAL_UART_MspInit+0x1a8>)
 800375a:	2200      	movs	r2, #0
 800375c:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800375e:	4b1d      	ldr	r3, [pc, #116]	; (80037d4 <HAL_UART_MspInit+0x1a8>)
 8003760:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003764:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003766:	4b1b      	ldr	r3, [pc, #108]	; (80037d4 <HAL_UART_MspInit+0x1a8>)
 8003768:	2200      	movs	r2, #0
 800376a:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800376c:	4b19      	ldr	r3, [pc, #100]	; (80037d4 <HAL_UART_MspInit+0x1a8>)
 800376e:	2200      	movs	r2, #0
 8003770:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8003772:	4b18      	ldr	r3, [pc, #96]	; (80037d4 <HAL_UART_MspInit+0x1a8>)
 8003774:	2200      	movs	r2, #0
 8003776:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8003778:	4b16      	ldr	r3, [pc, #88]	; (80037d4 <HAL_UART_MspInit+0x1a8>)
 800377a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800377e:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003780:	4b14      	ldr	r3, [pc, #80]	; (80037d4 <HAL_UART_MspInit+0x1a8>)
 8003782:	2200      	movs	r2, #0
 8003784:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8003786:	4813      	ldr	r0, [pc, #76]	; (80037d4 <HAL_UART_MspInit+0x1a8>)
 8003788:	f000 fab0 	bl	8003cec <HAL_DMA_Init>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 8003792:	f7fe fdb3 	bl	80022fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a0e      	ldr	r2, [pc, #56]	; (80037d4 <HAL_UART_MspInit+0x1a8>)
 800379a:	635a      	str	r2, [r3, #52]	; 0x34
 800379c:	4a0d      	ldr	r2, [pc, #52]	; (80037d4 <HAL_UART_MspInit+0x1a8>)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80037a2:	2200      	movs	r2, #0
 80037a4:	2100      	movs	r1, #0
 80037a6:	2034      	movs	r0, #52	; 0x34
 80037a8:	f000 fa69 	bl	8003c7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80037ac:	2034      	movs	r0, #52	; 0x34
 80037ae:	f000 fa82 	bl	8003cb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80037b2:	bf00      	nop
 80037b4:	3728      	adds	r7, #40	; 0x28
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	40004c00 	.word	0x40004c00
 80037c0:	40023800 	.word	0x40023800
 80037c4:	40020000 	.word	0x40020000
 80037c8:	40020800 	.word	0x40020800
 80037cc:	200004d0 	.word	0x200004d0
 80037d0:	40026040 	.word	0x40026040
 80037d4:	20000530 	.word	0x20000530
 80037d8:	40026070 	.word	0x40026070

080037dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037dc:	b480      	push	{r7}
 80037de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80037e0:	e7fe      	b.n	80037e0 <NMI_Handler+0x4>

080037e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037e2:	b480      	push	{r7}
 80037e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037e6:	e7fe      	b.n	80037e6 <HardFault_Handler+0x4>

080037e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80037e8:	b480      	push	{r7}
 80037ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80037ec:	e7fe      	b.n	80037ec <MemManage_Handler+0x4>

080037ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80037ee:	b480      	push	{r7}
 80037f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80037f2:	e7fe      	b.n	80037f2 <BusFault_Handler+0x4>

080037f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80037f8:	e7fe      	b.n	80037f8 <UsageFault_Handler+0x4>

080037fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80037fa:	b480      	push	{r7}
 80037fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80037fe:	bf00      	nop
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800380c:	bf00      	nop
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr

08003816 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003816:	b480      	push	{r7}
 8003818:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800381a:	bf00      	nop
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003828:	f000 f92e 	bl	8003a88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800382c:	bf00      	nop
 800382e:	bd80      	pop	{r7, pc}

08003830 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8003834:	4802      	ldr	r0, [pc, #8]	; (8003840 <DMA1_Stream0_IRQHandler+0x10>)
 8003836:	f000 fbf1 	bl	800401c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800383a:	bf00      	nop
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	200003cc 	.word	0x200003cc

08003844 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8003848:	4802      	ldr	r0, [pc, #8]	; (8003854 <DMA1_Stream2_IRQHandler+0x10>)
 800384a:	f000 fbe7 	bl	800401c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800384e:	bf00      	nop
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	200004d0 	.word	0x200004d0

08003858 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch2);
 800385c:	4802      	ldr	r0, [pc, #8]	; (8003868 <DMA1_Stream3_IRQHandler+0x10>)
 800385e:	f000 fbdd 	bl	800401c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003862:	bf00      	nop
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	2000042c 	.word	0x2000042c

0800386c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8003870:	4802      	ldr	r0, [pc, #8]	; (800387c <DMA1_Stream4_IRQHandler+0x10>)
 8003872:	f000 fbd3 	bl	800401c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003876:	bf00      	nop
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	20000530 	.word	0x20000530

08003880 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8003884:	4802      	ldr	r0, [pc, #8]	; (8003890 <DMA1_Stream5_IRQHandler+0x10>)
 8003886:	f000 fbc9 	bl	800401c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800388a:	bf00      	nop
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	2000030c 	.word	0x2000030c

08003894 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch3);
 8003898:	4802      	ldr	r0, [pc, #8]	; (80038a4 <DMA1_Stream7_IRQHandler+0x10>)
 800389a:	f000 fbbf 	bl	800401c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800389e:	bf00      	nop
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	2000036c 	.word	0x2000036c

080038a8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80038ac:	4802      	ldr	r0, [pc, #8]	; (80038b8 <UART4_IRQHandler+0x10>)
 80038ae:	f003 fd1b 	bl	80072e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80038b2:	bf00      	nop
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	2000048c 	.word	0x2000048c

080038bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80038bc:	b480      	push	{r7}
 80038be:	af00      	add	r7, sp, #0
	return 1;
 80038c0:	2301      	movs	r3, #1
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <_kill>:

int _kill(int pid, int sig)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80038d6:	f004 fe17 	bl	8008508 <__errno>
 80038da:	4603      	mov	r3, r0
 80038dc:	2216      	movs	r2, #22
 80038de:	601a      	str	r2, [r3, #0]
	return -1;
 80038e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3708      	adds	r7, #8
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <_exit>:

void _exit (int status)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80038f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f7ff ffe7 	bl	80038cc <_kill>
	while (1) {}		/* Make sure we hang here */
 80038fe:	e7fe      	b.n	80038fe <_exit+0x12>

08003900 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003908:	4a14      	ldr	r2, [pc, #80]	; (800395c <_sbrk+0x5c>)
 800390a:	4b15      	ldr	r3, [pc, #84]	; (8003960 <_sbrk+0x60>)
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003914:	4b13      	ldr	r3, [pc, #76]	; (8003964 <_sbrk+0x64>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d102      	bne.n	8003922 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800391c:	4b11      	ldr	r3, [pc, #68]	; (8003964 <_sbrk+0x64>)
 800391e:	4a12      	ldr	r2, [pc, #72]	; (8003968 <_sbrk+0x68>)
 8003920:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003922:	4b10      	ldr	r3, [pc, #64]	; (8003964 <_sbrk+0x64>)
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4413      	add	r3, r2
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	429a      	cmp	r2, r3
 800392e:	d207      	bcs.n	8003940 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003930:	f004 fdea 	bl	8008508 <__errno>
 8003934:	4603      	mov	r3, r0
 8003936:	220c      	movs	r2, #12
 8003938:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800393a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800393e:	e009      	b.n	8003954 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003940:	4b08      	ldr	r3, [pc, #32]	; (8003964 <_sbrk+0x64>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003946:	4b07      	ldr	r3, [pc, #28]	; (8003964 <_sbrk+0x64>)
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4413      	add	r3, r2
 800394e:	4a05      	ldr	r2, [pc, #20]	; (8003964 <_sbrk+0x64>)
 8003950:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003952:	68fb      	ldr	r3, [r7, #12]
}
 8003954:	4618      	mov	r0, r3
 8003956:	3718      	adds	r7, #24
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}
 800395c:	20020000 	.word	0x20020000
 8003960:	00000400 	.word	0x00000400
 8003964:	20000ee8 	.word	0x20000ee8
 8003968:	20000f00 	.word	0x20000f00

0800396c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800396c:	b480      	push	{r7}
 800396e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003970:	4b06      	ldr	r3, [pc, #24]	; (800398c <SystemInit+0x20>)
 8003972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003976:	4a05      	ldr	r2, [pc, #20]	; (800398c <SystemInit+0x20>)
 8003978:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800397c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003980:	bf00      	nop
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	e000ed00 	.word	0xe000ed00

08003990 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003990:	f8df d034 	ldr.w	sp, [pc, #52]	; 80039c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003994:	480d      	ldr	r0, [pc, #52]	; (80039cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003996:	490e      	ldr	r1, [pc, #56]	; (80039d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003998:	4a0e      	ldr	r2, [pc, #56]	; (80039d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800399a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800399c:	e002      	b.n	80039a4 <LoopCopyDataInit>

0800399e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800399e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80039a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80039a2:	3304      	adds	r3, #4

080039a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80039a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80039a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80039a8:	d3f9      	bcc.n	800399e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80039aa:	4a0b      	ldr	r2, [pc, #44]	; (80039d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80039ac:	4c0b      	ldr	r4, [pc, #44]	; (80039dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80039ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80039b0:	e001      	b.n	80039b6 <LoopFillZerobss>

080039b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80039b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039b4:	3204      	adds	r2, #4

080039b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80039b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80039b8:	d3fb      	bcc.n	80039b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80039ba:	f7ff ffd7 	bl	800396c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80039be:	f004 fda9 	bl	8008514 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80039c2:	f7fd fee7 	bl	8001794 <main>
  bx  lr    
 80039c6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80039c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80039cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80039d0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80039d4:	08008b08 	.word	0x08008b08
  ldr r2, =_sbss
 80039d8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80039dc:	20000f00 	.word	0x20000f00

080039e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80039e0:	e7fe      	b.n	80039e0 <ADC_IRQHandler>
	...

080039e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80039e8:	4b0e      	ldr	r3, [pc, #56]	; (8003a24 <HAL_Init+0x40>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a0d      	ldr	r2, [pc, #52]	; (8003a24 <HAL_Init+0x40>)
 80039ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80039f4:	4b0b      	ldr	r3, [pc, #44]	; (8003a24 <HAL_Init+0x40>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a0a      	ldr	r2, [pc, #40]	; (8003a24 <HAL_Init+0x40>)
 80039fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a00:	4b08      	ldr	r3, [pc, #32]	; (8003a24 <HAL_Init+0x40>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a07      	ldr	r2, [pc, #28]	; (8003a24 <HAL_Init+0x40>)
 8003a06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a0c:	2003      	movs	r0, #3
 8003a0e:	f000 f92b 	bl	8003c68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a12:	2000      	movs	r0, #0
 8003a14:	f000 f808 	bl	8003a28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a18:	f7ff fa8c 	bl	8002f34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	40023c00 	.word	0x40023c00

08003a28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a30:	4b12      	ldr	r3, [pc, #72]	; (8003a7c <HAL_InitTick+0x54>)
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	4b12      	ldr	r3, [pc, #72]	; (8003a80 <HAL_InitTick+0x58>)
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	4619      	mov	r1, r3
 8003a3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a46:	4618      	mov	r0, r3
 8003a48:	f000 f943 	bl	8003cd2 <HAL_SYSTICK_Config>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e00e      	b.n	8003a74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2b0f      	cmp	r3, #15
 8003a5a:	d80a      	bhi.n	8003a72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	6879      	ldr	r1, [r7, #4]
 8003a60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a64:	f000 f90b 	bl	8003c7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a68:	4a06      	ldr	r2, [pc, #24]	; (8003a84 <HAL_InitTick+0x5c>)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	e000      	b.n	8003a74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3708      	adds	r7, #8
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	20000000 	.word	0x20000000
 8003a80:	20000008 	.word	0x20000008
 8003a84:	20000004 	.word	0x20000004

08003a88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a8c:	4b06      	ldr	r3, [pc, #24]	; (8003aa8 <HAL_IncTick+0x20>)
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	461a      	mov	r2, r3
 8003a92:	4b06      	ldr	r3, [pc, #24]	; (8003aac <HAL_IncTick+0x24>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4413      	add	r3, r2
 8003a98:	4a04      	ldr	r2, [pc, #16]	; (8003aac <HAL_IncTick+0x24>)
 8003a9a:	6013      	str	r3, [r2, #0]
}
 8003a9c:	bf00      	nop
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	20000008 	.word	0x20000008
 8003aac:	20000eec 	.word	0x20000eec

08003ab0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	af00      	add	r7, sp, #0
  return uwTick;
 8003ab4:	4b03      	ldr	r3, [pc, #12]	; (8003ac4 <HAL_GetTick+0x14>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	20000eec 	.word	0x20000eec

08003ac8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f003 0307 	and.w	r3, r3, #7
 8003ad6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ad8:	4b0c      	ldr	r3, [pc, #48]	; (8003b0c <__NVIC_SetPriorityGrouping+0x44>)
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ade:	68ba      	ldr	r2, [r7, #8]
 8003ae0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003af0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003af8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003afa:	4a04      	ldr	r2, [pc, #16]	; (8003b0c <__NVIC_SetPriorityGrouping+0x44>)
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	60d3      	str	r3, [r2, #12]
}
 8003b00:	bf00      	nop
 8003b02:	3714      	adds	r7, #20
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr
 8003b0c:	e000ed00 	.word	0xe000ed00

08003b10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b10:	b480      	push	{r7}
 8003b12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b14:	4b04      	ldr	r3, [pc, #16]	; (8003b28 <__NVIC_GetPriorityGrouping+0x18>)
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	0a1b      	lsrs	r3, r3, #8
 8003b1a:	f003 0307 	and.w	r3, r3, #7
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr
 8003b28:	e000ed00 	.word	0xe000ed00

08003b2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	4603      	mov	r3, r0
 8003b34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	db0b      	blt.n	8003b56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b3e:	79fb      	ldrb	r3, [r7, #7]
 8003b40:	f003 021f 	and.w	r2, r3, #31
 8003b44:	4907      	ldr	r1, [pc, #28]	; (8003b64 <__NVIC_EnableIRQ+0x38>)
 8003b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b4a:	095b      	lsrs	r3, r3, #5
 8003b4c:	2001      	movs	r0, #1
 8003b4e:	fa00 f202 	lsl.w	r2, r0, r2
 8003b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b56:	bf00      	nop
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	e000e100 	.word	0xe000e100

08003b68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	4603      	mov	r3, r0
 8003b70:	6039      	str	r1, [r7, #0]
 8003b72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	db0a      	blt.n	8003b92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	b2da      	uxtb	r2, r3
 8003b80:	490c      	ldr	r1, [pc, #48]	; (8003bb4 <__NVIC_SetPriority+0x4c>)
 8003b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b86:	0112      	lsls	r2, r2, #4
 8003b88:	b2d2      	uxtb	r2, r2
 8003b8a:	440b      	add	r3, r1
 8003b8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b90:	e00a      	b.n	8003ba8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	b2da      	uxtb	r2, r3
 8003b96:	4908      	ldr	r1, [pc, #32]	; (8003bb8 <__NVIC_SetPriority+0x50>)
 8003b98:	79fb      	ldrb	r3, [r7, #7]
 8003b9a:	f003 030f 	and.w	r3, r3, #15
 8003b9e:	3b04      	subs	r3, #4
 8003ba0:	0112      	lsls	r2, r2, #4
 8003ba2:	b2d2      	uxtb	r2, r2
 8003ba4:	440b      	add	r3, r1
 8003ba6:	761a      	strb	r2, [r3, #24]
}
 8003ba8:	bf00      	nop
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr
 8003bb4:	e000e100 	.word	0xe000e100
 8003bb8:	e000ed00 	.word	0xe000ed00

08003bbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b089      	sub	sp, #36	; 0x24
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f003 0307 	and.w	r3, r3, #7
 8003bce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	f1c3 0307 	rsb	r3, r3, #7
 8003bd6:	2b04      	cmp	r3, #4
 8003bd8:	bf28      	it	cs
 8003bda:	2304      	movcs	r3, #4
 8003bdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	3304      	adds	r3, #4
 8003be2:	2b06      	cmp	r3, #6
 8003be4:	d902      	bls.n	8003bec <NVIC_EncodePriority+0x30>
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	3b03      	subs	r3, #3
 8003bea:	e000      	b.n	8003bee <NVIC_EncodePriority+0x32>
 8003bec:	2300      	movs	r3, #0
 8003bee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bf0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfa:	43da      	mvns	r2, r3
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	401a      	ands	r2, r3
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c0e:	43d9      	mvns	r1, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c14:	4313      	orrs	r3, r2
         );
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3724      	adds	r7, #36	; 0x24
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
	...

08003c24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c34:	d301      	bcc.n	8003c3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c36:	2301      	movs	r3, #1
 8003c38:	e00f      	b.n	8003c5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c3a:	4a0a      	ldr	r2, [pc, #40]	; (8003c64 <SysTick_Config+0x40>)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c42:	210f      	movs	r1, #15
 8003c44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c48:	f7ff ff8e 	bl	8003b68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c4c:	4b05      	ldr	r3, [pc, #20]	; (8003c64 <SysTick_Config+0x40>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c52:	4b04      	ldr	r3, [pc, #16]	; (8003c64 <SysTick_Config+0x40>)
 8003c54:	2207      	movs	r2, #7
 8003c56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3708      	adds	r7, #8
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	e000e010 	.word	0xe000e010

08003c68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f7ff ff29 	bl	8003ac8 <__NVIC_SetPriorityGrouping>
}
 8003c76:	bf00      	nop
 8003c78:	3708      	adds	r7, #8
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b086      	sub	sp, #24
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	4603      	mov	r3, r0
 8003c86:	60b9      	str	r1, [r7, #8]
 8003c88:	607a      	str	r2, [r7, #4]
 8003c8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c90:	f7ff ff3e 	bl	8003b10 <__NVIC_GetPriorityGrouping>
 8003c94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	68b9      	ldr	r1, [r7, #8]
 8003c9a:	6978      	ldr	r0, [r7, #20]
 8003c9c:	f7ff ff8e 	bl	8003bbc <NVIC_EncodePriority>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ca6:	4611      	mov	r1, r2
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7ff ff5d 	bl	8003b68 <__NVIC_SetPriority>
}
 8003cae:	bf00      	nop
 8003cb0:	3718      	adds	r7, #24
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}

08003cb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cb6:	b580      	push	{r7, lr}
 8003cb8:	b082      	sub	sp, #8
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7ff ff31 	bl	8003b2c <__NVIC_EnableIRQ>
}
 8003cca:	bf00      	nop
 8003ccc:	3708      	adds	r7, #8
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	b082      	sub	sp, #8
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f7ff ffa2 	bl	8003c24 <SysTick_Config>
 8003ce0:	4603      	mov	r3, r0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3708      	adds	r7, #8
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
	...

08003cec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003cf8:	f7ff feda 	bl	8003ab0 <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d101      	bne.n	8003d08 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e099      	b.n	8003e3c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2202      	movs	r2, #2
 8003d0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f022 0201 	bic.w	r2, r2, #1
 8003d26:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d28:	e00f      	b.n	8003d4a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d2a:	f7ff fec1 	bl	8003ab0 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	2b05      	cmp	r3, #5
 8003d36:	d908      	bls.n	8003d4a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2203      	movs	r2, #3
 8003d42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e078      	b.n	8003e3c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0301 	and.w	r3, r3, #1
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d1e8      	bne.n	8003d2a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d60:	697a      	ldr	r2, [r7, #20]
 8003d62:	4b38      	ldr	r3, [pc, #224]	; (8003e44 <HAL_DMA_Init+0x158>)
 8003d64:	4013      	ands	r3, r2
 8003d66:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685a      	ldr	r2, [r3, #4]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d76:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a1b      	ldr	r3, [r3, #32]
 8003d94:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d96:	697a      	ldr	r2, [r7, #20]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da0:	2b04      	cmp	r3, #4
 8003da2:	d107      	bne.n	8003db4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dac:	4313      	orrs	r3, r2
 8003dae:	697a      	ldr	r2, [r7, #20]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	697a      	ldr	r2, [r7, #20]
 8003dba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	f023 0307 	bic.w	r3, r3, #7
 8003dca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd0:	697a      	ldr	r2, [r7, #20]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dda:	2b04      	cmp	r3, #4
 8003ddc:	d117      	bne.n	8003e0e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d00e      	beq.n	8003e0e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f000 fb01 	bl	80043f8 <DMA_CheckFifoParam>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d008      	beq.n	8003e0e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2240      	movs	r2, #64	; 0x40
 8003e00:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e016      	b.n	8003e3c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	697a      	ldr	r2, [r7, #20]
 8003e14:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 fab8 	bl	800438c <DMA_CalcBaseAndBitshift>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e24:	223f      	movs	r2, #63	; 0x3f
 8003e26:	409a      	lsls	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3718      	adds	r7, #24
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	f010803f 	.word	0xf010803f

08003e48 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b086      	sub	sp, #24
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	607a      	str	r2, [r7, #4]
 8003e54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e56:	2300      	movs	r3, #0
 8003e58:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e5e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d101      	bne.n	8003e6e <HAL_DMA_Start_IT+0x26>
 8003e6a:	2302      	movs	r3, #2
 8003e6c:	e040      	b.n	8003ef0 <HAL_DMA_Start_IT+0xa8>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2201      	movs	r2, #1
 8003e72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d12f      	bne.n	8003ee2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2202      	movs	r2, #2
 8003e86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	68b9      	ldr	r1, [r7, #8]
 8003e96:	68f8      	ldr	r0, [r7, #12]
 8003e98:	f000 fa4a 	bl	8004330 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ea0:	223f      	movs	r2, #63	; 0x3f
 8003ea2:	409a      	lsls	r2, r3
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f042 0216 	orr.w	r2, r2, #22
 8003eb6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d007      	beq.n	8003ed0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f042 0208 	orr.w	r2, r2, #8
 8003ece:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f042 0201 	orr.w	r2, r2, #1
 8003ede:	601a      	str	r2, [r3, #0]
 8003ee0:	e005      	b.n	8003eee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003eea:	2302      	movs	r3, #2
 8003eec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003eee:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3718      	adds	r7, #24
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f04:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003f06:	f7ff fdd3 	bl	8003ab0 <HAL_GetTick>
 8003f0a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d008      	beq.n	8003f2a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2280      	movs	r2, #128	; 0x80
 8003f1c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e052      	b.n	8003fd0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f022 0216 	bic.w	r2, r2, #22
 8003f38:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	695a      	ldr	r2, [r3, #20]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f48:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d103      	bne.n	8003f5a <HAL_DMA_Abort+0x62>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d007      	beq.n	8003f6a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f022 0208 	bic.w	r2, r2, #8
 8003f68:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 0201 	bic.w	r2, r2, #1
 8003f78:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f7a:	e013      	b.n	8003fa4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f7c:	f7ff fd98 	bl	8003ab0 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b05      	cmp	r3, #5
 8003f88:	d90c      	bls.n	8003fa4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2220      	movs	r2, #32
 8003f8e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2203      	movs	r2, #3
 8003f94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e015      	b.n	8003fd0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1e4      	bne.n	8003f7c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fb6:	223f      	movs	r2, #63	; 0x3f
 8003fb8:	409a      	lsls	r2, r3
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d004      	beq.n	8003ff6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2280      	movs	r2, #128	; 0x80
 8003ff0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e00c      	b.n	8004010 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2205      	movs	r2, #5
 8003ffa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f022 0201 	bic.w	r2, r2, #1
 800400c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800400e:	2300      	movs	r3, #0
}
 8004010:	4618      	mov	r0, r3
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b086      	sub	sp, #24
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004024:	2300      	movs	r3, #0
 8004026:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004028:	4b8e      	ldr	r3, [pc, #568]	; (8004264 <HAL_DMA_IRQHandler+0x248>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a8e      	ldr	r2, [pc, #568]	; (8004268 <HAL_DMA_IRQHandler+0x24c>)
 800402e:	fba2 2303 	umull	r2, r3, r2, r3
 8004032:	0a9b      	lsrs	r3, r3, #10
 8004034:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800403a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004046:	2208      	movs	r2, #8
 8004048:	409a      	lsls	r2, r3
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	4013      	ands	r3, r2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d01a      	beq.n	8004088 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0304 	and.w	r3, r3, #4
 800405c:	2b00      	cmp	r3, #0
 800405e:	d013      	beq.n	8004088 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f022 0204 	bic.w	r2, r2, #4
 800406e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004074:	2208      	movs	r2, #8
 8004076:	409a      	lsls	r2, r3
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004080:	f043 0201 	orr.w	r2, r3, #1
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800408c:	2201      	movs	r2, #1
 800408e:	409a      	lsls	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	4013      	ands	r3, r2
 8004094:	2b00      	cmp	r3, #0
 8004096:	d012      	beq.n	80040be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00b      	beq.n	80040be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040aa:	2201      	movs	r2, #1
 80040ac:	409a      	lsls	r2, r3
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b6:	f043 0202 	orr.w	r2, r3, #2
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040c2:	2204      	movs	r2, #4
 80040c4:	409a      	lsls	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	4013      	ands	r3, r2
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d012      	beq.n	80040f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0302 	and.w	r3, r3, #2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00b      	beq.n	80040f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040e0:	2204      	movs	r2, #4
 80040e2:	409a      	lsls	r2, r3
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ec:	f043 0204 	orr.w	r2, r3, #4
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040f8:	2210      	movs	r2, #16
 80040fa:	409a      	lsls	r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	4013      	ands	r3, r2
 8004100:	2b00      	cmp	r3, #0
 8004102:	d043      	beq.n	800418c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0308 	and.w	r3, r3, #8
 800410e:	2b00      	cmp	r3, #0
 8004110:	d03c      	beq.n	800418c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004116:	2210      	movs	r2, #16
 8004118:	409a      	lsls	r2, r3
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d018      	beq.n	800415e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d108      	bne.n	800414c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413e:	2b00      	cmp	r3, #0
 8004140:	d024      	beq.n	800418c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	4798      	blx	r3
 800414a:	e01f      	b.n	800418c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004150:	2b00      	cmp	r3, #0
 8004152:	d01b      	beq.n	800418c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	4798      	blx	r3
 800415c:	e016      	b.n	800418c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004168:	2b00      	cmp	r3, #0
 800416a:	d107      	bne.n	800417c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f022 0208 	bic.w	r2, r2, #8
 800417a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004180:	2b00      	cmp	r3, #0
 8004182:	d003      	beq.n	800418c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004190:	2220      	movs	r2, #32
 8004192:	409a      	lsls	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	4013      	ands	r3, r2
 8004198:	2b00      	cmp	r3, #0
 800419a:	f000 808f 	beq.w	80042bc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0310 	and.w	r3, r3, #16
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	f000 8087 	beq.w	80042bc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041b2:	2220      	movs	r2, #32
 80041b4:	409a      	lsls	r2, r3
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2b05      	cmp	r3, #5
 80041c4:	d136      	bne.n	8004234 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f022 0216 	bic.w	r2, r2, #22
 80041d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	695a      	ldr	r2, [r3, #20]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d103      	bne.n	80041f6 <HAL_DMA_IRQHandler+0x1da>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d007      	beq.n	8004206 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f022 0208 	bic.w	r2, r2, #8
 8004204:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800420a:	223f      	movs	r2, #63	; 0x3f
 800420c:	409a      	lsls	r2, r3
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2201      	movs	r2, #1
 8004216:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004226:	2b00      	cmp	r3, #0
 8004228:	d07e      	beq.n	8004328 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	4798      	blx	r3
        }
        return;
 8004232:	e079      	b.n	8004328 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d01d      	beq.n	800427e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d10d      	bne.n	800426c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004254:	2b00      	cmp	r3, #0
 8004256:	d031      	beq.n	80042bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	4798      	blx	r3
 8004260:	e02c      	b.n	80042bc <HAL_DMA_IRQHandler+0x2a0>
 8004262:	bf00      	nop
 8004264:	20000000 	.word	0x20000000
 8004268:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004270:	2b00      	cmp	r3, #0
 8004272:	d023      	beq.n	80042bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	4798      	blx	r3
 800427c:	e01e      	b.n	80042bc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004288:	2b00      	cmp	r3, #0
 800428a:	d10f      	bne.n	80042ac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f022 0210 	bic.w	r2, r2, #16
 800429a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d003      	beq.n	80042bc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d032      	beq.n	800432a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d022      	beq.n	8004316 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2205      	movs	r2, #5
 80042d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f022 0201 	bic.w	r2, r2, #1
 80042e6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	3301      	adds	r3, #1
 80042ec:	60bb      	str	r3, [r7, #8]
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d307      	bcc.n	8004304 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1f2      	bne.n	80042e8 <HAL_DMA_IRQHandler+0x2cc>
 8004302:	e000      	b.n	8004306 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004304:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800431a:	2b00      	cmp	r3, #0
 800431c:	d005      	beq.n	800432a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	4798      	blx	r3
 8004326:	e000      	b.n	800432a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004328:	bf00      	nop
    }
  }
}
 800432a:	3718      	adds	r7, #24
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	607a      	str	r2, [r7, #4]
 800433c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800434c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	683a      	ldr	r2, [r7, #0]
 8004354:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	2b40      	cmp	r3, #64	; 0x40
 800435c:	d108      	bne.n	8004370 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68ba      	ldr	r2, [r7, #8]
 800436c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800436e:	e007      	b.n	8004380 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68ba      	ldr	r2, [r7, #8]
 8004376:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	60da      	str	r2, [r3, #12]
}
 8004380:	bf00      	nop
 8004382:	3714      	adds	r7, #20
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	b2db      	uxtb	r3, r3
 800439a:	3b10      	subs	r3, #16
 800439c:	4a14      	ldr	r2, [pc, #80]	; (80043f0 <DMA_CalcBaseAndBitshift+0x64>)
 800439e:	fba2 2303 	umull	r2, r3, r2, r3
 80043a2:	091b      	lsrs	r3, r3, #4
 80043a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80043a6:	4a13      	ldr	r2, [pc, #76]	; (80043f4 <DMA_CalcBaseAndBitshift+0x68>)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	4413      	add	r3, r2
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	461a      	mov	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2b03      	cmp	r3, #3
 80043b8:	d909      	bls.n	80043ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80043c2:	f023 0303 	bic.w	r3, r3, #3
 80043c6:	1d1a      	adds	r2, r3, #4
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	659a      	str	r2, [r3, #88]	; 0x58
 80043cc:	e007      	b.n	80043de <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80043d6:	f023 0303 	bic.w	r3, r3, #3
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3714      	adds	r7, #20
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	aaaaaaab 	.word	0xaaaaaaab
 80043f4:	08008aec 	.word	0x08008aec

080043f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004400:	2300      	movs	r3, #0
 8004402:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004408:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	699b      	ldr	r3, [r3, #24]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d11f      	bne.n	8004452 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	2b03      	cmp	r3, #3
 8004416:	d856      	bhi.n	80044c6 <DMA_CheckFifoParam+0xce>
 8004418:	a201      	add	r2, pc, #4	; (adr r2, 8004420 <DMA_CheckFifoParam+0x28>)
 800441a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800441e:	bf00      	nop
 8004420:	08004431 	.word	0x08004431
 8004424:	08004443 	.word	0x08004443
 8004428:	08004431 	.word	0x08004431
 800442c:	080044c7 	.word	0x080044c7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004434:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d046      	beq.n	80044ca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004440:	e043      	b.n	80044ca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004446:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800444a:	d140      	bne.n	80044ce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004450:	e03d      	b.n	80044ce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800445a:	d121      	bne.n	80044a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	2b03      	cmp	r3, #3
 8004460:	d837      	bhi.n	80044d2 <DMA_CheckFifoParam+0xda>
 8004462:	a201      	add	r2, pc, #4	; (adr r2, 8004468 <DMA_CheckFifoParam+0x70>)
 8004464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004468:	08004479 	.word	0x08004479
 800446c:	0800447f 	.word	0x0800447f
 8004470:	08004479 	.word	0x08004479
 8004474:	08004491 	.word	0x08004491
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	73fb      	strb	r3, [r7, #15]
      break;
 800447c:	e030      	b.n	80044e0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004482:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d025      	beq.n	80044d6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800448e:	e022      	b.n	80044d6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004494:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004498:	d11f      	bne.n	80044da <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800449e:	e01c      	b.n	80044da <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d903      	bls.n	80044ae <DMA_CheckFifoParam+0xb6>
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	2b03      	cmp	r3, #3
 80044aa:	d003      	beq.n	80044b4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80044ac:	e018      	b.n	80044e0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	73fb      	strb	r3, [r7, #15]
      break;
 80044b2:	e015      	b.n	80044e0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d00e      	beq.n	80044de <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	73fb      	strb	r3, [r7, #15]
      break;
 80044c4:	e00b      	b.n	80044de <DMA_CheckFifoParam+0xe6>
      break;
 80044c6:	bf00      	nop
 80044c8:	e00a      	b.n	80044e0 <DMA_CheckFifoParam+0xe8>
      break;
 80044ca:	bf00      	nop
 80044cc:	e008      	b.n	80044e0 <DMA_CheckFifoParam+0xe8>
      break;
 80044ce:	bf00      	nop
 80044d0:	e006      	b.n	80044e0 <DMA_CheckFifoParam+0xe8>
      break;
 80044d2:	bf00      	nop
 80044d4:	e004      	b.n	80044e0 <DMA_CheckFifoParam+0xe8>
      break;
 80044d6:	bf00      	nop
 80044d8:	e002      	b.n	80044e0 <DMA_CheckFifoParam+0xe8>
      break;   
 80044da:	bf00      	nop
 80044dc:	e000      	b.n	80044e0 <DMA_CheckFifoParam+0xe8>
      break;
 80044de:	bf00      	nop
    }
  } 
  
  return status; 
 80044e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3714      	adds	r7, #20
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop

080044f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b089      	sub	sp, #36	; 0x24
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80044fa:	2300      	movs	r3, #0
 80044fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80044fe:	2300      	movs	r3, #0
 8004500:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004502:	2300      	movs	r3, #0
 8004504:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004506:	2300      	movs	r3, #0
 8004508:	61fb      	str	r3, [r7, #28]
 800450a:	e16b      	b.n	80047e4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800450c:	2201      	movs	r2, #1
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	fa02 f303 	lsl.w	r3, r2, r3
 8004514:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	4013      	ands	r3, r2
 800451e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004520:	693a      	ldr	r2, [r7, #16]
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	429a      	cmp	r2, r3
 8004526:	f040 815a 	bne.w	80047de <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f003 0303 	and.w	r3, r3, #3
 8004532:	2b01      	cmp	r3, #1
 8004534:	d005      	beq.n	8004542 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800453e:	2b02      	cmp	r3, #2
 8004540:	d130      	bne.n	80045a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	005b      	lsls	r3, r3, #1
 800454c:	2203      	movs	r2, #3
 800454e:	fa02 f303 	lsl.w	r3, r2, r3
 8004552:	43db      	mvns	r3, r3
 8004554:	69ba      	ldr	r2, [r7, #24]
 8004556:	4013      	ands	r3, r2
 8004558:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	68da      	ldr	r2, [r3, #12]
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	005b      	lsls	r3, r3, #1
 8004562:	fa02 f303 	lsl.w	r3, r2, r3
 8004566:	69ba      	ldr	r2, [r7, #24]
 8004568:	4313      	orrs	r3, r2
 800456a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	69ba      	ldr	r2, [r7, #24]
 8004570:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004578:	2201      	movs	r2, #1
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	fa02 f303 	lsl.w	r3, r2, r3
 8004580:	43db      	mvns	r3, r3
 8004582:	69ba      	ldr	r2, [r7, #24]
 8004584:	4013      	ands	r3, r2
 8004586:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	091b      	lsrs	r3, r3, #4
 800458e:	f003 0201 	and.w	r2, r3, #1
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	fa02 f303 	lsl.w	r3, r2, r3
 8004598:	69ba      	ldr	r2, [r7, #24]
 800459a:	4313      	orrs	r3, r2
 800459c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	69ba      	ldr	r2, [r7, #24]
 80045a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f003 0303 	and.w	r3, r3, #3
 80045ac:	2b03      	cmp	r3, #3
 80045ae:	d017      	beq.n	80045e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	005b      	lsls	r3, r3, #1
 80045ba:	2203      	movs	r2, #3
 80045bc:	fa02 f303 	lsl.w	r3, r2, r3
 80045c0:	43db      	mvns	r3, r3
 80045c2:	69ba      	ldr	r2, [r7, #24]
 80045c4:	4013      	ands	r3, r2
 80045c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	689a      	ldr	r2, [r3, #8]
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	005b      	lsls	r3, r3, #1
 80045d0:	fa02 f303 	lsl.w	r3, r2, r3
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	69ba      	ldr	r2, [r7, #24]
 80045de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f003 0303 	and.w	r3, r3, #3
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d123      	bne.n	8004634 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	08da      	lsrs	r2, r3, #3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	3208      	adds	r2, #8
 80045f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	f003 0307 	and.w	r3, r3, #7
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	220f      	movs	r2, #15
 8004604:	fa02 f303 	lsl.w	r3, r2, r3
 8004608:	43db      	mvns	r3, r3
 800460a:	69ba      	ldr	r2, [r7, #24]
 800460c:	4013      	ands	r3, r2
 800460e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	691a      	ldr	r2, [r3, #16]
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	f003 0307 	and.w	r3, r3, #7
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	fa02 f303 	lsl.w	r3, r2, r3
 8004620:	69ba      	ldr	r2, [r7, #24]
 8004622:	4313      	orrs	r3, r2
 8004624:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	08da      	lsrs	r2, r3, #3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	3208      	adds	r2, #8
 800462e:	69b9      	ldr	r1, [r7, #24]
 8004630:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	005b      	lsls	r3, r3, #1
 800463e:	2203      	movs	r2, #3
 8004640:	fa02 f303 	lsl.w	r3, r2, r3
 8004644:	43db      	mvns	r3, r3
 8004646:	69ba      	ldr	r2, [r7, #24]
 8004648:	4013      	ands	r3, r2
 800464a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f003 0203 	and.w	r2, r3, #3
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	005b      	lsls	r3, r3, #1
 8004658:	fa02 f303 	lsl.w	r3, r2, r3
 800465c:	69ba      	ldr	r2, [r7, #24]
 800465e:	4313      	orrs	r3, r2
 8004660:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	69ba      	ldr	r2, [r7, #24]
 8004666:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004670:	2b00      	cmp	r3, #0
 8004672:	f000 80b4 	beq.w	80047de <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004676:	2300      	movs	r3, #0
 8004678:	60fb      	str	r3, [r7, #12]
 800467a:	4b60      	ldr	r3, [pc, #384]	; (80047fc <HAL_GPIO_Init+0x30c>)
 800467c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800467e:	4a5f      	ldr	r2, [pc, #380]	; (80047fc <HAL_GPIO_Init+0x30c>)
 8004680:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004684:	6453      	str	r3, [r2, #68]	; 0x44
 8004686:	4b5d      	ldr	r3, [pc, #372]	; (80047fc <HAL_GPIO_Init+0x30c>)
 8004688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800468a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800468e:	60fb      	str	r3, [r7, #12]
 8004690:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004692:	4a5b      	ldr	r2, [pc, #364]	; (8004800 <HAL_GPIO_Init+0x310>)
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	089b      	lsrs	r3, r3, #2
 8004698:	3302      	adds	r3, #2
 800469a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800469e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	f003 0303 	and.w	r3, r3, #3
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	220f      	movs	r2, #15
 80046aa:	fa02 f303 	lsl.w	r3, r2, r3
 80046ae:	43db      	mvns	r3, r3
 80046b0:	69ba      	ldr	r2, [r7, #24]
 80046b2:	4013      	ands	r3, r2
 80046b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a52      	ldr	r2, [pc, #328]	; (8004804 <HAL_GPIO_Init+0x314>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d02b      	beq.n	8004716 <HAL_GPIO_Init+0x226>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a51      	ldr	r2, [pc, #324]	; (8004808 <HAL_GPIO_Init+0x318>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d025      	beq.n	8004712 <HAL_GPIO_Init+0x222>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a50      	ldr	r2, [pc, #320]	; (800480c <HAL_GPIO_Init+0x31c>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d01f      	beq.n	800470e <HAL_GPIO_Init+0x21e>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a4f      	ldr	r2, [pc, #316]	; (8004810 <HAL_GPIO_Init+0x320>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d019      	beq.n	800470a <HAL_GPIO_Init+0x21a>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a4e      	ldr	r2, [pc, #312]	; (8004814 <HAL_GPIO_Init+0x324>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d013      	beq.n	8004706 <HAL_GPIO_Init+0x216>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a4d      	ldr	r2, [pc, #308]	; (8004818 <HAL_GPIO_Init+0x328>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d00d      	beq.n	8004702 <HAL_GPIO_Init+0x212>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a4c      	ldr	r2, [pc, #304]	; (800481c <HAL_GPIO_Init+0x32c>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d007      	beq.n	80046fe <HAL_GPIO_Init+0x20e>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a4b      	ldr	r2, [pc, #300]	; (8004820 <HAL_GPIO_Init+0x330>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d101      	bne.n	80046fa <HAL_GPIO_Init+0x20a>
 80046f6:	2307      	movs	r3, #7
 80046f8:	e00e      	b.n	8004718 <HAL_GPIO_Init+0x228>
 80046fa:	2308      	movs	r3, #8
 80046fc:	e00c      	b.n	8004718 <HAL_GPIO_Init+0x228>
 80046fe:	2306      	movs	r3, #6
 8004700:	e00a      	b.n	8004718 <HAL_GPIO_Init+0x228>
 8004702:	2305      	movs	r3, #5
 8004704:	e008      	b.n	8004718 <HAL_GPIO_Init+0x228>
 8004706:	2304      	movs	r3, #4
 8004708:	e006      	b.n	8004718 <HAL_GPIO_Init+0x228>
 800470a:	2303      	movs	r3, #3
 800470c:	e004      	b.n	8004718 <HAL_GPIO_Init+0x228>
 800470e:	2302      	movs	r3, #2
 8004710:	e002      	b.n	8004718 <HAL_GPIO_Init+0x228>
 8004712:	2301      	movs	r3, #1
 8004714:	e000      	b.n	8004718 <HAL_GPIO_Init+0x228>
 8004716:	2300      	movs	r3, #0
 8004718:	69fa      	ldr	r2, [r7, #28]
 800471a:	f002 0203 	and.w	r2, r2, #3
 800471e:	0092      	lsls	r2, r2, #2
 8004720:	4093      	lsls	r3, r2
 8004722:	69ba      	ldr	r2, [r7, #24]
 8004724:	4313      	orrs	r3, r2
 8004726:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004728:	4935      	ldr	r1, [pc, #212]	; (8004800 <HAL_GPIO_Init+0x310>)
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	089b      	lsrs	r3, r3, #2
 800472e:	3302      	adds	r3, #2
 8004730:	69ba      	ldr	r2, [r7, #24]
 8004732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004736:	4b3b      	ldr	r3, [pc, #236]	; (8004824 <HAL_GPIO_Init+0x334>)
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	43db      	mvns	r3, r3
 8004740:	69ba      	ldr	r2, [r7, #24]
 8004742:	4013      	ands	r3, r2
 8004744:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d003      	beq.n	800475a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004752:	69ba      	ldr	r2, [r7, #24]
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	4313      	orrs	r3, r2
 8004758:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800475a:	4a32      	ldr	r2, [pc, #200]	; (8004824 <HAL_GPIO_Init+0x334>)
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004760:	4b30      	ldr	r3, [pc, #192]	; (8004824 <HAL_GPIO_Init+0x334>)
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	43db      	mvns	r3, r3
 800476a:	69ba      	ldr	r2, [r7, #24]
 800476c:	4013      	ands	r3, r2
 800476e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d003      	beq.n	8004784 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800477c:	69ba      	ldr	r2, [r7, #24]
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	4313      	orrs	r3, r2
 8004782:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004784:	4a27      	ldr	r2, [pc, #156]	; (8004824 <HAL_GPIO_Init+0x334>)
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800478a:	4b26      	ldr	r3, [pc, #152]	; (8004824 <HAL_GPIO_Init+0x334>)
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	43db      	mvns	r3, r3
 8004794:	69ba      	ldr	r2, [r7, #24]
 8004796:	4013      	ands	r3, r2
 8004798:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d003      	beq.n	80047ae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80047a6:	69ba      	ldr	r2, [r7, #24]
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80047ae:	4a1d      	ldr	r2, [pc, #116]	; (8004824 <HAL_GPIO_Init+0x334>)
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80047b4:	4b1b      	ldr	r3, [pc, #108]	; (8004824 <HAL_GPIO_Init+0x334>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	43db      	mvns	r3, r3
 80047be:	69ba      	ldr	r2, [r7, #24]
 80047c0:	4013      	ands	r3, r2
 80047c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d003      	beq.n	80047d8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80047d0:	69ba      	ldr	r2, [r7, #24]
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80047d8:	4a12      	ldr	r2, [pc, #72]	; (8004824 <HAL_GPIO_Init+0x334>)
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	3301      	adds	r3, #1
 80047e2:	61fb      	str	r3, [r7, #28]
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	2b0f      	cmp	r3, #15
 80047e8:	f67f ae90 	bls.w	800450c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80047ec:	bf00      	nop
 80047ee:	bf00      	nop
 80047f0:	3724      	adds	r7, #36	; 0x24
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	40023800 	.word	0x40023800
 8004800:	40013800 	.word	0x40013800
 8004804:	40020000 	.word	0x40020000
 8004808:	40020400 	.word	0x40020400
 800480c:	40020800 	.word	0x40020800
 8004810:	40020c00 	.word	0x40020c00
 8004814:	40021000 	.word	0x40021000
 8004818:	40021400 	.word	0x40021400
 800481c:	40021800 	.word	0x40021800
 8004820:	40021c00 	.word	0x40021c00
 8004824:	40013c00 	.word	0x40013c00

08004828 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	460b      	mov	r3, r1
 8004832:	807b      	strh	r3, [r7, #2]
 8004834:	4613      	mov	r3, r2
 8004836:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004838:	787b      	ldrb	r3, [r7, #1]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d003      	beq.n	8004846 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800483e:	887a      	ldrh	r2, [r7, #2]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004844:	e003      	b.n	800484e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004846:	887b      	ldrh	r3, [r7, #2]
 8004848:	041a      	lsls	r2, r3, #16
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	619a      	str	r2, [r3, #24]
}
 800484e:	bf00      	nop
 8004850:	370c      	adds	r7, #12
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
	...

0800485c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d101      	bne.n	800486e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e12b      	b.n	8004ac6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b00      	cmp	r3, #0
 8004878:	d106      	bne.n	8004888 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f7fe fb7e 	bl	8002f84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2224      	movs	r2, #36	; 0x24
 800488c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f022 0201 	bic.w	r2, r2, #1
 800489e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80048c0:	f000 fd80 	bl	80053c4 <HAL_RCC_GetPCLK1Freq>
 80048c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	4a81      	ldr	r2, [pc, #516]	; (8004ad0 <HAL_I2C_Init+0x274>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d807      	bhi.n	80048e0 <HAL_I2C_Init+0x84>
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	4a80      	ldr	r2, [pc, #512]	; (8004ad4 <HAL_I2C_Init+0x278>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	bf94      	ite	ls
 80048d8:	2301      	movls	r3, #1
 80048da:	2300      	movhi	r3, #0
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	e006      	b.n	80048ee <HAL_I2C_Init+0x92>
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	4a7d      	ldr	r2, [pc, #500]	; (8004ad8 <HAL_I2C_Init+0x27c>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	bf94      	ite	ls
 80048e8:	2301      	movls	r3, #1
 80048ea:	2300      	movhi	r3, #0
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d001      	beq.n	80048f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e0e7      	b.n	8004ac6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	4a78      	ldr	r2, [pc, #480]	; (8004adc <HAL_I2C_Init+0x280>)
 80048fa:	fba2 2303 	umull	r2, r3, r2, r3
 80048fe:	0c9b      	lsrs	r3, r3, #18
 8004900:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68ba      	ldr	r2, [r7, #8]
 8004912:	430a      	orrs	r2, r1
 8004914:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	6a1b      	ldr	r3, [r3, #32]
 800491c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	4a6a      	ldr	r2, [pc, #424]	; (8004ad0 <HAL_I2C_Init+0x274>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d802      	bhi.n	8004930 <HAL_I2C_Init+0xd4>
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	3301      	adds	r3, #1
 800492e:	e009      	b.n	8004944 <HAL_I2C_Init+0xe8>
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004936:	fb02 f303 	mul.w	r3, r2, r3
 800493a:	4a69      	ldr	r2, [pc, #420]	; (8004ae0 <HAL_I2C_Init+0x284>)
 800493c:	fba2 2303 	umull	r2, r3, r2, r3
 8004940:	099b      	lsrs	r3, r3, #6
 8004942:	3301      	adds	r3, #1
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	6812      	ldr	r2, [r2, #0]
 8004948:	430b      	orrs	r3, r1
 800494a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	69db      	ldr	r3, [r3, #28]
 8004952:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004956:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	495c      	ldr	r1, [pc, #368]	; (8004ad0 <HAL_I2C_Init+0x274>)
 8004960:	428b      	cmp	r3, r1
 8004962:	d819      	bhi.n	8004998 <HAL_I2C_Init+0x13c>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	1e59      	subs	r1, r3, #1
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	005b      	lsls	r3, r3, #1
 800496e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004972:	1c59      	adds	r1, r3, #1
 8004974:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004978:	400b      	ands	r3, r1
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00a      	beq.n	8004994 <HAL_I2C_Init+0x138>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	1e59      	subs	r1, r3, #1
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	005b      	lsls	r3, r3, #1
 8004988:	fbb1 f3f3 	udiv	r3, r1, r3
 800498c:	3301      	adds	r3, #1
 800498e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004992:	e051      	b.n	8004a38 <HAL_I2C_Init+0x1dc>
 8004994:	2304      	movs	r3, #4
 8004996:	e04f      	b.n	8004a38 <HAL_I2C_Init+0x1dc>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d111      	bne.n	80049c4 <HAL_I2C_Init+0x168>
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	1e58      	subs	r0, r3, #1
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6859      	ldr	r1, [r3, #4]
 80049a8:	460b      	mov	r3, r1
 80049aa:	005b      	lsls	r3, r3, #1
 80049ac:	440b      	add	r3, r1
 80049ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80049b2:	3301      	adds	r3, #1
 80049b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	bf0c      	ite	eq
 80049bc:	2301      	moveq	r3, #1
 80049be:	2300      	movne	r3, #0
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	e012      	b.n	80049ea <HAL_I2C_Init+0x18e>
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	1e58      	subs	r0, r3, #1
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6859      	ldr	r1, [r3, #4]
 80049cc:	460b      	mov	r3, r1
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	440b      	add	r3, r1
 80049d2:	0099      	lsls	r1, r3, #2
 80049d4:	440b      	add	r3, r1
 80049d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80049da:	3301      	adds	r3, #1
 80049dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	bf0c      	ite	eq
 80049e4:	2301      	moveq	r3, #1
 80049e6:	2300      	movne	r3, #0
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d001      	beq.n	80049f2 <HAL_I2C_Init+0x196>
 80049ee:	2301      	movs	r3, #1
 80049f0:	e022      	b.n	8004a38 <HAL_I2C_Init+0x1dc>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d10e      	bne.n	8004a18 <HAL_I2C_Init+0x1bc>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	1e58      	subs	r0, r3, #1
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6859      	ldr	r1, [r3, #4]
 8004a02:	460b      	mov	r3, r1
 8004a04:	005b      	lsls	r3, r3, #1
 8004a06:	440b      	add	r3, r1
 8004a08:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a16:	e00f      	b.n	8004a38 <HAL_I2C_Init+0x1dc>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	1e58      	subs	r0, r3, #1
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6859      	ldr	r1, [r3, #4]
 8004a20:	460b      	mov	r3, r1
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	440b      	add	r3, r1
 8004a26:	0099      	lsls	r1, r3, #2
 8004a28:	440b      	add	r3, r1
 8004a2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a2e:	3301      	adds	r3, #1
 8004a30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a38:	6879      	ldr	r1, [r7, #4]
 8004a3a:	6809      	ldr	r1, [r1, #0]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	69da      	ldr	r2, [r3, #28]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a1b      	ldr	r3, [r3, #32]
 8004a52:	431a      	orrs	r2, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	430a      	orrs	r2, r1
 8004a5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004a66:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	6911      	ldr	r1, [r2, #16]
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	68d2      	ldr	r2, [r2, #12]
 8004a72:	4311      	orrs	r1, r2
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	6812      	ldr	r2, [r2, #0]
 8004a78:	430b      	orrs	r3, r1
 8004a7a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	695a      	ldr	r2, [r3, #20]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	431a      	orrs	r2, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	430a      	orrs	r2, r1
 8004a96:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f042 0201 	orr.w	r2, r2, #1
 8004aa6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2220      	movs	r2, #32
 8004ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3710      	adds	r7, #16
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	000186a0 	.word	0x000186a0
 8004ad4:	001e847f 	.word	0x001e847f
 8004ad8:	003d08ff 	.word	0x003d08ff
 8004adc:	431bde83 	.word	0x431bde83
 8004ae0:	10624dd3 	.word	0x10624dd3

08004ae4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b086      	sub	sp, #24
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d101      	bne.n	8004af6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e267      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0301 	and.w	r3, r3, #1
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d075      	beq.n	8004bee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b02:	4b88      	ldr	r3, [pc, #544]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f003 030c 	and.w	r3, r3, #12
 8004b0a:	2b04      	cmp	r3, #4
 8004b0c:	d00c      	beq.n	8004b28 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b0e:	4b85      	ldr	r3, [pc, #532]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b16:	2b08      	cmp	r3, #8
 8004b18:	d112      	bne.n	8004b40 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b1a:	4b82      	ldr	r3, [pc, #520]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b26:	d10b      	bne.n	8004b40 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b28:	4b7e      	ldr	r3, [pc, #504]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d05b      	beq.n	8004bec <HAL_RCC_OscConfig+0x108>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d157      	bne.n	8004bec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e242      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b48:	d106      	bne.n	8004b58 <HAL_RCC_OscConfig+0x74>
 8004b4a:	4b76      	ldr	r3, [pc, #472]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a75      	ldr	r2, [pc, #468]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b54:	6013      	str	r3, [r2, #0]
 8004b56:	e01d      	b.n	8004b94 <HAL_RCC_OscConfig+0xb0>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b60:	d10c      	bne.n	8004b7c <HAL_RCC_OscConfig+0x98>
 8004b62:	4b70      	ldr	r3, [pc, #448]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a6f      	ldr	r2, [pc, #444]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b6c:	6013      	str	r3, [r2, #0]
 8004b6e:	4b6d      	ldr	r3, [pc, #436]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a6c      	ldr	r2, [pc, #432]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b78:	6013      	str	r3, [r2, #0]
 8004b7a:	e00b      	b.n	8004b94 <HAL_RCC_OscConfig+0xb0>
 8004b7c:	4b69      	ldr	r3, [pc, #420]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a68      	ldr	r2, [pc, #416]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b86:	6013      	str	r3, [r2, #0]
 8004b88:	4b66      	ldr	r3, [pc, #408]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a65      	ldr	r2, [pc, #404]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004b8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d013      	beq.n	8004bc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b9c:	f7fe ff88 	bl	8003ab0 <HAL_GetTick>
 8004ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ba2:	e008      	b.n	8004bb6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ba4:	f7fe ff84 	bl	8003ab0 <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	2b64      	cmp	r3, #100	; 0x64
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e207      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bb6:	4b5b      	ldr	r3, [pc, #364]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d0f0      	beq.n	8004ba4 <HAL_RCC_OscConfig+0xc0>
 8004bc2:	e014      	b.n	8004bee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bc4:	f7fe ff74 	bl	8003ab0 <HAL_GetTick>
 8004bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bca:	e008      	b.n	8004bde <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bcc:	f7fe ff70 	bl	8003ab0 <HAL_GetTick>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	2b64      	cmp	r3, #100	; 0x64
 8004bd8:	d901      	bls.n	8004bde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e1f3      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bde:	4b51      	ldr	r3, [pc, #324]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1f0      	bne.n	8004bcc <HAL_RCC_OscConfig+0xe8>
 8004bea:	e000      	b.n	8004bee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0302 	and.w	r3, r3, #2
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d063      	beq.n	8004cc2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004bfa:	4b4a      	ldr	r3, [pc, #296]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	f003 030c 	and.w	r3, r3, #12
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00b      	beq.n	8004c1e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c06:	4b47      	ldr	r3, [pc, #284]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c0e:	2b08      	cmp	r3, #8
 8004c10:	d11c      	bne.n	8004c4c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c12:	4b44      	ldr	r3, [pc, #272]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d116      	bne.n	8004c4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c1e:	4b41      	ldr	r3, [pc, #260]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0302 	and.w	r3, r3, #2
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d005      	beq.n	8004c36 <HAL_RCC_OscConfig+0x152>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d001      	beq.n	8004c36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e1c7      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c36:	4b3b      	ldr	r3, [pc, #236]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	00db      	lsls	r3, r3, #3
 8004c44:	4937      	ldr	r1, [pc, #220]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004c46:	4313      	orrs	r3, r2
 8004c48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c4a:	e03a      	b.n	8004cc2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d020      	beq.n	8004c96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c54:	4b34      	ldr	r3, [pc, #208]	; (8004d28 <HAL_RCC_OscConfig+0x244>)
 8004c56:	2201      	movs	r2, #1
 8004c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c5a:	f7fe ff29 	bl	8003ab0 <HAL_GetTick>
 8004c5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c60:	e008      	b.n	8004c74 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c62:	f7fe ff25 	bl	8003ab0 <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d901      	bls.n	8004c74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c70:	2303      	movs	r3, #3
 8004c72:	e1a8      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c74:	4b2b      	ldr	r3, [pc, #172]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0302 	and.w	r3, r3, #2
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d0f0      	beq.n	8004c62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c80:	4b28      	ldr	r3, [pc, #160]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	00db      	lsls	r3, r3, #3
 8004c8e:	4925      	ldr	r1, [pc, #148]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	600b      	str	r3, [r1, #0]
 8004c94:	e015      	b.n	8004cc2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c96:	4b24      	ldr	r3, [pc, #144]	; (8004d28 <HAL_RCC_OscConfig+0x244>)
 8004c98:	2200      	movs	r2, #0
 8004c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c9c:	f7fe ff08 	bl	8003ab0 <HAL_GetTick>
 8004ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ca2:	e008      	b.n	8004cb6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ca4:	f7fe ff04 	bl	8003ab0 <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e187      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cb6:	4b1b      	ldr	r3, [pc, #108]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0302 	and.w	r3, r3, #2
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1f0      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0308 	and.w	r3, r3, #8
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d036      	beq.n	8004d3c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d016      	beq.n	8004d04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cd6:	4b15      	ldr	r3, [pc, #84]	; (8004d2c <HAL_RCC_OscConfig+0x248>)
 8004cd8:	2201      	movs	r2, #1
 8004cda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cdc:	f7fe fee8 	bl	8003ab0 <HAL_GetTick>
 8004ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ce2:	e008      	b.n	8004cf6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ce4:	f7fe fee4 	bl	8003ab0 <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d901      	bls.n	8004cf6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e167      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cf6:	4b0b      	ldr	r3, [pc, #44]	; (8004d24 <HAL_RCC_OscConfig+0x240>)
 8004cf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cfa:	f003 0302 	and.w	r3, r3, #2
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d0f0      	beq.n	8004ce4 <HAL_RCC_OscConfig+0x200>
 8004d02:	e01b      	b.n	8004d3c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d04:	4b09      	ldr	r3, [pc, #36]	; (8004d2c <HAL_RCC_OscConfig+0x248>)
 8004d06:	2200      	movs	r2, #0
 8004d08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d0a:	f7fe fed1 	bl	8003ab0 <HAL_GetTick>
 8004d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d10:	e00e      	b.n	8004d30 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d12:	f7fe fecd 	bl	8003ab0 <HAL_GetTick>
 8004d16:	4602      	mov	r2, r0
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d907      	bls.n	8004d30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e150      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
 8004d24:	40023800 	.word	0x40023800
 8004d28:	42470000 	.word	0x42470000
 8004d2c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d30:	4b88      	ldr	r3, [pc, #544]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004d32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d34:	f003 0302 	and.w	r3, r3, #2
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d1ea      	bne.n	8004d12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0304 	and.w	r3, r3, #4
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f000 8097 	beq.w	8004e78 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d4e:	4b81      	ldr	r3, [pc, #516]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d10f      	bne.n	8004d7a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	60bb      	str	r3, [r7, #8]
 8004d5e:	4b7d      	ldr	r3, [pc, #500]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d62:	4a7c      	ldr	r2, [pc, #496]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d68:	6413      	str	r3, [r2, #64]	; 0x40
 8004d6a:	4b7a      	ldr	r3, [pc, #488]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d72:	60bb      	str	r3, [r7, #8]
 8004d74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d76:	2301      	movs	r3, #1
 8004d78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d7a:	4b77      	ldr	r3, [pc, #476]	; (8004f58 <HAL_RCC_OscConfig+0x474>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d118      	bne.n	8004db8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d86:	4b74      	ldr	r3, [pc, #464]	; (8004f58 <HAL_RCC_OscConfig+0x474>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a73      	ldr	r2, [pc, #460]	; (8004f58 <HAL_RCC_OscConfig+0x474>)
 8004d8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d92:	f7fe fe8d 	bl	8003ab0 <HAL_GetTick>
 8004d96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d98:	e008      	b.n	8004dac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d9a:	f7fe fe89 	bl	8003ab0 <HAL_GetTick>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d901      	bls.n	8004dac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e10c      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dac:	4b6a      	ldr	r3, [pc, #424]	; (8004f58 <HAL_RCC_OscConfig+0x474>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d0f0      	beq.n	8004d9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d106      	bne.n	8004dce <HAL_RCC_OscConfig+0x2ea>
 8004dc0:	4b64      	ldr	r3, [pc, #400]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc4:	4a63      	ldr	r2, [pc, #396]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004dc6:	f043 0301 	orr.w	r3, r3, #1
 8004dca:	6713      	str	r3, [r2, #112]	; 0x70
 8004dcc:	e01c      	b.n	8004e08 <HAL_RCC_OscConfig+0x324>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	2b05      	cmp	r3, #5
 8004dd4:	d10c      	bne.n	8004df0 <HAL_RCC_OscConfig+0x30c>
 8004dd6:	4b5f      	ldr	r3, [pc, #380]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dda:	4a5e      	ldr	r2, [pc, #376]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004ddc:	f043 0304 	orr.w	r3, r3, #4
 8004de0:	6713      	str	r3, [r2, #112]	; 0x70
 8004de2:	4b5c      	ldr	r3, [pc, #368]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de6:	4a5b      	ldr	r2, [pc, #364]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004de8:	f043 0301 	orr.w	r3, r3, #1
 8004dec:	6713      	str	r3, [r2, #112]	; 0x70
 8004dee:	e00b      	b.n	8004e08 <HAL_RCC_OscConfig+0x324>
 8004df0:	4b58      	ldr	r3, [pc, #352]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df4:	4a57      	ldr	r2, [pc, #348]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004df6:	f023 0301 	bic.w	r3, r3, #1
 8004dfa:	6713      	str	r3, [r2, #112]	; 0x70
 8004dfc:	4b55      	ldr	r3, [pc, #340]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e00:	4a54      	ldr	r2, [pc, #336]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004e02:	f023 0304 	bic.w	r3, r3, #4
 8004e06:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d015      	beq.n	8004e3c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e10:	f7fe fe4e 	bl	8003ab0 <HAL_GetTick>
 8004e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e16:	e00a      	b.n	8004e2e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e18:	f7fe fe4a 	bl	8003ab0 <HAL_GetTick>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d901      	bls.n	8004e2e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e0cb      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e2e:	4b49      	ldr	r3, [pc, #292]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e32:	f003 0302 	and.w	r3, r3, #2
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d0ee      	beq.n	8004e18 <HAL_RCC_OscConfig+0x334>
 8004e3a:	e014      	b.n	8004e66 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e3c:	f7fe fe38 	bl	8003ab0 <HAL_GetTick>
 8004e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e42:	e00a      	b.n	8004e5a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e44:	f7fe fe34 	bl	8003ab0 <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d901      	bls.n	8004e5a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e0b5      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e5a:	4b3e      	ldr	r3, [pc, #248]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e5e:	f003 0302 	and.w	r3, r3, #2
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1ee      	bne.n	8004e44 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e66:	7dfb      	ldrb	r3, [r7, #23]
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d105      	bne.n	8004e78 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e6c:	4b39      	ldr	r3, [pc, #228]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e70:	4a38      	ldr	r2, [pc, #224]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004e72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e76:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	f000 80a1 	beq.w	8004fc4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e82:	4b34      	ldr	r3, [pc, #208]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	f003 030c 	and.w	r3, r3, #12
 8004e8a:	2b08      	cmp	r3, #8
 8004e8c:	d05c      	beq.n	8004f48 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d141      	bne.n	8004f1a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e96:	4b31      	ldr	r3, [pc, #196]	; (8004f5c <HAL_RCC_OscConfig+0x478>)
 8004e98:	2200      	movs	r2, #0
 8004e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e9c:	f7fe fe08 	bl	8003ab0 <HAL_GetTick>
 8004ea0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ea2:	e008      	b.n	8004eb6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ea4:	f7fe fe04 	bl	8003ab0 <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d901      	bls.n	8004eb6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e087      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eb6:	4b27      	ldr	r3, [pc, #156]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1f0      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	69da      	ldr	r2, [r3, #28]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a1b      	ldr	r3, [r3, #32]
 8004eca:	431a      	orrs	r2, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed0:	019b      	lsls	r3, r3, #6
 8004ed2:	431a      	orrs	r2, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed8:	085b      	lsrs	r3, r3, #1
 8004eda:	3b01      	subs	r3, #1
 8004edc:	041b      	lsls	r3, r3, #16
 8004ede:	431a      	orrs	r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee4:	061b      	lsls	r3, r3, #24
 8004ee6:	491b      	ldr	r1, [pc, #108]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004eec:	4b1b      	ldr	r3, [pc, #108]	; (8004f5c <HAL_RCC_OscConfig+0x478>)
 8004eee:	2201      	movs	r2, #1
 8004ef0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ef2:	f7fe fddd 	bl	8003ab0 <HAL_GetTick>
 8004ef6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ef8:	e008      	b.n	8004f0c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004efa:	f7fe fdd9 	bl	8003ab0 <HAL_GetTick>
 8004efe:	4602      	mov	r2, r0
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d901      	bls.n	8004f0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	e05c      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f0c:	4b11      	ldr	r3, [pc, #68]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d0f0      	beq.n	8004efa <HAL_RCC_OscConfig+0x416>
 8004f18:	e054      	b.n	8004fc4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f1a:	4b10      	ldr	r3, [pc, #64]	; (8004f5c <HAL_RCC_OscConfig+0x478>)
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f20:	f7fe fdc6 	bl	8003ab0 <HAL_GetTick>
 8004f24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f26:	e008      	b.n	8004f3a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f28:	f7fe fdc2 	bl	8003ab0 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d901      	bls.n	8004f3a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e045      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f3a:	4b06      	ldr	r3, [pc, #24]	; (8004f54 <HAL_RCC_OscConfig+0x470>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1f0      	bne.n	8004f28 <HAL_RCC_OscConfig+0x444>
 8004f46:	e03d      	b.n	8004fc4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	699b      	ldr	r3, [r3, #24]
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d107      	bne.n	8004f60 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e038      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
 8004f54:	40023800 	.word	0x40023800
 8004f58:	40007000 	.word	0x40007000
 8004f5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f60:	4b1b      	ldr	r3, [pc, #108]	; (8004fd0 <HAL_RCC_OscConfig+0x4ec>)
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d028      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d121      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d11a      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f8a:	68fa      	ldr	r2, [r7, #12]
 8004f8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f90:	4013      	ands	r3, r2
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d111      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa6:	085b      	lsrs	r3, r3, #1
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d107      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d001      	beq.n	8004fc4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e000      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3718      	adds	r7, #24
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	40023800 	.word	0x40023800

08004fd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d101      	bne.n	8004fe8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e0cc      	b.n	8005182 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fe8:	4b68      	ldr	r3, [pc, #416]	; (800518c <HAL_RCC_ClockConfig+0x1b8>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0307 	and.w	r3, r3, #7
 8004ff0:	683a      	ldr	r2, [r7, #0]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d90c      	bls.n	8005010 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ff6:	4b65      	ldr	r3, [pc, #404]	; (800518c <HAL_RCC_ClockConfig+0x1b8>)
 8004ff8:	683a      	ldr	r2, [r7, #0]
 8004ffa:	b2d2      	uxtb	r2, r2
 8004ffc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ffe:	4b63      	ldr	r3, [pc, #396]	; (800518c <HAL_RCC_ClockConfig+0x1b8>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0307 	and.w	r3, r3, #7
 8005006:	683a      	ldr	r2, [r7, #0]
 8005008:	429a      	cmp	r2, r3
 800500a:	d001      	beq.n	8005010 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e0b8      	b.n	8005182 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0302 	and.w	r3, r3, #2
 8005018:	2b00      	cmp	r3, #0
 800501a:	d020      	beq.n	800505e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0304 	and.w	r3, r3, #4
 8005024:	2b00      	cmp	r3, #0
 8005026:	d005      	beq.n	8005034 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005028:	4b59      	ldr	r3, [pc, #356]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	4a58      	ldr	r2, [pc, #352]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 800502e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005032:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0308 	and.w	r3, r3, #8
 800503c:	2b00      	cmp	r3, #0
 800503e:	d005      	beq.n	800504c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005040:	4b53      	ldr	r3, [pc, #332]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	4a52      	ldr	r2, [pc, #328]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 8005046:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800504a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800504c:	4b50      	ldr	r3, [pc, #320]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	494d      	ldr	r1, [pc, #308]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 800505a:	4313      	orrs	r3, r2
 800505c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0301 	and.w	r3, r3, #1
 8005066:	2b00      	cmp	r3, #0
 8005068:	d044      	beq.n	80050f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	2b01      	cmp	r3, #1
 8005070:	d107      	bne.n	8005082 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005072:	4b47      	ldr	r3, [pc, #284]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d119      	bne.n	80050b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e07f      	b.n	8005182 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	2b02      	cmp	r3, #2
 8005088:	d003      	beq.n	8005092 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800508e:	2b03      	cmp	r3, #3
 8005090:	d107      	bne.n	80050a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005092:	4b3f      	ldr	r3, [pc, #252]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d109      	bne.n	80050b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e06f      	b.n	8005182 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050a2:	4b3b      	ldr	r3, [pc, #236]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0302 	and.w	r3, r3, #2
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d101      	bne.n	80050b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e067      	b.n	8005182 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050b2:	4b37      	ldr	r3, [pc, #220]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	f023 0203 	bic.w	r2, r3, #3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	4934      	ldr	r1, [pc, #208]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 80050c0:	4313      	orrs	r3, r2
 80050c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050c4:	f7fe fcf4 	bl	8003ab0 <HAL_GetTick>
 80050c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ca:	e00a      	b.n	80050e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050cc:	f7fe fcf0 	bl	8003ab0 <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80050da:	4293      	cmp	r3, r2
 80050dc:	d901      	bls.n	80050e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e04f      	b.n	8005182 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050e2:	4b2b      	ldr	r3, [pc, #172]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	f003 020c 	and.w	r2, r3, #12
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d1eb      	bne.n	80050cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050f4:	4b25      	ldr	r3, [pc, #148]	; (800518c <HAL_RCC_ClockConfig+0x1b8>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0307 	and.w	r3, r3, #7
 80050fc:	683a      	ldr	r2, [r7, #0]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d20c      	bcs.n	800511c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005102:	4b22      	ldr	r3, [pc, #136]	; (800518c <HAL_RCC_ClockConfig+0x1b8>)
 8005104:	683a      	ldr	r2, [r7, #0]
 8005106:	b2d2      	uxtb	r2, r2
 8005108:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800510a:	4b20      	ldr	r3, [pc, #128]	; (800518c <HAL_RCC_ClockConfig+0x1b8>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0307 	and.w	r3, r3, #7
 8005112:	683a      	ldr	r2, [r7, #0]
 8005114:	429a      	cmp	r2, r3
 8005116:	d001      	beq.n	800511c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e032      	b.n	8005182 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0304 	and.w	r3, r3, #4
 8005124:	2b00      	cmp	r3, #0
 8005126:	d008      	beq.n	800513a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005128:	4b19      	ldr	r3, [pc, #100]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	4916      	ldr	r1, [pc, #88]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 8005136:	4313      	orrs	r3, r2
 8005138:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0308 	and.w	r3, r3, #8
 8005142:	2b00      	cmp	r3, #0
 8005144:	d009      	beq.n	800515a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005146:	4b12      	ldr	r3, [pc, #72]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	00db      	lsls	r3, r3, #3
 8005154:	490e      	ldr	r1, [pc, #56]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 8005156:	4313      	orrs	r3, r2
 8005158:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800515a:	f000 f821 	bl	80051a0 <HAL_RCC_GetSysClockFreq>
 800515e:	4602      	mov	r2, r0
 8005160:	4b0b      	ldr	r3, [pc, #44]	; (8005190 <HAL_RCC_ClockConfig+0x1bc>)
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	091b      	lsrs	r3, r3, #4
 8005166:	f003 030f 	and.w	r3, r3, #15
 800516a:	490a      	ldr	r1, [pc, #40]	; (8005194 <HAL_RCC_ClockConfig+0x1c0>)
 800516c:	5ccb      	ldrb	r3, [r1, r3]
 800516e:	fa22 f303 	lsr.w	r3, r2, r3
 8005172:	4a09      	ldr	r2, [pc, #36]	; (8005198 <HAL_RCC_ClockConfig+0x1c4>)
 8005174:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005176:	4b09      	ldr	r3, [pc, #36]	; (800519c <HAL_RCC_ClockConfig+0x1c8>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4618      	mov	r0, r3
 800517c:	f7fe fc54 	bl	8003a28 <HAL_InitTick>

  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3710      	adds	r7, #16
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	40023c00 	.word	0x40023c00
 8005190:	40023800 	.word	0x40023800
 8005194:	08008ad4 	.word	0x08008ad4
 8005198:	20000000 	.word	0x20000000
 800519c:	20000004 	.word	0x20000004

080051a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051a4:	b094      	sub	sp, #80	; 0x50
 80051a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80051a8:	2300      	movs	r3, #0
 80051aa:	647b      	str	r3, [r7, #68]	; 0x44
 80051ac:	2300      	movs	r3, #0
 80051ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051b0:	2300      	movs	r3, #0
 80051b2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80051b4:	2300      	movs	r3, #0
 80051b6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051b8:	4b79      	ldr	r3, [pc, #484]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	f003 030c 	and.w	r3, r3, #12
 80051c0:	2b08      	cmp	r3, #8
 80051c2:	d00d      	beq.n	80051e0 <HAL_RCC_GetSysClockFreq+0x40>
 80051c4:	2b08      	cmp	r3, #8
 80051c6:	f200 80e1 	bhi.w	800538c <HAL_RCC_GetSysClockFreq+0x1ec>
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d002      	beq.n	80051d4 <HAL_RCC_GetSysClockFreq+0x34>
 80051ce:	2b04      	cmp	r3, #4
 80051d0:	d003      	beq.n	80051da <HAL_RCC_GetSysClockFreq+0x3a>
 80051d2:	e0db      	b.n	800538c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051d4:	4b73      	ldr	r3, [pc, #460]	; (80053a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80051d6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80051d8:	e0db      	b.n	8005392 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051da:	4b73      	ldr	r3, [pc, #460]	; (80053a8 <HAL_RCC_GetSysClockFreq+0x208>)
 80051dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80051de:	e0d8      	b.n	8005392 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051e0:	4b6f      	ldr	r3, [pc, #444]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051e8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051ea:	4b6d      	ldr	r3, [pc, #436]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d063      	beq.n	80052be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051f6:	4b6a      	ldr	r3, [pc, #424]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	099b      	lsrs	r3, r3, #6
 80051fc:	2200      	movs	r2, #0
 80051fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8005200:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005204:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005208:	633b      	str	r3, [r7, #48]	; 0x30
 800520a:	2300      	movs	r3, #0
 800520c:	637b      	str	r3, [r7, #52]	; 0x34
 800520e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005212:	4622      	mov	r2, r4
 8005214:	462b      	mov	r3, r5
 8005216:	f04f 0000 	mov.w	r0, #0
 800521a:	f04f 0100 	mov.w	r1, #0
 800521e:	0159      	lsls	r1, r3, #5
 8005220:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005224:	0150      	lsls	r0, r2, #5
 8005226:	4602      	mov	r2, r0
 8005228:	460b      	mov	r3, r1
 800522a:	4621      	mov	r1, r4
 800522c:	1a51      	subs	r1, r2, r1
 800522e:	6139      	str	r1, [r7, #16]
 8005230:	4629      	mov	r1, r5
 8005232:	eb63 0301 	sbc.w	r3, r3, r1
 8005236:	617b      	str	r3, [r7, #20]
 8005238:	f04f 0200 	mov.w	r2, #0
 800523c:	f04f 0300 	mov.w	r3, #0
 8005240:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005244:	4659      	mov	r1, fp
 8005246:	018b      	lsls	r3, r1, #6
 8005248:	4651      	mov	r1, sl
 800524a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800524e:	4651      	mov	r1, sl
 8005250:	018a      	lsls	r2, r1, #6
 8005252:	4651      	mov	r1, sl
 8005254:	ebb2 0801 	subs.w	r8, r2, r1
 8005258:	4659      	mov	r1, fp
 800525a:	eb63 0901 	sbc.w	r9, r3, r1
 800525e:	f04f 0200 	mov.w	r2, #0
 8005262:	f04f 0300 	mov.w	r3, #0
 8005266:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800526a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800526e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005272:	4690      	mov	r8, r2
 8005274:	4699      	mov	r9, r3
 8005276:	4623      	mov	r3, r4
 8005278:	eb18 0303 	adds.w	r3, r8, r3
 800527c:	60bb      	str	r3, [r7, #8]
 800527e:	462b      	mov	r3, r5
 8005280:	eb49 0303 	adc.w	r3, r9, r3
 8005284:	60fb      	str	r3, [r7, #12]
 8005286:	f04f 0200 	mov.w	r2, #0
 800528a:	f04f 0300 	mov.w	r3, #0
 800528e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005292:	4629      	mov	r1, r5
 8005294:	024b      	lsls	r3, r1, #9
 8005296:	4621      	mov	r1, r4
 8005298:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800529c:	4621      	mov	r1, r4
 800529e:	024a      	lsls	r2, r1, #9
 80052a0:	4610      	mov	r0, r2
 80052a2:	4619      	mov	r1, r3
 80052a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052a6:	2200      	movs	r2, #0
 80052a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80052aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80052b0:	f7fa ff92 	bl	80001d8 <__aeabi_uldivmod>
 80052b4:	4602      	mov	r2, r0
 80052b6:	460b      	mov	r3, r1
 80052b8:	4613      	mov	r3, r2
 80052ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052bc:	e058      	b.n	8005370 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052be:	4b38      	ldr	r3, [pc, #224]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	099b      	lsrs	r3, r3, #6
 80052c4:	2200      	movs	r2, #0
 80052c6:	4618      	mov	r0, r3
 80052c8:	4611      	mov	r1, r2
 80052ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80052ce:	623b      	str	r3, [r7, #32]
 80052d0:	2300      	movs	r3, #0
 80052d2:	627b      	str	r3, [r7, #36]	; 0x24
 80052d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80052d8:	4642      	mov	r2, r8
 80052da:	464b      	mov	r3, r9
 80052dc:	f04f 0000 	mov.w	r0, #0
 80052e0:	f04f 0100 	mov.w	r1, #0
 80052e4:	0159      	lsls	r1, r3, #5
 80052e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052ea:	0150      	lsls	r0, r2, #5
 80052ec:	4602      	mov	r2, r0
 80052ee:	460b      	mov	r3, r1
 80052f0:	4641      	mov	r1, r8
 80052f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80052f6:	4649      	mov	r1, r9
 80052f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80052fc:	f04f 0200 	mov.w	r2, #0
 8005300:	f04f 0300 	mov.w	r3, #0
 8005304:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005308:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800530c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005310:	ebb2 040a 	subs.w	r4, r2, sl
 8005314:	eb63 050b 	sbc.w	r5, r3, fp
 8005318:	f04f 0200 	mov.w	r2, #0
 800531c:	f04f 0300 	mov.w	r3, #0
 8005320:	00eb      	lsls	r3, r5, #3
 8005322:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005326:	00e2      	lsls	r2, r4, #3
 8005328:	4614      	mov	r4, r2
 800532a:	461d      	mov	r5, r3
 800532c:	4643      	mov	r3, r8
 800532e:	18e3      	adds	r3, r4, r3
 8005330:	603b      	str	r3, [r7, #0]
 8005332:	464b      	mov	r3, r9
 8005334:	eb45 0303 	adc.w	r3, r5, r3
 8005338:	607b      	str	r3, [r7, #4]
 800533a:	f04f 0200 	mov.w	r2, #0
 800533e:	f04f 0300 	mov.w	r3, #0
 8005342:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005346:	4629      	mov	r1, r5
 8005348:	028b      	lsls	r3, r1, #10
 800534a:	4621      	mov	r1, r4
 800534c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005350:	4621      	mov	r1, r4
 8005352:	028a      	lsls	r2, r1, #10
 8005354:	4610      	mov	r0, r2
 8005356:	4619      	mov	r1, r3
 8005358:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800535a:	2200      	movs	r2, #0
 800535c:	61bb      	str	r3, [r7, #24]
 800535e:	61fa      	str	r2, [r7, #28]
 8005360:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005364:	f7fa ff38 	bl	80001d8 <__aeabi_uldivmod>
 8005368:	4602      	mov	r2, r0
 800536a:	460b      	mov	r3, r1
 800536c:	4613      	mov	r3, r2
 800536e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005370:	4b0b      	ldr	r3, [pc, #44]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	0c1b      	lsrs	r3, r3, #16
 8005376:	f003 0303 	and.w	r3, r3, #3
 800537a:	3301      	adds	r3, #1
 800537c:	005b      	lsls	r3, r3, #1
 800537e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005380:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005382:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005384:	fbb2 f3f3 	udiv	r3, r2, r3
 8005388:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800538a:	e002      	b.n	8005392 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800538c:	4b05      	ldr	r3, [pc, #20]	; (80053a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800538e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005390:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005392:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005394:	4618      	mov	r0, r3
 8005396:	3750      	adds	r7, #80	; 0x50
 8005398:	46bd      	mov	sp, r7
 800539a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800539e:	bf00      	nop
 80053a0:	40023800 	.word	0x40023800
 80053a4:	00f42400 	.word	0x00f42400
 80053a8:	007a1200 	.word	0x007a1200

080053ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053ac:	b480      	push	{r7}
 80053ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053b0:	4b03      	ldr	r3, [pc, #12]	; (80053c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80053b2:	681b      	ldr	r3, [r3, #0]
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	20000000 	.word	0x20000000

080053c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80053c8:	f7ff fff0 	bl	80053ac <HAL_RCC_GetHCLKFreq>
 80053cc:	4602      	mov	r2, r0
 80053ce:	4b05      	ldr	r3, [pc, #20]	; (80053e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	0a9b      	lsrs	r3, r3, #10
 80053d4:	f003 0307 	and.w	r3, r3, #7
 80053d8:	4903      	ldr	r1, [pc, #12]	; (80053e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053da:	5ccb      	ldrb	r3, [r1, r3]
 80053dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	40023800 	.word	0x40023800
 80053e8:	08008ae4 	.word	0x08008ae4

080053ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80053f0:	f7ff ffdc 	bl	80053ac <HAL_RCC_GetHCLKFreq>
 80053f4:	4602      	mov	r2, r0
 80053f6:	4b05      	ldr	r3, [pc, #20]	; (800540c <HAL_RCC_GetPCLK2Freq+0x20>)
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	0b5b      	lsrs	r3, r3, #13
 80053fc:	f003 0307 	and.w	r3, r3, #7
 8005400:	4903      	ldr	r1, [pc, #12]	; (8005410 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005402:	5ccb      	ldrb	r3, [r1, r3]
 8005404:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005408:	4618      	mov	r0, r3
 800540a:	bd80      	pop	{r7, pc}
 800540c:	40023800 	.word	0x40023800
 8005410:	08008ae4 	.word	0x08008ae4

08005414 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b086      	sub	sp, #24
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800541c:	2300      	movs	r3, #0
 800541e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005420:	2300      	movs	r3, #0
 8005422:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 0301 	and.w	r3, r3, #1
 800542c:	2b00      	cmp	r3, #0
 800542e:	d105      	bne.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005438:	2b00      	cmp	r3, #0
 800543a:	d035      	beq.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800543c:	4b62      	ldr	r3, [pc, #392]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800543e:	2200      	movs	r2, #0
 8005440:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005442:	f7fe fb35 	bl	8003ab0 <HAL_GetTick>
 8005446:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005448:	e008      	b.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800544a:	f7fe fb31 	bl	8003ab0 <HAL_GetTick>
 800544e:	4602      	mov	r2, r0
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	2b02      	cmp	r3, #2
 8005456:	d901      	bls.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	e0b0      	b.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800545c:	4b5b      	ldr	r3, [pc, #364]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005464:	2b00      	cmp	r3, #0
 8005466:	d1f0      	bne.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	019a      	lsls	r2, r3, #6
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	071b      	lsls	r3, r3, #28
 8005474:	4955      	ldr	r1, [pc, #340]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005476:	4313      	orrs	r3, r2
 8005478:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800547c:	4b52      	ldr	r3, [pc, #328]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800547e:	2201      	movs	r2, #1
 8005480:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005482:	f7fe fb15 	bl	8003ab0 <HAL_GetTick>
 8005486:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005488:	e008      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800548a:	f7fe fb11 	bl	8003ab0 <HAL_GetTick>
 800548e:	4602      	mov	r2, r0
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	1ad3      	subs	r3, r2, r3
 8005494:	2b02      	cmp	r3, #2
 8005496:	d901      	bls.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005498:	2303      	movs	r3, #3
 800549a:	e090      	b.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800549c:	4b4b      	ldr	r3, [pc, #300]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d0f0      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0302 	and.w	r3, r3, #2
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	f000 8083 	beq.w	80055bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80054b6:	2300      	movs	r3, #0
 80054b8:	60fb      	str	r3, [r7, #12]
 80054ba:	4b44      	ldr	r3, [pc, #272]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054be:	4a43      	ldr	r2, [pc, #268]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054c4:	6413      	str	r3, [r2, #64]	; 0x40
 80054c6:	4b41      	ldr	r3, [pc, #260]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054ce:	60fb      	str	r3, [r7, #12]
 80054d0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80054d2:	4b3f      	ldr	r3, [pc, #252]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a3e      	ldr	r2, [pc, #248]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80054d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054dc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80054de:	f7fe fae7 	bl	8003ab0 <HAL_GetTick>
 80054e2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80054e4:	e008      	b.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80054e6:	f7fe fae3 	bl	8003ab0 <HAL_GetTick>
 80054ea:	4602      	mov	r2, r0
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d901      	bls.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	e062      	b.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80054f8:	4b35      	ldr	r3, [pc, #212]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005500:	2b00      	cmp	r3, #0
 8005502:	d0f0      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005504:	4b31      	ldr	r3, [pc, #196]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005508:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800550c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d02f      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800551c:	693a      	ldr	r2, [r7, #16]
 800551e:	429a      	cmp	r2, r3
 8005520:	d028      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005522:	4b2a      	ldr	r3, [pc, #168]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005526:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800552a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800552c:	4b29      	ldr	r3, [pc, #164]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800552e:	2201      	movs	r2, #1
 8005530:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005532:	4b28      	ldr	r3, [pc, #160]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005534:	2200      	movs	r2, #0
 8005536:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005538:	4a24      	ldr	r2, [pc, #144]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800553e:	4b23      	ldr	r3, [pc, #140]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005542:	f003 0301 	and.w	r3, r3, #1
 8005546:	2b01      	cmp	r3, #1
 8005548:	d114      	bne.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800554a:	f7fe fab1 	bl	8003ab0 <HAL_GetTick>
 800554e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005550:	e00a      	b.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005552:	f7fe faad 	bl	8003ab0 <HAL_GetTick>
 8005556:	4602      	mov	r2, r0
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005560:	4293      	cmp	r3, r2
 8005562:	d901      	bls.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005564:	2303      	movs	r3, #3
 8005566:	e02a      	b.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005568:	4b18      	ldr	r3, [pc, #96]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800556a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800556c:	f003 0302 	and.w	r3, r3, #2
 8005570:	2b00      	cmp	r3, #0
 8005572:	d0ee      	beq.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800557c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005580:	d10d      	bne.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005582:	4b12      	ldr	r3, [pc, #72]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005592:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005596:	490d      	ldr	r1, [pc, #52]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005598:	4313      	orrs	r3, r2
 800559a:	608b      	str	r3, [r1, #8]
 800559c:	e005      	b.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x196>
 800559e:	4b0b      	ldr	r3, [pc, #44]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	4a0a      	ldr	r2, [pc, #40]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055a4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80055a8:	6093      	str	r3, [r2, #8]
 80055aa:	4b08      	ldr	r3, [pc, #32]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055ac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055b6:	4905      	ldr	r1, [pc, #20]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055b8:	4313      	orrs	r3, r2
 80055ba:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3718      	adds	r7, #24
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	42470068 	.word	0x42470068
 80055cc:	40023800 	.word	0x40023800
 80055d0:	40007000 	.word	0x40007000
 80055d4:	42470e40 	.word	0x42470e40

080055d8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d101      	bne.n	80055ee <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e066      	b.n	80056bc <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	7f5b      	ldrb	r3, [r3, #29]
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d105      	bne.n	8005604 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f7fd fd3c 	bl	800307c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2202      	movs	r2, #2
 8005608:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	22ca      	movs	r2, #202	; 0xca
 8005610:	625a      	str	r2, [r3, #36]	; 0x24
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2253      	movs	r2, #83	; 0x53
 8005618:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 f87a 	bl	8005714 <RTC_EnterInitMode>
 8005620:	4603      	mov	r3, r0
 8005622:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005624:	7bfb      	ldrb	r3, [r7, #15]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d12c      	bne.n	8005684 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	6812      	ldr	r2, [r2, #0]
 8005634:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005638:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800563c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	6899      	ldr	r1, [r3, #8]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	685a      	ldr	r2, [r3, #4]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	431a      	orrs	r2, r3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	695b      	ldr	r3, [r3, #20]
 8005652:	431a      	orrs	r2, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	430a      	orrs	r2, r1
 800565a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	68d2      	ldr	r2, [r2, #12]
 8005664:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	6919      	ldr	r1, [r3, #16]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	041a      	lsls	r2, r3, #16
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	430a      	orrs	r2, r1
 8005678:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 f881 	bl	8005782 <RTC_ExitInitMode>
 8005680:	4603      	mov	r3, r0
 8005682:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005684:	7bfb      	ldrb	r3, [r7, #15]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d113      	bne.n	80056b2 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005698:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	699a      	ldr	r2, [r3, #24]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	430a      	orrs	r2, r1
 80056aa:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	22ff      	movs	r2, #255	; 0xff
 80056b8:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80056ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3710      	adds	r7, #16
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80056cc:	2300      	movs	r3, #0
 80056ce:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68da      	ldr	r2, [r3, #12]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80056de:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80056e0:	f7fe f9e6 	bl	8003ab0 <HAL_GetTick>
 80056e4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80056e6:	e009      	b.n	80056fc <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80056e8:	f7fe f9e2 	bl	8003ab0 <HAL_GetTick>
 80056ec:	4602      	mov	r2, r0
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056f6:	d901      	bls.n	80056fc <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80056f8:	2303      	movs	r3, #3
 80056fa:	e007      	b.n	800570c <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	f003 0320 	and.w	r3, r3, #32
 8005706:	2b00      	cmp	r3, #0
 8005708:	d0ee      	beq.n	80056e8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800570a:	2300      	movs	r3, #0
}
 800570c:	4618      	mov	r0, r3
 800570e:	3710      	adds	r7, #16
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800571c:	2300      	movs	r3, #0
 800571e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005720:	2300      	movs	r3, #0
 8005722:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800572e:	2b00      	cmp	r3, #0
 8005730:	d122      	bne.n	8005778 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68da      	ldr	r2, [r3, #12]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005740:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005742:	f7fe f9b5 	bl	8003ab0 <HAL_GetTick>
 8005746:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005748:	e00c      	b.n	8005764 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800574a:	f7fe f9b1 	bl	8003ab0 <HAL_GetTick>
 800574e:	4602      	mov	r2, r0
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	1ad3      	subs	r3, r2, r3
 8005754:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005758:	d904      	bls.n	8005764 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2204      	movs	r2, #4
 800575e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800576e:	2b00      	cmp	r3, #0
 8005770:	d102      	bne.n	8005778 <RTC_EnterInitMode+0x64>
 8005772:	7bfb      	ldrb	r3, [r7, #15]
 8005774:	2b01      	cmp	r3, #1
 8005776:	d1e8      	bne.n	800574a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005778:	7bfb      	ldrb	r3, [r7, #15]
}
 800577a:	4618      	mov	r0, r3
 800577c:	3710      	adds	r7, #16
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}

08005782 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005782:	b580      	push	{r7, lr}
 8005784:	b084      	sub	sp, #16
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800578a:	2300      	movs	r3, #0
 800578c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68da      	ldr	r2, [r3, #12]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800579c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	f003 0320 	and.w	r3, r3, #32
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d10a      	bne.n	80057c2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f7ff ff89 	bl	80056c4 <HAL_RTC_WaitForSynchro>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d004      	beq.n	80057c2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2204      	movs	r2, #4
 80057bc:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80057c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3710      	adds	r7, #16
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}

080057cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d101      	bne.n	80057de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e041      	b.n	8005862 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d106      	bne.n	80057f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f7fd fc6c 	bl	80030d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2202      	movs	r2, #2
 80057fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	3304      	adds	r3, #4
 8005808:	4619      	mov	r1, r3
 800580a:	4610      	mov	r0, r2
 800580c:	f000 ff28 	bl	8006660 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3708      	adds	r7, #8
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}

0800586a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800586a:	b580      	push	{r7, lr}
 800586c:	b082      	sub	sp, #8
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d101      	bne.n	800587c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e041      	b.n	8005900 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005882:	b2db      	uxtb	r3, r3
 8005884:	2b00      	cmp	r3, #0
 8005886:	d106      	bne.n	8005896 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f000 f839 	bl	8005908 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2202      	movs	r2, #2
 800589a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	3304      	adds	r3, #4
 80058a6:	4619      	mov	r1, r3
 80058a8:	4610      	mov	r0, r2
 80058aa:	f000 fed9 	bl	8006660 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2201      	movs	r2, #1
 80058b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2201      	movs	r2, #1
 80058ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2201      	movs	r2, #1
 80058c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2201      	movs	r2, #1
 80058ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2201      	movs	r2, #1
 80058d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2201      	movs	r2, #1
 80058da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2201      	movs	r2, #1
 80058e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2201      	movs	r2, #1
 80058ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2201      	movs	r2, #1
 80058f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2201      	movs	r2, #1
 80058fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	3708      	adds	r7, #8
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005910:	bf00      	nop
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d109      	bne.n	8005940 <HAL_TIM_PWM_Start+0x24>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005932:	b2db      	uxtb	r3, r3
 8005934:	2b01      	cmp	r3, #1
 8005936:	bf14      	ite	ne
 8005938:	2301      	movne	r3, #1
 800593a:	2300      	moveq	r3, #0
 800593c:	b2db      	uxtb	r3, r3
 800593e:	e022      	b.n	8005986 <HAL_TIM_PWM_Start+0x6a>
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	2b04      	cmp	r3, #4
 8005944:	d109      	bne.n	800595a <HAL_TIM_PWM_Start+0x3e>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800594c:	b2db      	uxtb	r3, r3
 800594e:	2b01      	cmp	r3, #1
 8005950:	bf14      	ite	ne
 8005952:	2301      	movne	r3, #1
 8005954:	2300      	moveq	r3, #0
 8005956:	b2db      	uxtb	r3, r3
 8005958:	e015      	b.n	8005986 <HAL_TIM_PWM_Start+0x6a>
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	2b08      	cmp	r3, #8
 800595e:	d109      	bne.n	8005974 <HAL_TIM_PWM_Start+0x58>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005966:	b2db      	uxtb	r3, r3
 8005968:	2b01      	cmp	r3, #1
 800596a:	bf14      	ite	ne
 800596c:	2301      	movne	r3, #1
 800596e:	2300      	moveq	r3, #0
 8005970:	b2db      	uxtb	r3, r3
 8005972:	e008      	b.n	8005986 <HAL_TIM_PWM_Start+0x6a>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800597a:	b2db      	uxtb	r3, r3
 800597c:	2b01      	cmp	r3, #1
 800597e:	bf14      	ite	ne
 8005980:	2301      	movne	r3, #1
 8005982:	2300      	moveq	r3, #0
 8005984:	b2db      	uxtb	r3, r3
 8005986:	2b00      	cmp	r3, #0
 8005988:	d001      	beq.n	800598e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e07c      	b.n	8005a88 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d104      	bne.n	800599e <HAL_TIM_PWM_Start+0x82>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2202      	movs	r2, #2
 8005998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800599c:	e013      	b.n	80059c6 <HAL_TIM_PWM_Start+0xaa>
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	2b04      	cmp	r3, #4
 80059a2:	d104      	bne.n	80059ae <HAL_TIM_PWM_Start+0x92>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2202      	movs	r2, #2
 80059a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059ac:	e00b      	b.n	80059c6 <HAL_TIM_PWM_Start+0xaa>
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	2b08      	cmp	r3, #8
 80059b2:	d104      	bne.n	80059be <HAL_TIM_PWM_Start+0xa2>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2202      	movs	r2, #2
 80059b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059bc:	e003      	b.n	80059c6 <HAL_TIM_PWM_Start+0xaa>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2202      	movs	r2, #2
 80059c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	2201      	movs	r2, #1
 80059cc:	6839      	ldr	r1, [r7, #0]
 80059ce:	4618      	mov	r0, r3
 80059d0:	f001 faec 	bl	8006fac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a2d      	ldr	r2, [pc, #180]	; (8005a90 <HAL_TIM_PWM_Start+0x174>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d004      	beq.n	80059e8 <HAL_TIM_PWM_Start+0xcc>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a2c      	ldr	r2, [pc, #176]	; (8005a94 <HAL_TIM_PWM_Start+0x178>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d101      	bne.n	80059ec <HAL_TIM_PWM_Start+0xd0>
 80059e8:	2301      	movs	r3, #1
 80059ea:	e000      	b.n	80059ee <HAL_TIM_PWM_Start+0xd2>
 80059ec:	2300      	movs	r3, #0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d007      	beq.n	8005a02 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a00:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a22      	ldr	r2, [pc, #136]	; (8005a90 <HAL_TIM_PWM_Start+0x174>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d022      	beq.n	8005a52 <HAL_TIM_PWM_Start+0x136>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a14:	d01d      	beq.n	8005a52 <HAL_TIM_PWM_Start+0x136>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a1f      	ldr	r2, [pc, #124]	; (8005a98 <HAL_TIM_PWM_Start+0x17c>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d018      	beq.n	8005a52 <HAL_TIM_PWM_Start+0x136>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a1d      	ldr	r2, [pc, #116]	; (8005a9c <HAL_TIM_PWM_Start+0x180>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d013      	beq.n	8005a52 <HAL_TIM_PWM_Start+0x136>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a1c      	ldr	r2, [pc, #112]	; (8005aa0 <HAL_TIM_PWM_Start+0x184>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d00e      	beq.n	8005a52 <HAL_TIM_PWM_Start+0x136>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a16      	ldr	r2, [pc, #88]	; (8005a94 <HAL_TIM_PWM_Start+0x178>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d009      	beq.n	8005a52 <HAL_TIM_PWM_Start+0x136>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a18      	ldr	r2, [pc, #96]	; (8005aa4 <HAL_TIM_PWM_Start+0x188>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d004      	beq.n	8005a52 <HAL_TIM_PWM_Start+0x136>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a16      	ldr	r2, [pc, #88]	; (8005aa8 <HAL_TIM_PWM_Start+0x18c>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d111      	bne.n	8005a76 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	f003 0307 	and.w	r3, r3, #7
 8005a5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2b06      	cmp	r3, #6
 8005a62:	d010      	beq.n	8005a86 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f042 0201 	orr.w	r2, r2, #1
 8005a72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a74:	e007      	b.n	8005a86 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f042 0201 	orr.w	r2, r2, #1
 8005a84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a86:	2300      	movs	r3, #0
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3710      	adds	r7, #16
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	40010000 	.word	0x40010000
 8005a94:	40010400 	.word	0x40010400
 8005a98:	40000400 	.word	0x40000400
 8005a9c:	40000800 	.word	0x40000800
 8005aa0:	40000c00 	.word	0x40000c00
 8005aa4:	40014000 	.word	0x40014000
 8005aa8:	40001800 	.word	0x40001800

08005aac <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b082      	sub	sp, #8
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	2200      	movs	r2, #0
 8005abc:	6839      	ldr	r1, [r7, #0]
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f001 fa74 	bl	8006fac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a2e      	ldr	r2, [pc, #184]	; (8005b84 <HAL_TIM_PWM_Stop+0xd8>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d004      	beq.n	8005ad8 <HAL_TIM_PWM_Stop+0x2c>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a2d      	ldr	r2, [pc, #180]	; (8005b88 <HAL_TIM_PWM_Stop+0xdc>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d101      	bne.n	8005adc <HAL_TIM_PWM_Stop+0x30>
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e000      	b.n	8005ade <HAL_TIM_PWM_Stop+0x32>
 8005adc:	2300      	movs	r3, #0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d017      	beq.n	8005b12 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	6a1a      	ldr	r2, [r3, #32]
 8005ae8:	f241 1311 	movw	r3, #4369	; 0x1111
 8005aec:	4013      	ands	r3, r2
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d10f      	bne.n	8005b12 <HAL_TIM_PWM_Stop+0x66>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	6a1a      	ldr	r2, [r3, #32]
 8005af8:	f240 4344 	movw	r3, #1092	; 0x444
 8005afc:	4013      	ands	r3, r2
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d107      	bne.n	8005b12 <HAL_TIM_PWM_Stop+0x66>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b10:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	6a1a      	ldr	r2, [r3, #32]
 8005b18:	f241 1311 	movw	r3, #4369	; 0x1111
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d10f      	bne.n	8005b42 <HAL_TIM_PWM_Stop+0x96>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	6a1a      	ldr	r2, [r3, #32]
 8005b28:	f240 4344 	movw	r3, #1092	; 0x444
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d107      	bne.n	8005b42 <HAL_TIM_PWM_Stop+0x96>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f022 0201 	bic.w	r2, r2, #1
 8005b40:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d104      	bne.n	8005b52 <HAL_TIM_PWM_Stop+0xa6>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b50:	e013      	b.n	8005b7a <HAL_TIM_PWM_Stop+0xce>
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	2b04      	cmp	r3, #4
 8005b56:	d104      	bne.n	8005b62 <HAL_TIM_PWM_Stop+0xb6>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b60:	e00b      	b.n	8005b7a <HAL_TIM_PWM_Stop+0xce>
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	2b08      	cmp	r3, #8
 8005b66:	d104      	bne.n	8005b72 <HAL_TIM_PWM_Stop+0xc6>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b70:	e003      	b.n	8005b7a <HAL_TIM_PWM_Stop+0xce>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2201      	movs	r2, #1
 8005b76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3708      	adds	r7, #8
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	40010000 	.word	0x40010000
 8005b88:	40010400 	.word	0x40010400

08005b8c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b082      	sub	sp, #8
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d101      	bne.n	8005b9e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e041      	b.n	8005c22 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d106      	bne.n	8005bb8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 f839 	bl	8005c2a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2202      	movs	r2, #2
 8005bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	3304      	adds	r3, #4
 8005bc8:	4619      	mov	r1, r3
 8005bca:	4610      	mov	r0, r2
 8005bcc:	f000 fd48 	bl	8006660 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3708      	adds	r7, #8
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}

08005c2a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005c2a:	b480      	push	{r7}
 8005c2c:	b083      	sub	sp, #12
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005c32:	bf00      	nop
 8005c34:	370c      	adds	r7, #12
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
	...

08005c40 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b086      	sub	sp, #24
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	60b9      	str	r1, [r7, #8]
 8005c4a:	607a      	str	r2, [r7, #4]
 8005c4c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d104      	bne.n	8005c62 <HAL_TIM_IC_Start_DMA+0x22>
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	e013      	b.n	8005c8a <HAL_TIM_IC_Start_DMA+0x4a>
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	2b04      	cmp	r3, #4
 8005c66:	d104      	bne.n	8005c72 <HAL_TIM_IC_Start_DMA+0x32>
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	e00b      	b.n	8005c8a <HAL_TIM_IC_Start_DMA+0x4a>
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	2b08      	cmp	r3, #8
 8005c76:	d104      	bne.n	8005c82 <HAL_TIM_IC_Start_DMA+0x42>
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	e003      	b.n	8005c8a <HAL_TIM_IC_Start_DMA+0x4a>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d104      	bne.n	8005c9c <HAL_TIM_IC_Start_DMA+0x5c>
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	e013      	b.n	8005cc4 <HAL_TIM_IC_Start_DMA+0x84>
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	2b04      	cmp	r3, #4
 8005ca0:	d104      	bne.n	8005cac <HAL_TIM_IC_Start_DMA+0x6c>
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	e00b      	b.n	8005cc4 <HAL_TIM_IC_Start_DMA+0x84>
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	2b08      	cmp	r3, #8
 8005cb0:	d104      	bne.n	8005cbc <HAL_TIM_IC_Start_DMA+0x7c>
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	e003      	b.n	8005cc4 <HAL_TIM_IC_Start_DMA+0x84>
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8005cc6:	7dbb      	ldrb	r3, [r7, #22]
 8005cc8:	2b02      	cmp	r3, #2
 8005cca:	d002      	beq.n	8005cd2 <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8005ccc:	7d7b      	ldrb	r3, [r7, #21]
 8005cce:	2b02      	cmp	r3, #2
 8005cd0:	d101      	bne.n	8005cd6 <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 8005cd2:	2302      	movs	r3, #2
 8005cd4:	e146      	b.n	8005f64 <HAL_TIM_IC_Start_DMA+0x324>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8005cd6:	7dbb      	ldrb	r3, [r7, #22]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d143      	bne.n	8005d64 <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8005cdc:	7d7b      	ldrb	r3, [r7, #21]
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d140      	bne.n	8005d64 <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d104      	bne.n	8005cf2 <HAL_TIM_IC_Start_DMA+0xb2>
 8005ce8:	887b      	ldrh	r3, [r7, #2]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d001      	beq.n	8005cf2 <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e138      	b.n	8005f64 <HAL_TIM_IC_Start_DMA+0x324>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d104      	bne.n	8005d02 <HAL_TIM_IC_Start_DMA+0xc2>
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2202      	movs	r2, #2
 8005cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d00:	e013      	b.n	8005d2a <HAL_TIM_IC_Start_DMA+0xea>
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	2b04      	cmp	r3, #4
 8005d06:	d104      	bne.n	8005d12 <HAL_TIM_IC_Start_DMA+0xd2>
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2202      	movs	r2, #2
 8005d0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d10:	e00b      	b.n	8005d2a <HAL_TIM_IC_Start_DMA+0xea>
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	2b08      	cmp	r3, #8
 8005d16:	d104      	bne.n	8005d22 <HAL_TIM_IC_Start_DMA+0xe2>
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2202      	movs	r2, #2
 8005d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d20:	e003      	b.n	8005d2a <HAL_TIM_IC_Start_DMA+0xea>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2202      	movs	r2, #2
 8005d26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d104      	bne.n	8005d3a <HAL_TIM_IC_Start_DMA+0xfa>
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2202      	movs	r2, #2
 8005d34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) && (Length > 0U))
 8005d38:	e016      	b.n	8005d68 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	2b04      	cmp	r3, #4
 8005d3e:	d104      	bne.n	8005d4a <HAL_TIM_IC_Start_DMA+0x10a>
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2202      	movs	r2, #2
 8005d44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) && (Length > 0U))
 8005d48:	e00e      	b.n	8005d68 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	2b08      	cmp	r3, #8
 8005d4e:	d104      	bne.n	8005d5a <HAL_TIM_IC_Start_DMA+0x11a>
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2202      	movs	r2, #2
 8005d54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 8005d58:	e006      	b.n	8005d68 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2202      	movs	r2, #2
 8005d5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 8005d62:	e001      	b.n	8005d68 <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	e0fd      	b.n	8005f64 <HAL_TIM_IC_Start_DMA+0x324>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	68b9      	ldr	r1, [r7, #8]
 8005d70:	4618      	mov	r0, r3
 8005d72:	f001 f91b 	bl	8006fac <TIM_CCxChannelCmd>

  switch (Channel)
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	2b0c      	cmp	r3, #12
 8005d7a:	f200 80ad 	bhi.w	8005ed8 <HAL_TIM_IC_Start_DMA+0x298>
 8005d7e:	a201      	add	r2, pc, #4	; (adr r2, 8005d84 <HAL_TIM_IC_Start_DMA+0x144>)
 8005d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d84:	08005db9 	.word	0x08005db9
 8005d88:	08005ed9 	.word	0x08005ed9
 8005d8c:	08005ed9 	.word	0x08005ed9
 8005d90:	08005ed9 	.word	0x08005ed9
 8005d94:	08005e01 	.word	0x08005e01
 8005d98:	08005ed9 	.word	0x08005ed9
 8005d9c:	08005ed9 	.word	0x08005ed9
 8005da0:	08005ed9 	.word	0x08005ed9
 8005da4:	08005e49 	.word	0x08005e49
 8005da8:	08005ed9 	.word	0x08005ed9
 8005dac:	08005ed9 	.word	0x08005ed9
 8005db0:	08005ed9 	.word	0x08005ed9
 8005db4:	08005e91 	.word	0x08005e91
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dbc:	4a6b      	ldr	r2, [pc, #428]	; (8005f6c <HAL_TIM_IC_Start_DMA+0x32c>)
 8005dbe:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc4:	4a6a      	ldr	r2, [pc, #424]	; (8005f70 <HAL_TIM_IC_Start_DMA+0x330>)
 8005dc6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dcc:	4a69      	ldr	r2, [pc, #420]	; (8005f74 <HAL_TIM_IC_Start_DMA+0x334>)
 8005dce:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	3334      	adds	r3, #52	; 0x34
 8005dda:	4619      	mov	r1, r3
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	887b      	ldrh	r3, [r7, #2]
 8005de0:	f7fe f832 	bl	8003e48 <HAL_DMA_Start_IT>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d001      	beq.n	8005dee <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e0ba      	b.n	8005f64 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	68da      	ldr	r2, [r3, #12]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dfc:	60da      	str	r2, [r3, #12]
      break;
 8005dfe:	e06e      	b.n	8005ede <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e04:	4a59      	ldr	r2, [pc, #356]	; (8005f6c <HAL_TIM_IC_Start_DMA+0x32c>)
 8005e06:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e0c:	4a58      	ldr	r2, [pc, #352]	; (8005f70 <HAL_TIM_IC_Start_DMA+0x330>)
 8005e0e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e14:	4a57      	ldr	r2, [pc, #348]	; (8005f74 <HAL_TIM_IC_Start_DMA+0x334>)
 8005e16:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	3338      	adds	r3, #56	; 0x38
 8005e22:	4619      	mov	r1, r3
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	887b      	ldrh	r3, [r7, #2]
 8005e28:	f7fe f80e 	bl	8003e48 <HAL_DMA_Start_IT>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d001      	beq.n	8005e36 <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	e096      	b.n	8005f64 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	68da      	ldr	r2, [r3, #12]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e44:	60da      	str	r2, [r3, #12]
      break;
 8005e46:	e04a      	b.n	8005ede <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e4c:	4a47      	ldr	r2, [pc, #284]	; (8005f6c <HAL_TIM_IC_Start_DMA+0x32c>)
 8005e4e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e54:	4a46      	ldr	r2, [pc, #280]	; (8005f70 <HAL_TIM_IC_Start_DMA+0x330>)
 8005e56:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e5c:	4a45      	ldr	r2, [pc, #276]	; (8005f74 <HAL_TIM_IC_Start_DMA+0x334>)
 8005e5e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	333c      	adds	r3, #60	; 0x3c
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	887b      	ldrh	r3, [r7, #2]
 8005e70:	f7fd ffea 	bl	8003e48 <HAL_DMA_Start_IT>
 8005e74:	4603      	mov	r3, r0
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d001      	beq.n	8005e7e <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e072      	b.n	8005f64 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	68da      	ldr	r2, [r3, #12]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e8c:	60da      	str	r2, [r3, #12]
      break;
 8005e8e:	e026      	b.n	8005ede <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e94:	4a35      	ldr	r2, [pc, #212]	; (8005f6c <HAL_TIM_IC_Start_DMA+0x32c>)
 8005e96:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e9c:	4a34      	ldr	r2, [pc, #208]	; (8005f70 <HAL_TIM_IC_Start_DMA+0x330>)
 8005e9e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea4:	4a33      	ldr	r2, [pc, #204]	; (8005f74 <HAL_TIM_IC_Start_DMA+0x334>)
 8005ea6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	3340      	adds	r3, #64	; 0x40
 8005eb2:	4619      	mov	r1, r3
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	887b      	ldrh	r3, [r7, #2]
 8005eb8:	f7fd ffc6 	bl	8003e48 <HAL_DMA_Start_IT>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d001      	beq.n	8005ec6 <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e04e      	b.n	8005f64 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	68da      	ldr	r2, [r3, #12]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005ed4:	60da      	str	r2, [r3, #12]
      break;
 8005ed6:	e002      	b.n	8005ede <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	75fb      	strb	r3, [r7, #23]
      break;
 8005edc:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a25      	ldr	r2, [pc, #148]	; (8005f78 <HAL_TIM_IC_Start_DMA+0x338>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d022      	beq.n	8005f2e <HAL_TIM_IC_Start_DMA+0x2ee>
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ef0:	d01d      	beq.n	8005f2e <HAL_TIM_IC_Start_DMA+0x2ee>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a21      	ldr	r2, [pc, #132]	; (8005f7c <HAL_TIM_IC_Start_DMA+0x33c>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d018      	beq.n	8005f2e <HAL_TIM_IC_Start_DMA+0x2ee>
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a1f      	ldr	r2, [pc, #124]	; (8005f80 <HAL_TIM_IC_Start_DMA+0x340>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d013      	beq.n	8005f2e <HAL_TIM_IC_Start_DMA+0x2ee>
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a1e      	ldr	r2, [pc, #120]	; (8005f84 <HAL_TIM_IC_Start_DMA+0x344>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d00e      	beq.n	8005f2e <HAL_TIM_IC_Start_DMA+0x2ee>
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a1c      	ldr	r2, [pc, #112]	; (8005f88 <HAL_TIM_IC_Start_DMA+0x348>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d009      	beq.n	8005f2e <HAL_TIM_IC_Start_DMA+0x2ee>
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a1b      	ldr	r2, [pc, #108]	; (8005f8c <HAL_TIM_IC_Start_DMA+0x34c>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d004      	beq.n	8005f2e <HAL_TIM_IC_Start_DMA+0x2ee>
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a19      	ldr	r2, [pc, #100]	; (8005f90 <HAL_TIM_IC_Start_DMA+0x350>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d111      	bne.n	8005f52 <HAL_TIM_IC_Start_DMA+0x312>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	f003 0307 	and.w	r3, r3, #7
 8005f38:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	2b06      	cmp	r3, #6
 8005f3e:	d010      	beq.n	8005f62 <HAL_TIM_IC_Start_DMA+0x322>
    {
      __HAL_TIM_ENABLE(htim);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f042 0201 	orr.w	r2, r2, #1
 8005f4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f50:	e007      	b.n	8005f62 <HAL_TIM_IC_Start_DMA+0x322>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f042 0201 	orr.w	r2, r2, #1
 8005f60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8005f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3718      	adds	r7, #24
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	08006531 	.word	0x08006531
 8005f70:	080065f9 	.word	0x080065f9
 8005f74:	0800649f 	.word	0x0800649f
 8005f78:	40010000 	.word	0x40010000
 8005f7c:	40000400 	.word	0x40000400
 8005f80:	40000800 	.word	0x40000800
 8005f84:	40000c00 	.word	0x40000c00
 8005f88:	40010400 	.word	0x40010400
 8005f8c:	40014000 	.word	0x40014000
 8005f90:	40001800 	.word	0x40001800

08005f94 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b086      	sub	sp, #24
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d101      	bne.n	8005fb2 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005fae:	2302      	movs	r3, #2
 8005fb0:	e088      	b.n	80060c4 <HAL_TIM_IC_ConfigChannel+0x130>
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d11b      	bne.n	8005ff8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6818      	ldr	r0, [r3, #0]
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	6819      	ldr	r1, [r3, #0]
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	685a      	ldr	r2, [r3, #4]
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	f000 fe28 	bl	8006c24 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	699a      	ldr	r2, [r3, #24]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f022 020c 	bic.w	r2, r2, #12
 8005fe2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	6999      	ldr	r1, [r3, #24]
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	689a      	ldr	r2, [r3, #8]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	430a      	orrs	r2, r1
 8005ff4:	619a      	str	r2, [r3, #24]
 8005ff6:	e060      	b.n	80060ba <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2b04      	cmp	r3, #4
 8005ffc:	d11c      	bne.n	8006038 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6818      	ldr	r0, [r3, #0]
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	6819      	ldr	r1, [r3, #0]
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	685a      	ldr	r2, [r3, #4]
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	f000 feac 	bl	8006d6a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	699a      	ldr	r2, [r3, #24]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006020:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	6999      	ldr	r1, [r3, #24]
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	021a      	lsls	r2, r3, #8
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	430a      	orrs	r2, r1
 8006034:	619a      	str	r2, [r3, #24]
 8006036:	e040      	b.n	80060ba <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2b08      	cmp	r3, #8
 800603c:	d11b      	bne.n	8006076 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	6818      	ldr	r0, [r3, #0]
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	6819      	ldr	r1, [r3, #0]
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	685a      	ldr	r2, [r3, #4]
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	f000 fef9 	bl	8006e44 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	69da      	ldr	r2, [r3, #28]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f022 020c 	bic.w	r2, r2, #12
 8006060:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	69d9      	ldr	r1, [r3, #28]
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	689a      	ldr	r2, [r3, #8]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	430a      	orrs	r2, r1
 8006072:	61da      	str	r2, [r3, #28]
 8006074:	e021      	b.n	80060ba <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2b0c      	cmp	r3, #12
 800607a:	d11c      	bne.n	80060b6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6818      	ldr	r0, [r3, #0]
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	6819      	ldr	r1, [r3, #0]
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	685a      	ldr	r2, [r3, #4]
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	f000 ff16 	bl	8006ebc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	69da      	ldr	r2, [r3, #28]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800609e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	69d9      	ldr	r1, [r3, #28]
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	021a      	lsls	r2, r3, #8
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	430a      	orrs	r2, r1
 80060b2:	61da      	str	r2, [r3, #28]
 80060b4:	e001      	b.n	80060ba <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2200      	movs	r2, #0
 80060be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80060c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3718      	adds	r7, #24
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b086      	sub	sp, #24
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060d8:	2300      	movs	r3, #0
 80060da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d101      	bne.n	80060ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80060e6:	2302      	movs	r3, #2
 80060e8:	e0ae      	b.n	8006248 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2201      	movs	r2, #1
 80060ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2b0c      	cmp	r3, #12
 80060f6:	f200 809f 	bhi.w	8006238 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80060fa:	a201      	add	r2, pc, #4	; (adr r2, 8006100 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80060fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006100:	08006135 	.word	0x08006135
 8006104:	08006239 	.word	0x08006239
 8006108:	08006239 	.word	0x08006239
 800610c:	08006239 	.word	0x08006239
 8006110:	08006175 	.word	0x08006175
 8006114:	08006239 	.word	0x08006239
 8006118:	08006239 	.word	0x08006239
 800611c:	08006239 	.word	0x08006239
 8006120:	080061b7 	.word	0x080061b7
 8006124:	08006239 	.word	0x08006239
 8006128:	08006239 	.word	0x08006239
 800612c:	08006239 	.word	0x08006239
 8006130:	080061f7 	.word	0x080061f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68b9      	ldr	r1, [r7, #8]
 800613a:	4618      	mov	r0, r3
 800613c:	f000 fb30 	bl	80067a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	699a      	ldr	r2, [r3, #24]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f042 0208 	orr.w	r2, r2, #8
 800614e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	699a      	ldr	r2, [r3, #24]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f022 0204 	bic.w	r2, r2, #4
 800615e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	6999      	ldr	r1, [r3, #24]
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	691a      	ldr	r2, [r3, #16]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	430a      	orrs	r2, r1
 8006170:	619a      	str	r2, [r3, #24]
      break;
 8006172:	e064      	b.n	800623e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	68b9      	ldr	r1, [r7, #8]
 800617a:	4618      	mov	r0, r3
 800617c:	f000 fb80 	bl	8006880 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	699a      	ldr	r2, [r3, #24]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800618e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	699a      	ldr	r2, [r3, #24]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800619e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	6999      	ldr	r1, [r3, #24]
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	021a      	lsls	r2, r3, #8
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	430a      	orrs	r2, r1
 80061b2:	619a      	str	r2, [r3, #24]
      break;
 80061b4:	e043      	b.n	800623e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	68b9      	ldr	r1, [r7, #8]
 80061bc:	4618      	mov	r0, r3
 80061be:	f000 fbd5 	bl	800696c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	69da      	ldr	r2, [r3, #28]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f042 0208 	orr.w	r2, r2, #8
 80061d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	69da      	ldr	r2, [r3, #28]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f022 0204 	bic.w	r2, r2, #4
 80061e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	69d9      	ldr	r1, [r3, #28]
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	691a      	ldr	r2, [r3, #16]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	430a      	orrs	r2, r1
 80061f2:	61da      	str	r2, [r3, #28]
      break;
 80061f4:	e023      	b.n	800623e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	68b9      	ldr	r1, [r7, #8]
 80061fc:	4618      	mov	r0, r3
 80061fe:	f000 fc29 	bl	8006a54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	69da      	ldr	r2, [r3, #28]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006210:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	69da      	ldr	r2, [r3, #28]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006220:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	69d9      	ldr	r1, [r3, #28]
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	691b      	ldr	r3, [r3, #16]
 800622c:	021a      	lsls	r2, r3, #8
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	430a      	orrs	r2, r1
 8006234:	61da      	str	r2, [r3, #28]
      break;
 8006236:	e002      	b.n	800623e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	75fb      	strb	r3, [r7, #23]
      break;
 800623c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2200      	movs	r2, #0
 8006242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006246:	7dfb      	ldrb	r3, [r7, #23]
}
 8006248:	4618      	mov	r0, r3
 800624a:	3718      	adds	r7, #24
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800625a:	2300      	movs	r3, #0
 800625c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006264:	2b01      	cmp	r3, #1
 8006266:	d101      	bne.n	800626c <HAL_TIM_ConfigClockSource+0x1c>
 8006268:	2302      	movs	r3, #2
 800626a:	e0b4      	b.n	80063d6 <HAL_TIM_ConfigClockSource+0x186>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2202      	movs	r2, #2
 8006278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800628a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006292:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	68ba      	ldr	r2, [r7, #8]
 800629a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062a4:	d03e      	beq.n	8006324 <HAL_TIM_ConfigClockSource+0xd4>
 80062a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062aa:	f200 8087 	bhi.w	80063bc <HAL_TIM_ConfigClockSource+0x16c>
 80062ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062b2:	f000 8086 	beq.w	80063c2 <HAL_TIM_ConfigClockSource+0x172>
 80062b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062ba:	d87f      	bhi.n	80063bc <HAL_TIM_ConfigClockSource+0x16c>
 80062bc:	2b70      	cmp	r3, #112	; 0x70
 80062be:	d01a      	beq.n	80062f6 <HAL_TIM_ConfigClockSource+0xa6>
 80062c0:	2b70      	cmp	r3, #112	; 0x70
 80062c2:	d87b      	bhi.n	80063bc <HAL_TIM_ConfigClockSource+0x16c>
 80062c4:	2b60      	cmp	r3, #96	; 0x60
 80062c6:	d050      	beq.n	800636a <HAL_TIM_ConfigClockSource+0x11a>
 80062c8:	2b60      	cmp	r3, #96	; 0x60
 80062ca:	d877      	bhi.n	80063bc <HAL_TIM_ConfigClockSource+0x16c>
 80062cc:	2b50      	cmp	r3, #80	; 0x50
 80062ce:	d03c      	beq.n	800634a <HAL_TIM_ConfigClockSource+0xfa>
 80062d0:	2b50      	cmp	r3, #80	; 0x50
 80062d2:	d873      	bhi.n	80063bc <HAL_TIM_ConfigClockSource+0x16c>
 80062d4:	2b40      	cmp	r3, #64	; 0x40
 80062d6:	d058      	beq.n	800638a <HAL_TIM_ConfigClockSource+0x13a>
 80062d8:	2b40      	cmp	r3, #64	; 0x40
 80062da:	d86f      	bhi.n	80063bc <HAL_TIM_ConfigClockSource+0x16c>
 80062dc:	2b30      	cmp	r3, #48	; 0x30
 80062de:	d064      	beq.n	80063aa <HAL_TIM_ConfigClockSource+0x15a>
 80062e0:	2b30      	cmp	r3, #48	; 0x30
 80062e2:	d86b      	bhi.n	80063bc <HAL_TIM_ConfigClockSource+0x16c>
 80062e4:	2b20      	cmp	r3, #32
 80062e6:	d060      	beq.n	80063aa <HAL_TIM_ConfigClockSource+0x15a>
 80062e8:	2b20      	cmp	r3, #32
 80062ea:	d867      	bhi.n	80063bc <HAL_TIM_ConfigClockSource+0x16c>
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d05c      	beq.n	80063aa <HAL_TIM_ConfigClockSource+0x15a>
 80062f0:	2b10      	cmp	r3, #16
 80062f2:	d05a      	beq.n	80063aa <HAL_TIM_ConfigClockSource+0x15a>
 80062f4:	e062      	b.n	80063bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6818      	ldr	r0, [r3, #0]
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	6899      	ldr	r1, [r3, #8]
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	685a      	ldr	r2, [r3, #4]
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	f000 fe31 	bl	8006f6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006318:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	68ba      	ldr	r2, [r7, #8]
 8006320:	609a      	str	r2, [r3, #8]
      break;
 8006322:	e04f      	b.n	80063c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6818      	ldr	r0, [r3, #0]
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	6899      	ldr	r1, [r3, #8]
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	685a      	ldr	r2, [r3, #4]
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	f000 fe1a 	bl	8006f6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	689a      	ldr	r2, [r3, #8]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006346:	609a      	str	r2, [r3, #8]
      break;
 8006348:	e03c      	b.n	80063c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6818      	ldr	r0, [r3, #0]
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	6859      	ldr	r1, [r3, #4]
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	68db      	ldr	r3, [r3, #12]
 8006356:	461a      	mov	r2, r3
 8006358:	f000 fcd8 	bl	8006d0c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	2150      	movs	r1, #80	; 0x50
 8006362:	4618      	mov	r0, r3
 8006364:	f000 fde7 	bl	8006f36 <TIM_ITRx_SetConfig>
      break;
 8006368:	e02c      	b.n	80063c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6818      	ldr	r0, [r3, #0]
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	6859      	ldr	r1, [r3, #4]
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	68db      	ldr	r3, [r3, #12]
 8006376:	461a      	mov	r2, r3
 8006378:	f000 fd34 	bl	8006de4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2160      	movs	r1, #96	; 0x60
 8006382:	4618      	mov	r0, r3
 8006384:	f000 fdd7 	bl	8006f36 <TIM_ITRx_SetConfig>
      break;
 8006388:	e01c      	b.n	80063c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6818      	ldr	r0, [r3, #0]
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	6859      	ldr	r1, [r3, #4]
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	461a      	mov	r2, r3
 8006398:	f000 fcb8 	bl	8006d0c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2140      	movs	r1, #64	; 0x40
 80063a2:	4618      	mov	r0, r3
 80063a4:	f000 fdc7 	bl	8006f36 <TIM_ITRx_SetConfig>
      break;
 80063a8:	e00c      	b.n	80063c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4619      	mov	r1, r3
 80063b4:	4610      	mov	r0, r2
 80063b6:	f000 fdbe 	bl	8006f36 <TIM_ITRx_SetConfig>
      break;
 80063ba:	e003      	b.n	80063c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	73fb      	strb	r3, [r7, #15]
      break;
 80063c0:	e000      	b.n	80063c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80063c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80063d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3710      	adds	r7, #16
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}

080063de <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80063de:	b580      	push	{r7, lr}
 80063e0:	b082      	sub	sp, #8
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
 80063e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d101      	bne.n	80063f6 <HAL_TIM_SlaveConfigSynchro+0x18>
 80063f2:	2302      	movs	r3, #2
 80063f4:	e031      	b.n	800645a <HAL_TIM_SlaveConfigSynchro+0x7c>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2201      	movs	r2, #1
 80063fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2202      	movs	r2, #2
 8006402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006406:	6839      	ldr	r1, [r7, #0]
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f000 fb79 	bl	8006b00 <TIM_SlaveTimer_SetConfig>
 800640e:	4603      	mov	r3, r0
 8006410:	2b00      	cmp	r3, #0
 8006412:	d009      	beq.n	8006428 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	e018      	b.n	800645a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68da      	ldr	r2, [r3, #12]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006436:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	68da      	ldr	r2, [r3, #12]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006446:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2201      	movs	r2, #1
 800644c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006458:	2300      	movs	r3, #0
}
 800645a:	4618      	mov	r0, r3
 800645c:	3708      	adds	r7, #8
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}

08006462 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006462:	b480      	push	{r7}
 8006464:	b083      	sub	sp, #12
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800646a:	bf00      	nop
 800646c:	370c      	adds	r7, #12
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr

08006476 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006476:	b480      	push	{r7}
 8006478:	b083      	sub	sp, #12
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800647e:	bf00      	nop
 8006480:	370c      	adds	r7, #12
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr

0800648a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800648a:	b480      	push	{r7}
 800648c:	b083      	sub	sp, #12
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006492:	bf00      	nop
 8006494:	370c      	adds	r7, #12
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr

0800649e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800649e:	b580      	push	{r7, lr}
 80064a0:	b084      	sub	sp, #16
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064aa:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d107      	bne.n	80064c6 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2201      	movs	r2, #1
 80064ba:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064c4:	e02a      	b.n	800651c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d107      	bne.n	80064e0 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2202      	movs	r2, #2
 80064d4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2201      	movs	r2, #1
 80064da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064de:	e01d      	b.n	800651c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d107      	bne.n	80064fa <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2204      	movs	r2, #4
 80064ee:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2201      	movs	r2, #1
 80064f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064f8:	e010      	b.n	800651c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	429a      	cmp	r2, r3
 8006502:	d107      	bne.n	8006514 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2208      	movs	r2, #8
 8006508:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2201      	movs	r2, #1
 800650e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006512:	e003      	b.n	800651c <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800651c:	68f8      	ldr	r0, [r7, #12]
 800651e:	f7ff ffb4 	bl	800648a <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2200      	movs	r2, #0
 8006526:	771a      	strb	r2, [r3, #28]
}
 8006528:	bf00      	nop
 800652a:	3710      	adds	r7, #16
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}

08006530 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800653c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	429a      	cmp	r2, r3
 8006546:	d10f      	bne.n	8006568 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2201      	movs	r2, #1
 800654c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	69db      	ldr	r3, [r3, #28]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d146      	bne.n	80065e4 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2201      	movs	r2, #1
 800655a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2201      	movs	r2, #1
 8006562:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006566:	e03d      	b.n	80065e4 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	429a      	cmp	r2, r3
 8006570:	d10f      	bne.n	8006592 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2202      	movs	r2, #2
 8006576:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	69db      	ldr	r3, [r3, #28]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d131      	bne.n	80065e4 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2201      	movs	r2, #1
 8006584:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006590:	e028      	b.n	80065e4 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	429a      	cmp	r2, r3
 800659a:	d10f      	bne.n	80065bc <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2204      	movs	r2, #4
 80065a0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	69db      	ldr	r3, [r3, #28]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d11c      	bne.n	80065e4 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2201      	movs	r2, #1
 80065ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2201      	movs	r2, #1
 80065b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065ba:	e013      	b.n	80065e4 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d10e      	bne.n	80065e4 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2208      	movs	r2, #8
 80065ca:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	69db      	ldr	r3, [r3, #28]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d107      	bne.n	80065e4 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2201      	movs	r2, #1
 80065d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 80065e4:	68f8      	ldr	r0, [r7, #12]
 80065e6:	f7ff ff3c 	bl	8006462 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2200      	movs	r2, #0
 80065ee:	771a      	strb	r2, [r3, #28]
}
 80065f0:	bf00      	nop
 80065f2:	3710      	adds	r7, #16
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006604:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	429a      	cmp	r2, r3
 800660e:	d103      	bne.n	8006618 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2201      	movs	r2, #1
 8006614:	771a      	strb	r2, [r3, #28]
 8006616:	e019      	b.n	800664c <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	429a      	cmp	r2, r3
 8006620:	d103      	bne.n	800662a <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2202      	movs	r2, #2
 8006626:	771a      	strb	r2, [r3, #28]
 8006628:	e010      	b.n	800664c <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	429a      	cmp	r2, r3
 8006632:	d103      	bne.n	800663c <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2204      	movs	r2, #4
 8006638:	771a      	strb	r2, [r3, #28]
 800663a:	e007      	b.n	800664c <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	429a      	cmp	r2, r3
 8006644:	d102      	bne.n	800664c <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2208      	movs	r2, #8
 800664a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800664c:	68f8      	ldr	r0, [r7, #12]
 800664e:	f7ff ff12 	bl	8006476 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2200      	movs	r2, #0
 8006656:	771a      	strb	r2, [r3, #28]
}
 8006658:	bf00      	nop
 800665a:	3710      	adds	r7, #16
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}

08006660 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006660:	b480      	push	{r7}
 8006662:	b085      	sub	sp, #20
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	4a40      	ldr	r2, [pc, #256]	; (8006774 <TIM_Base_SetConfig+0x114>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d013      	beq.n	80066a0 <TIM_Base_SetConfig+0x40>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800667e:	d00f      	beq.n	80066a0 <TIM_Base_SetConfig+0x40>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4a3d      	ldr	r2, [pc, #244]	; (8006778 <TIM_Base_SetConfig+0x118>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d00b      	beq.n	80066a0 <TIM_Base_SetConfig+0x40>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4a3c      	ldr	r2, [pc, #240]	; (800677c <TIM_Base_SetConfig+0x11c>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d007      	beq.n	80066a0 <TIM_Base_SetConfig+0x40>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	4a3b      	ldr	r2, [pc, #236]	; (8006780 <TIM_Base_SetConfig+0x120>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d003      	beq.n	80066a0 <TIM_Base_SetConfig+0x40>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	4a3a      	ldr	r2, [pc, #232]	; (8006784 <TIM_Base_SetConfig+0x124>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d108      	bne.n	80066b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4a2f      	ldr	r2, [pc, #188]	; (8006774 <TIM_Base_SetConfig+0x114>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d02b      	beq.n	8006712 <TIM_Base_SetConfig+0xb2>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066c0:	d027      	beq.n	8006712 <TIM_Base_SetConfig+0xb2>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a2c      	ldr	r2, [pc, #176]	; (8006778 <TIM_Base_SetConfig+0x118>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d023      	beq.n	8006712 <TIM_Base_SetConfig+0xb2>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a2b      	ldr	r2, [pc, #172]	; (800677c <TIM_Base_SetConfig+0x11c>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d01f      	beq.n	8006712 <TIM_Base_SetConfig+0xb2>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4a2a      	ldr	r2, [pc, #168]	; (8006780 <TIM_Base_SetConfig+0x120>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d01b      	beq.n	8006712 <TIM_Base_SetConfig+0xb2>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4a29      	ldr	r2, [pc, #164]	; (8006784 <TIM_Base_SetConfig+0x124>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d017      	beq.n	8006712 <TIM_Base_SetConfig+0xb2>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	4a28      	ldr	r2, [pc, #160]	; (8006788 <TIM_Base_SetConfig+0x128>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d013      	beq.n	8006712 <TIM_Base_SetConfig+0xb2>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	4a27      	ldr	r2, [pc, #156]	; (800678c <TIM_Base_SetConfig+0x12c>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d00f      	beq.n	8006712 <TIM_Base_SetConfig+0xb2>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	4a26      	ldr	r2, [pc, #152]	; (8006790 <TIM_Base_SetConfig+0x130>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d00b      	beq.n	8006712 <TIM_Base_SetConfig+0xb2>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	4a25      	ldr	r2, [pc, #148]	; (8006794 <TIM_Base_SetConfig+0x134>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d007      	beq.n	8006712 <TIM_Base_SetConfig+0xb2>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	4a24      	ldr	r2, [pc, #144]	; (8006798 <TIM_Base_SetConfig+0x138>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d003      	beq.n	8006712 <TIM_Base_SetConfig+0xb2>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4a23      	ldr	r2, [pc, #140]	; (800679c <TIM_Base_SetConfig+0x13c>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d108      	bne.n	8006724 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006718:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	68fa      	ldr	r2, [r7, #12]
 8006720:	4313      	orrs	r3, r2
 8006722:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	695b      	ldr	r3, [r3, #20]
 800672e:	4313      	orrs	r3, r2
 8006730:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	68fa      	ldr	r2, [r7, #12]
 8006736:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	689a      	ldr	r2, [r3, #8]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4a0a      	ldr	r2, [pc, #40]	; (8006774 <TIM_Base_SetConfig+0x114>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d003      	beq.n	8006758 <TIM_Base_SetConfig+0xf8>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	4a0c      	ldr	r2, [pc, #48]	; (8006784 <TIM_Base_SetConfig+0x124>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d103      	bne.n	8006760 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	691a      	ldr	r2, [r3, #16]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	615a      	str	r2, [r3, #20]
}
 8006766:	bf00      	nop
 8006768:	3714      	adds	r7, #20
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr
 8006772:	bf00      	nop
 8006774:	40010000 	.word	0x40010000
 8006778:	40000400 	.word	0x40000400
 800677c:	40000800 	.word	0x40000800
 8006780:	40000c00 	.word	0x40000c00
 8006784:	40010400 	.word	0x40010400
 8006788:	40014000 	.word	0x40014000
 800678c:	40014400 	.word	0x40014400
 8006790:	40014800 	.word	0x40014800
 8006794:	40001800 	.word	0x40001800
 8006798:	40001c00 	.word	0x40001c00
 800679c:	40002000 	.word	0x40002000

080067a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b087      	sub	sp, #28
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a1b      	ldr	r3, [r3, #32]
 80067ae:	f023 0201 	bic.w	r2, r3, #1
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a1b      	ldr	r3, [r3, #32]
 80067ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	699b      	ldr	r3, [r3, #24]
 80067c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f023 0303 	bic.w	r3, r3, #3
 80067d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	68fa      	ldr	r2, [r7, #12]
 80067de:	4313      	orrs	r3, r2
 80067e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	f023 0302 	bic.w	r3, r3, #2
 80067e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	697a      	ldr	r2, [r7, #20]
 80067f0:	4313      	orrs	r3, r2
 80067f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	4a20      	ldr	r2, [pc, #128]	; (8006878 <TIM_OC1_SetConfig+0xd8>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d003      	beq.n	8006804 <TIM_OC1_SetConfig+0x64>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4a1f      	ldr	r2, [pc, #124]	; (800687c <TIM_OC1_SetConfig+0xdc>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d10c      	bne.n	800681e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	f023 0308 	bic.w	r3, r3, #8
 800680a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	68db      	ldr	r3, [r3, #12]
 8006810:	697a      	ldr	r2, [r7, #20]
 8006812:	4313      	orrs	r3, r2
 8006814:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	f023 0304 	bic.w	r3, r3, #4
 800681c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4a15      	ldr	r2, [pc, #84]	; (8006878 <TIM_OC1_SetConfig+0xd8>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d003      	beq.n	800682e <TIM_OC1_SetConfig+0x8e>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a14      	ldr	r2, [pc, #80]	; (800687c <TIM_OC1_SetConfig+0xdc>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d111      	bne.n	8006852 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006834:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800683c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	695b      	ldr	r3, [r3, #20]
 8006842:	693a      	ldr	r2, [r7, #16]
 8006844:	4313      	orrs	r3, r2
 8006846:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	699b      	ldr	r3, [r3, #24]
 800684c:	693a      	ldr	r2, [r7, #16]
 800684e:	4313      	orrs	r3, r2
 8006850:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	693a      	ldr	r2, [r7, #16]
 8006856:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	685a      	ldr	r2, [r3, #4]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	697a      	ldr	r2, [r7, #20]
 800686a:	621a      	str	r2, [r3, #32]
}
 800686c:	bf00      	nop
 800686e:	371c      	adds	r7, #28
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr
 8006878:	40010000 	.word	0x40010000
 800687c:	40010400 	.word	0x40010400

08006880 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006880:	b480      	push	{r7}
 8006882:	b087      	sub	sp, #28
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6a1b      	ldr	r3, [r3, #32]
 800688e:	f023 0210 	bic.w	r2, r3, #16
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6a1b      	ldr	r3, [r3, #32]
 800689a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	699b      	ldr	r3, [r3, #24]
 80068a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	021b      	lsls	r3, r3, #8
 80068be:	68fa      	ldr	r2, [r7, #12]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	f023 0320 	bic.w	r3, r3, #32
 80068ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	011b      	lsls	r3, r3, #4
 80068d2:	697a      	ldr	r2, [r7, #20]
 80068d4:	4313      	orrs	r3, r2
 80068d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	4a22      	ldr	r2, [pc, #136]	; (8006964 <TIM_OC2_SetConfig+0xe4>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d003      	beq.n	80068e8 <TIM_OC2_SetConfig+0x68>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	4a21      	ldr	r2, [pc, #132]	; (8006968 <TIM_OC2_SetConfig+0xe8>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d10d      	bne.n	8006904 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	68db      	ldr	r3, [r3, #12]
 80068f4:	011b      	lsls	r3, r3, #4
 80068f6:	697a      	ldr	r2, [r7, #20]
 80068f8:	4313      	orrs	r3, r2
 80068fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006902:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4a17      	ldr	r2, [pc, #92]	; (8006964 <TIM_OC2_SetConfig+0xe4>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d003      	beq.n	8006914 <TIM_OC2_SetConfig+0x94>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	4a16      	ldr	r2, [pc, #88]	; (8006968 <TIM_OC2_SetConfig+0xe8>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d113      	bne.n	800693c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800691a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006922:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	695b      	ldr	r3, [r3, #20]
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	693a      	ldr	r2, [r7, #16]
 800692c:	4313      	orrs	r3, r2
 800692e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	699b      	ldr	r3, [r3, #24]
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	693a      	ldr	r2, [r7, #16]
 8006938:	4313      	orrs	r3, r2
 800693a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	693a      	ldr	r2, [r7, #16]
 8006940:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	685a      	ldr	r2, [r3, #4]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	697a      	ldr	r2, [r7, #20]
 8006954:	621a      	str	r2, [r3, #32]
}
 8006956:	bf00      	nop
 8006958:	371c      	adds	r7, #28
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr
 8006962:	bf00      	nop
 8006964:	40010000 	.word	0x40010000
 8006968:	40010400 	.word	0x40010400

0800696c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800696c:	b480      	push	{r7}
 800696e:	b087      	sub	sp, #28
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6a1b      	ldr	r3, [r3, #32]
 800697a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a1b      	ldr	r3, [r3, #32]
 8006986:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	69db      	ldr	r3, [r3, #28]
 8006992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800699a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f023 0303 	bic.w	r3, r3, #3
 80069a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	68fa      	ldr	r2, [r7, #12]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	021b      	lsls	r3, r3, #8
 80069bc:	697a      	ldr	r2, [r7, #20]
 80069be:	4313      	orrs	r3, r2
 80069c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4a21      	ldr	r2, [pc, #132]	; (8006a4c <TIM_OC3_SetConfig+0xe0>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d003      	beq.n	80069d2 <TIM_OC3_SetConfig+0x66>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4a20      	ldr	r2, [pc, #128]	; (8006a50 <TIM_OC3_SetConfig+0xe4>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d10d      	bne.n	80069ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80069d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	021b      	lsls	r3, r3, #8
 80069e0:	697a      	ldr	r2, [r7, #20]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80069ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4a16      	ldr	r2, [pc, #88]	; (8006a4c <TIM_OC3_SetConfig+0xe0>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d003      	beq.n	80069fe <TIM_OC3_SetConfig+0x92>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4a15      	ldr	r2, [pc, #84]	; (8006a50 <TIM_OC3_SetConfig+0xe4>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d113      	bne.n	8006a26 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	695b      	ldr	r3, [r3, #20]
 8006a12:	011b      	lsls	r3, r3, #4
 8006a14:	693a      	ldr	r2, [r7, #16]
 8006a16:	4313      	orrs	r3, r2
 8006a18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	699b      	ldr	r3, [r3, #24]
 8006a1e:	011b      	lsls	r3, r3, #4
 8006a20:	693a      	ldr	r2, [r7, #16]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	693a      	ldr	r2, [r7, #16]
 8006a2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	68fa      	ldr	r2, [r7, #12]
 8006a30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	685a      	ldr	r2, [r3, #4]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	697a      	ldr	r2, [r7, #20]
 8006a3e:	621a      	str	r2, [r3, #32]
}
 8006a40:	bf00      	nop
 8006a42:	371c      	adds	r7, #28
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr
 8006a4c:	40010000 	.word	0x40010000
 8006a50:	40010400 	.word	0x40010400

08006a54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b087      	sub	sp, #28
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6a1b      	ldr	r3, [r3, #32]
 8006a62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6a1b      	ldr	r3, [r3, #32]
 8006a6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	69db      	ldr	r3, [r3, #28]
 8006a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	021b      	lsls	r3, r3, #8
 8006a92:	68fa      	ldr	r2, [r7, #12]
 8006a94:	4313      	orrs	r3, r2
 8006a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	031b      	lsls	r3, r3, #12
 8006aa6:	693a      	ldr	r2, [r7, #16]
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	4a12      	ldr	r2, [pc, #72]	; (8006af8 <TIM_OC4_SetConfig+0xa4>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d003      	beq.n	8006abc <TIM_OC4_SetConfig+0x68>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	4a11      	ldr	r2, [pc, #68]	; (8006afc <TIM_OC4_SetConfig+0xa8>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d109      	bne.n	8006ad0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ac2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	695b      	ldr	r3, [r3, #20]
 8006ac8:	019b      	lsls	r3, r3, #6
 8006aca:	697a      	ldr	r2, [r7, #20]
 8006acc:	4313      	orrs	r3, r2
 8006ace:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	697a      	ldr	r2, [r7, #20]
 8006ad4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	68fa      	ldr	r2, [r7, #12]
 8006ada:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	685a      	ldr	r2, [r3, #4]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	693a      	ldr	r2, [r7, #16]
 8006ae8:	621a      	str	r2, [r3, #32]
}
 8006aea:	bf00      	nop
 8006aec:	371c      	adds	r7, #28
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr
 8006af6:	bf00      	nop
 8006af8:	40010000 	.word	0x40010000
 8006afc:	40010400 	.word	0x40010400

08006b00 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b086      	sub	sp, #24
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b1c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	693a      	ldr	r2, [r7, #16]
 8006b24:	4313      	orrs	r3, r2
 8006b26:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	f023 0307 	bic.w	r3, r3, #7
 8006b2e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	693a      	ldr	r2, [r7, #16]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	693a      	ldr	r2, [r7, #16]
 8006b40:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	2b70      	cmp	r3, #112	; 0x70
 8006b48:	d01a      	beq.n	8006b80 <TIM_SlaveTimer_SetConfig+0x80>
 8006b4a:	2b70      	cmp	r3, #112	; 0x70
 8006b4c:	d860      	bhi.n	8006c10 <TIM_SlaveTimer_SetConfig+0x110>
 8006b4e:	2b60      	cmp	r3, #96	; 0x60
 8006b50:	d054      	beq.n	8006bfc <TIM_SlaveTimer_SetConfig+0xfc>
 8006b52:	2b60      	cmp	r3, #96	; 0x60
 8006b54:	d85c      	bhi.n	8006c10 <TIM_SlaveTimer_SetConfig+0x110>
 8006b56:	2b50      	cmp	r3, #80	; 0x50
 8006b58:	d046      	beq.n	8006be8 <TIM_SlaveTimer_SetConfig+0xe8>
 8006b5a:	2b50      	cmp	r3, #80	; 0x50
 8006b5c:	d858      	bhi.n	8006c10 <TIM_SlaveTimer_SetConfig+0x110>
 8006b5e:	2b40      	cmp	r3, #64	; 0x40
 8006b60:	d019      	beq.n	8006b96 <TIM_SlaveTimer_SetConfig+0x96>
 8006b62:	2b40      	cmp	r3, #64	; 0x40
 8006b64:	d854      	bhi.n	8006c10 <TIM_SlaveTimer_SetConfig+0x110>
 8006b66:	2b30      	cmp	r3, #48	; 0x30
 8006b68:	d055      	beq.n	8006c16 <TIM_SlaveTimer_SetConfig+0x116>
 8006b6a:	2b30      	cmp	r3, #48	; 0x30
 8006b6c:	d850      	bhi.n	8006c10 <TIM_SlaveTimer_SetConfig+0x110>
 8006b6e:	2b20      	cmp	r3, #32
 8006b70:	d051      	beq.n	8006c16 <TIM_SlaveTimer_SetConfig+0x116>
 8006b72:	2b20      	cmp	r3, #32
 8006b74:	d84c      	bhi.n	8006c10 <TIM_SlaveTimer_SetConfig+0x110>
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d04d      	beq.n	8006c16 <TIM_SlaveTimer_SetConfig+0x116>
 8006b7a:	2b10      	cmp	r3, #16
 8006b7c:	d04b      	beq.n	8006c16 <TIM_SlaveTimer_SetConfig+0x116>
 8006b7e:	e047      	b.n	8006c10 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6818      	ldr	r0, [r3, #0]
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	68d9      	ldr	r1, [r3, #12]
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	689a      	ldr	r2, [r3, #8]
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	691b      	ldr	r3, [r3, #16]
 8006b90:	f000 f9ec 	bl	8006f6c <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8006b94:	e040      	b.n	8006c18 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2b05      	cmp	r3, #5
 8006b9c:	d101      	bne.n	8006ba2 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e03b      	b.n	8006c1a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	6a1b      	ldr	r3, [r3, #32]
 8006ba8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	6a1a      	ldr	r2, [r3, #32]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f022 0201 	bic.w	r2, r2, #1
 8006bb8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	699b      	ldr	r3, [r3, #24]
 8006bc0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bc8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	691b      	ldr	r3, [r3, #16]
 8006bce:	011b      	lsls	r3, r3, #4
 8006bd0:	68ba      	ldr	r2, [r7, #8]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	68ba      	ldr	r2, [r7, #8]
 8006bdc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	68fa      	ldr	r2, [r7, #12]
 8006be4:	621a      	str	r2, [r3, #32]
      break;
 8006be6:	e017      	b.n	8006c18 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6818      	ldr	r0, [r3, #0]
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	6899      	ldr	r1, [r3, #8]
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	691b      	ldr	r3, [r3, #16]
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	f000 f889 	bl	8006d0c <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8006bfa:	e00d      	b.n	8006c18 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6818      	ldr	r0, [r3, #0]
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	6899      	ldr	r1, [r3, #8]
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	691b      	ldr	r3, [r3, #16]
 8006c08:	461a      	mov	r2, r3
 8006c0a:	f000 f8eb 	bl	8006de4 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8006c0e:	e003      	b.n	8006c18 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8006c10:	2301      	movs	r3, #1
 8006c12:	75fb      	strb	r3, [r7, #23]
      break;
 8006c14:	e000      	b.n	8006c18 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8006c16:	bf00      	nop
  }

  return status;
 8006c18:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3718      	adds	r7, #24
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
	...

08006c24 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b087      	sub	sp, #28
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	60f8      	str	r0, [r7, #12]
 8006c2c:	60b9      	str	r1, [r7, #8]
 8006c2e:	607a      	str	r2, [r7, #4]
 8006c30:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	6a1b      	ldr	r3, [r3, #32]
 8006c36:	f023 0201 	bic.w	r2, r3, #1
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	699b      	ldr	r3, [r3, #24]
 8006c42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	6a1b      	ldr	r3, [r3, #32]
 8006c48:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	4a28      	ldr	r2, [pc, #160]	; (8006cf0 <TIM_TI1_SetConfig+0xcc>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d01b      	beq.n	8006c8a <TIM_TI1_SetConfig+0x66>
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c58:	d017      	beq.n	8006c8a <TIM_TI1_SetConfig+0x66>
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	4a25      	ldr	r2, [pc, #148]	; (8006cf4 <TIM_TI1_SetConfig+0xd0>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d013      	beq.n	8006c8a <TIM_TI1_SetConfig+0x66>
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	4a24      	ldr	r2, [pc, #144]	; (8006cf8 <TIM_TI1_SetConfig+0xd4>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d00f      	beq.n	8006c8a <TIM_TI1_SetConfig+0x66>
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	4a23      	ldr	r2, [pc, #140]	; (8006cfc <TIM_TI1_SetConfig+0xd8>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d00b      	beq.n	8006c8a <TIM_TI1_SetConfig+0x66>
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	4a22      	ldr	r2, [pc, #136]	; (8006d00 <TIM_TI1_SetConfig+0xdc>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d007      	beq.n	8006c8a <TIM_TI1_SetConfig+0x66>
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	4a21      	ldr	r2, [pc, #132]	; (8006d04 <TIM_TI1_SetConfig+0xe0>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d003      	beq.n	8006c8a <TIM_TI1_SetConfig+0x66>
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	4a20      	ldr	r2, [pc, #128]	; (8006d08 <TIM_TI1_SetConfig+0xe4>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d101      	bne.n	8006c8e <TIM_TI1_SetConfig+0x6a>
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e000      	b.n	8006c90 <TIM_TI1_SetConfig+0x6c>
 8006c8e:	2300      	movs	r3, #0
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d008      	beq.n	8006ca6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	f023 0303 	bic.w	r3, r3, #3
 8006c9a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006c9c:	697a      	ldr	r2, [r7, #20]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	617b      	str	r3, [r7, #20]
 8006ca4:	e003      	b.n	8006cae <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	f043 0301 	orr.w	r3, r3, #1
 8006cac:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006cb4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	011b      	lsls	r3, r3, #4
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	697a      	ldr	r2, [r7, #20]
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	f023 030a 	bic.w	r3, r3, #10
 8006cc8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	f003 030a 	and.w	r3, r3, #10
 8006cd0:	693a      	ldr	r2, [r7, #16]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	697a      	ldr	r2, [r7, #20]
 8006cda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	693a      	ldr	r2, [r7, #16]
 8006ce0:	621a      	str	r2, [r3, #32]
}
 8006ce2:	bf00      	nop
 8006ce4:	371c      	adds	r7, #28
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop
 8006cf0:	40010000 	.word	0x40010000
 8006cf4:	40000400 	.word	0x40000400
 8006cf8:	40000800 	.word	0x40000800
 8006cfc:	40000c00 	.word	0x40000c00
 8006d00:	40010400 	.word	0x40010400
 8006d04:	40014000 	.word	0x40014000
 8006d08:	40001800 	.word	0x40001800

08006d0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b087      	sub	sp, #28
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	6a1b      	ldr	r3, [r3, #32]
 8006d1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	6a1b      	ldr	r3, [r3, #32]
 8006d22:	f023 0201 	bic.w	r2, r3, #1
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	699b      	ldr	r3, [r3, #24]
 8006d2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	011b      	lsls	r3, r3, #4
 8006d3c:	693a      	ldr	r2, [r7, #16]
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	f023 030a 	bic.w	r3, r3, #10
 8006d48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d4a:	697a      	ldr	r2, [r7, #20]
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	693a      	ldr	r2, [r7, #16]
 8006d56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	697a      	ldr	r2, [r7, #20]
 8006d5c:	621a      	str	r2, [r3, #32]
}
 8006d5e:	bf00      	nop
 8006d60:	371c      	adds	r7, #28
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr

08006d6a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006d6a:	b480      	push	{r7}
 8006d6c:	b087      	sub	sp, #28
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	60f8      	str	r0, [r7, #12]
 8006d72:	60b9      	str	r1, [r7, #8]
 8006d74:	607a      	str	r2, [r7, #4]
 8006d76:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6a1b      	ldr	r3, [r3, #32]
 8006d7c:	f023 0210 	bic.w	r2, r3, #16
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	699b      	ldr	r3, [r3, #24]
 8006d88:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	6a1b      	ldr	r3, [r3, #32]
 8006d8e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d96:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	021b      	lsls	r3, r3, #8
 8006d9c:	697a      	ldr	r2, [r7, #20]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006da8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	031b      	lsls	r3, r3, #12
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	697a      	ldr	r2, [r7, #20]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006dbc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	011b      	lsls	r3, r3, #4
 8006dc2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006dc6:	693a      	ldr	r2, [r7, #16]
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	697a      	ldr	r2, [r7, #20]
 8006dd0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	693a      	ldr	r2, [r7, #16]
 8006dd6:	621a      	str	r2, [r3, #32]
}
 8006dd8:	bf00      	nop
 8006dda:	371c      	adds	r7, #28
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b087      	sub	sp, #28
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	60b9      	str	r1, [r7, #8]
 8006dee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	6a1b      	ldr	r3, [r3, #32]
 8006df4:	f023 0210 	bic.w	r2, r3, #16
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	699b      	ldr	r3, [r3, #24]
 8006e00:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	6a1b      	ldr	r3, [r3, #32]
 8006e06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e0e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	031b      	lsls	r3, r3, #12
 8006e14:	697a      	ldr	r2, [r7, #20]
 8006e16:	4313      	orrs	r3, r2
 8006e18:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e20:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	011b      	lsls	r3, r3, #4
 8006e26:	693a      	ldr	r2, [r7, #16]
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	697a      	ldr	r2, [r7, #20]
 8006e30:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	693a      	ldr	r2, [r7, #16]
 8006e36:	621a      	str	r2, [r3, #32]
}
 8006e38:	bf00      	nop
 8006e3a:	371c      	adds	r7, #28
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b087      	sub	sp, #28
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	607a      	str	r2, [r7, #4]
 8006e50:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	6a1b      	ldr	r3, [r3, #32]
 8006e56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	69db      	ldr	r3, [r3, #28]
 8006e62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	6a1b      	ldr	r3, [r3, #32]
 8006e68:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	f023 0303 	bic.w	r3, r3, #3
 8006e70:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006e72:	697a      	ldr	r2, [r7, #20]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	4313      	orrs	r3, r2
 8006e78:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e80:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	011b      	lsls	r3, r3, #4
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	697a      	ldr	r2, [r7, #20]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006e94:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	021b      	lsls	r3, r3, #8
 8006e9a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006e9e:	693a      	ldr	r2, [r7, #16]
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	697a      	ldr	r2, [r7, #20]
 8006ea8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	693a      	ldr	r2, [r7, #16]
 8006eae:	621a      	str	r2, [r3, #32]
}
 8006eb0:	bf00      	nop
 8006eb2:	371c      	adds	r7, #28
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr

08006ebc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b087      	sub	sp, #28
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	60f8      	str	r0, [r7, #12]
 8006ec4:	60b9      	str	r1, [r7, #8]
 8006ec6:	607a      	str	r2, [r7, #4]
 8006ec8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	6a1b      	ldr	r3, [r3, #32]
 8006ece:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	69db      	ldr	r3, [r3, #28]
 8006eda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6a1b      	ldr	r3, [r3, #32]
 8006ee0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ee8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	021b      	lsls	r3, r3, #8
 8006eee:	697a      	ldr	r2, [r7, #20]
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006efa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	031b      	lsls	r3, r3, #12
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	697a      	ldr	r2, [r7, #20]
 8006f04:	4313      	orrs	r3, r2
 8006f06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006f0e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	031b      	lsls	r3, r3, #12
 8006f14:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006f18:	693a      	ldr	r2, [r7, #16]
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	697a      	ldr	r2, [r7, #20]
 8006f22:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	693a      	ldr	r2, [r7, #16]
 8006f28:	621a      	str	r2, [r3, #32]
}
 8006f2a:	bf00      	nop
 8006f2c:	371c      	adds	r7, #28
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr

08006f36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f36:	b480      	push	{r7}
 8006f38:	b085      	sub	sp, #20
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6078      	str	r0, [r7, #4]
 8006f3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f4e:	683a      	ldr	r2, [r7, #0]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	4313      	orrs	r3, r2
 8006f54:	f043 0307 	orr.w	r3, r3, #7
 8006f58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	68fa      	ldr	r2, [r7, #12]
 8006f5e:	609a      	str	r2, [r3, #8]
}
 8006f60:	bf00      	nop
 8006f62:	3714      	adds	r7, #20
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b087      	sub	sp, #28
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	60f8      	str	r0, [r7, #12]
 8006f74:	60b9      	str	r1, [r7, #8]
 8006f76:	607a      	str	r2, [r7, #4]
 8006f78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	021a      	lsls	r2, r3, #8
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	431a      	orrs	r2, r3
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	4313      	orrs	r3, r2
 8006f94:	697a      	ldr	r2, [r7, #20]
 8006f96:	4313      	orrs	r3, r2
 8006f98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	697a      	ldr	r2, [r7, #20]
 8006f9e:	609a      	str	r2, [r3, #8]
}
 8006fa0:	bf00      	nop
 8006fa2:	371c      	adds	r7, #28
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr

08006fac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b087      	sub	sp, #28
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	60f8      	str	r0, [r7, #12]
 8006fb4:	60b9      	str	r1, [r7, #8]
 8006fb6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	f003 031f 	and.w	r3, r3, #31
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8006fc4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	6a1a      	ldr	r2, [r3, #32]
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	43db      	mvns	r3, r3
 8006fce:	401a      	ands	r2, r3
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	6a1a      	ldr	r2, [r3, #32]
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	f003 031f 	and.w	r3, r3, #31
 8006fde:	6879      	ldr	r1, [r7, #4]
 8006fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8006fe4:	431a      	orrs	r2, r3
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	621a      	str	r2, [r3, #32]
}
 8006fea:	bf00      	nop
 8006fec:	371c      	adds	r7, #28
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr
	...

08006ff8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b085      	sub	sp, #20
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007008:	2b01      	cmp	r3, #1
 800700a:	d101      	bne.n	8007010 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800700c:	2302      	movs	r3, #2
 800700e:	e05a      	b.n	80070c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2201      	movs	r2, #1
 8007014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2202      	movs	r2, #2
 800701c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007036:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	68fa      	ldr	r2, [r7, #12]
 800703e:	4313      	orrs	r3, r2
 8007040:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	68fa      	ldr	r2, [r7, #12]
 8007048:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a21      	ldr	r2, [pc, #132]	; (80070d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d022      	beq.n	800709a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800705c:	d01d      	beq.n	800709a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a1d      	ldr	r2, [pc, #116]	; (80070d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d018      	beq.n	800709a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a1b      	ldr	r2, [pc, #108]	; (80070dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d013      	beq.n	800709a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a1a      	ldr	r2, [pc, #104]	; (80070e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d00e      	beq.n	800709a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a18      	ldr	r2, [pc, #96]	; (80070e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d009      	beq.n	800709a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a17      	ldr	r2, [pc, #92]	; (80070e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d004      	beq.n	800709a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a15      	ldr	r2, [pc, #84]	; (80070ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d10c      	bne.n	80070b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	68ba      	ldr	r2, [r7, #8]
 80070a8:	4313      	orrs	r3, r2
 80070aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	68ba      	ldr	r2, [r7, #8]
 80070b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070c4:	2300      	movs	r3, #0
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3714      	adds	r7, #20
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr
 80070d2:	bf00      	nop
 80070d4:	40010000 	.word	0x40010000
 80070d8:	40000400 	.word	0x40000400
 80070dc:	40000800 	.word	0x40000800
 80070e0:	40000c00 	.word	0x40000c00
 80070e4:	40010400 	.word	0x40010400
 80070e8:	40014000 	.word	0x40014000
 80070ec:	40001800 	.word	0x40001800

080070f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b082      	sub	sp, #8
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d101      	bne.n	8007102 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	e03f      	b.n	8007182 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007108:	b2db      	uxtb	r3, r3
 800710a:	2b00      	cmp	r3, #0
 800710c:	d106      	bne.n	800711c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f7fc fa88 	bl	800362c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2224      	movs	r2, #36	; 0x24
 8007120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	68da      	ldr	r2, [r3, #12]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007132:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 ff57 	bl	8007fe8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	691a      	ldr	r2, [r3, #16]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007148:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	695a      	ldr	r2, [r3, #20]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007158:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	68da      	ldr	r2, [r3, #12]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007168:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2200      	movs	r2, #0
 800716e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2220      	movs	r2, #32
 8007174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2220      	movs	r2, #32
 800717c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007180:	2300      	movs	r3, #0
}
 8007182:	4618      	mov	r0, r3
 8007184:	3708      	adds	r7, #8
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
	...

0800718c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b08c      	sub	sp, #48	; 0x30
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	4613      	mov	r3, r2
 8007198:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	2b20      	cmp	r3, #32
 80071a4:	d165      	bne.n	8007272 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d002      	beq.n	80071b2 <HAL_UART_Transmit_DMA+0x26>
 80071ac:	88fb      	ldrh	r3, [r7, #6]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d101      	bne.n	80071b6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	e05e      	b.n	8007274 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d101      	bne.n	80071c4 <HAL_UART_Transmit_DMA+0x38>
 80071c0:	2302      	movs	r3, #2
 80071c2:	e057      	b.n	8007274 <HAL_UART_Transmit_DMA+0xe8>
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80071cc:	68ba      	ldr	r2, [r7, #8]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	88fa      	ldrh	r2, [r7, #6]
 80071d6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	88fa      	ldrh	r2, [r7, #6]
 80071dc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2200      	movs	r2, #0
 80071e2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2221      	movs	r2, #33	; 0x21
 80071e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071f0:	4a22      	ldr	r2, [pc, #136]	; (800727c <HAL_UART_Transmit_DMA+0xf0>)
 80071f2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071f8:	4a21      	ldr	r2, [pc, #132]	; (8007280 <HAL_UART_Transmit_DMA+0xf4>)
 80071fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007200:	4a20      	ldr	r2, [pc, #128]	; (8007284 <HAL_UART_Transmit_DMA+0xf8>)
 8007202:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007208:	2200      	movs	r2, #0
 800720a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800720c:	f107 0308 	add.w	r3, r7, #8
 8007210:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007218:	6819      	ldr	r1, [r3, #0]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	3304      	adds	r3, #4
 8007220:	461a      	mov	r2, r3
 8007222:	88fb      	ldrh	r3, [r7, #6]
 8007224:	f7fc fe10 	bl	8003e48 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007230:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2200      	movs	r2, #0
 8007236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	3314      	adds	r3, #20
 8007240:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007242:	69bb      	ldr	r3, [r7, #24]
 8007244:	e853 3f00 	ldrex	r3, [r3]
 8007248:	617b      	str	r3, [r7, #20]
   return(result);
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007250:	62bb      	str	r3, [r7, #40]	; 0x28
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	3314      	adds	r3, #20
 8007258:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800725a:	627a      	str	r2, [r7, #36]	; 0x24
 800725c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800725e:	6a39      	ldr	r1, [r7, #32]
 8007260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007262:	e841 2300 	strex	r3, r2, [r1]
 8007266:	61fb      	str	r3, [r7, #28]
   return(result);
 8007268:	69fb      	ldr	r3, [r7, #28]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d1e5      	bne.n	800723a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800726e:	2300      	movs	r3, #0
 8007270:	e000      	b.n	8007274 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8007272:	2302      	movs	r3, #2
  }
}
 8007274:	4618      	mov	r0, r3
 8007276:	3730      	adds	r7, #48	; 0x30
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}
 800727c:	08007881 	.word	0x08007881
 8007280:	0800791b 	.word	0x0800791b
 8007284:	08007a93 	.word	0x08007a93

08007288 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	60f8      	str	r0, [r7, #12]
 8007290:	60b9      	str	r1, [r7, #8]
 8007292:	4613      	mov	r3, r2
 8007294:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800729c:	b2db      	uxtb	r3, r3
 800729e:	2b20      	cmp	r3, #32
 80072a0:	d11d      	bne.n	80072de <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d002      	beq.n	80072ae <HAL_UART_Receive_DMA+0x26>
 80072a8:	88fb      	ldrh	r3, [r7, #6]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d101      	bne.n	80072b2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80072ae:	2301      	movs	r3, #1
 80072b0:	e016      	b.n	80072e0 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d101      	bne.n	80072c0 <HAL_UART_Receive_DMA+0x38>
 80072bc:	2302      	movs	r3, #2
 80072be:	e00f      	b.n	80072e0 <HAL_UART_Receive_DMA+0x58>
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2201      	movs	r2, #1
 80072c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2200      	movs	r2, #0
 80072cc:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80072ce:	88fb      	ldrh	r3, [r7, #6]
 80072d0:	461a      	mov	r2, r3
 80072d2:	68b9      	ldr	r1, [r7, #8]
 80072d4:	68f8      	ldr	r0, [r7, #12]
 80072d6:	f000 fc27 	bl	8007b28 <UART_Start_Receive_DMA>
 80072da:	4603      	mov	r3, r0
 80072dc:	e000      	b.n	80072e0 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80072de:	2302      	movs	r3, #2
  }
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3710      	adds	r7, #16
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b0ba      	sub	sp, #232	; 0xe8
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	695b      	ldr	r3, [r3, #20]
 800730a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800730e:	2300      	movs	r3, #0
 8007310:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007314:	2300      	movs	r3, #0
 8007316:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800731a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800731e:	f003 030f 	and.w	r3, r3, #15
 8007322:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007326:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800732a:	2b00      	cmp	r3, #0
 800732c:	d10f      	bne.n	800734e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800732e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007332:	f003 0320 	and.w	r3, r3, #32
 8007336:	2b00      	cmp	r3, #0
 8007338:	d009      	beq.n	800734e <HAL_UART_IRQHandler+0x66>
 800733a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800733e:	f003 0320 	and.w	r3, r3, #32
 8007342:	2b00      	cmp	r3, #0
 8007344:	d003      	beq.n	800734e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 fd93 	bl	8007e72 <UART_Receive_IT>
      return;
 800734c:	e256      	b.n	80077fc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800734e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007352:	2b00      	cmp	r3, #0
 8007354:	f000 80de 	beq.w	8007514 <HAL_UART_IRQHandler+0x22c>
 8007358:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800735c:	f003 0301 	and.w	r3, r3, #1
 8007360:	2b00      	cmp	r3, #0
 8007362:	d106      	bne.n	8007372 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007368:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800736c:	2b00      	cmp	r3, #0
 800736e:	f000 80d1 	beq.w	8007514 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007376:	f003 0301 	and.w	r3, r3, #1
 800737a:	2b00      	cmp	r3, #0
 800737c:	d00b      	beq.n	8007396 <HAL_UART_IRQHandler+0xae>
 800737e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007386:	2b00      	cmp	r3, #0
 8007388:	d005      	beq.n	8007396 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800738e:	f043 0201 	orr.w	r2, r3, #1
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800739a:	f003 0304 	and.w	r3, r3, #4
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d00b      	beq.n	80073ba <HAL_UART_IRQHandler+0xd2>
 80073a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073a6:	f003 0301 	and.w	r3, r3, #1
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d005      	beq.n	80073ba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b2:	f043 0202 	orr.w	r2, r3, #2
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80073ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073be:	f003 0302 	and.w	r3, r3, #2
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d00b      	beq.n	80073de <HAL_UART_IRQHandler+0xf6>
 80073c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073ca:	f003 0301 	and.w	r3, r3, #1
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d005      	beq.n	80073de <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d6:	f043 0204 	orr.w	r2, r3, #4
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80073de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073e2:	f003 0308 	and.w	r3, r3, #8
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d011      	beq.n	800740e <HAL_UART_IRQHandler+0x126>
 80073ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073ee:	f003 0320 	and.w	r3, r3, #32
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d105      	bne.n	8007402 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80073f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073fa:	f003 0301 	and.w	r3, r3, #1
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d005      	beq.n	800740e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007406:	f043 0208 	orr.w	r2, r3, #8
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007412:	2b00      	cmp	r3, #0
 8007414:	f000 81ed 	beq.w	80077f2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007418:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800741c:	f003 0320 	and.w	r3, r3, #32
 8007420:	2b00      	cmp	r3, #0
 8007422:	d008      	beq.n	8007436 <HAL_UART_IRQHandler+0x14e>
 8007424:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007428:	f003 0320 	and.w	r3, r3, #32
 800742c:	2b00      	cmp	r3, #0
 800742e:	d002      	beq.n	8007436 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 fd1e 	bl	8007e72 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	695b      	ldr	r3, [r3, #20]
 800743c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007440:	2b40      	cmp	r3, #64	; 0x40
 8007442:	bf0c      	ite	eq
 8007444:	2301      	moveq	r3, #1
 8007446:	2300      	movne	r3, #0
 8007448:	b2db      	uxtb	r3, r3
 800744a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007452:	f003 0308 	and.w	r3, r3, #8
 8007456:	2b00      	cmp	r3, #0
 8007458:	d103      	bne.n	8007462 <HAL_UART_IRQHandler+0x17a>
 800745a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800745e:	2b00      	cmp	r3, #0
 8007460:	d04f      	beq.n	8007502 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 fc26 	bl	8007cb4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	695b      	ldr	r3, [r3, #20]
 800746e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007472:	2b40      	cmp	r3, #64	; 0x40
 8007474:	d141      	bne.n	80074fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	3314      	adds	r3, #20
 800747c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007480:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007484:	e853 3f00 	ldrex	r3, [r3]
 8007488:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800748c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007490:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007494:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	3314      	adds	r3, #20
 800749e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80074a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80074a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80074ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80074b2:	e841 2300 	strex	r3, r2, [r1]
 80074b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80074ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d1d9      	bne.n	8007476 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d013      	beq.n	80074f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ce:	4a7d      	ldr	r2, [pc, #500]	; (80076c4 <HAL_UART_IRQHandler+0x3dc>)
 80074d0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d6:	4618      	mov	r0, r3
 80074d8:	f7fc fd7e 	bl	8003fd8 <HAL_DMA_Abort_IT>
 80074dc:	4603      	mov	r3, r0
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d016      	beq.n	8007510 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80074ec:	4610      	mov	r0, r2
 80074ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074f0:	e00e      	b.n	8007510 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 f9ae 	bl	8007854 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074f8:	e00a      	b.n	8007510 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 f9aa 	bl	8007854 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007500:	e006      	b.n	8007510 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 f9a6 	bl	8007854 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2200      	movs	r2, #0
 800750c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800750e:	e170      	b.n	80077f2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007510:	bf00      	nop
    return;
 8007512:	e16e      	b.n	80077f2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007518:	2b01      	cmp	r3, #1
 800751a:	f040 814a 	bne.w	80077b2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800751e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007522:	f003 0310 	and.w	r3, r3, #16
 8007526:	2b00      	cmp	r3, #0
 8007528:	f000 8143 	beq.w	80077b2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800752c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007530:	f003 0310 	and.w	r3, r3, #16
 8007534:	2b00      	cmp	r3, #0
 8007536:	f000 813c 	beq.w	80077b2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800753a:	2300      	movs	r3, #0
 800753c:	60bb      	str	r3, [r7, #8]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	60bb      	str	r3, [r7, #8]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	60bb      	str	r3, [r7, #8]
 800754e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	695b      	ldr	r3, [r3, #20]
 8007556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800755a:	2b40      	cmp	r3, #64	; 0x40
 800755c:	f040 80b4 	bne.w	80076c8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800756c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007570:	2b00      	cmp	r3, #0
 8007572:	f000 8140 	beq.w	80077f6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800757a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800757e:	429a      	cmp	r2, r3
 8007580:	f080 8139 	bcs.w	80077f6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800758a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007590:	69db      	ldr	r3, [r3, #28]
 8007592:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007596:	f000 8088 	beq.w	80076aa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	330c      	adds	r3, #12
 80075a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80075a8:	e853 3f00 	ldrex	r3, [r3]
 80075ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80075b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80075b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	330c      	adds	r3, #12
 80075c2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80075c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80075ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80075d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80075d6:	e841 2300 	strex	r3, r2, [r1]
 80075da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80075de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d1d9      	bne.n	800759a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	3314      	adds	r3, #20
 80075ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075f0:	e853 3f00 	ldrex	r3, [r3]
 80075f4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80075f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80075f8:	f023 0301 	bic.w	r3, r3, #1
 80075fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	3314      	adds	r3, #20
 8007606:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800760a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800760e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007610:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007612:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007616:	e841 2300 	strex	r3, r2, [r1]
 800761a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800761c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800761e:	2b00      	cmp	r3, #0
 8007620:	d1e1      	bne.n	80075e6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	3314      	adds	r3, #20
 8007628:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800762a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800762c:	e853 3f00 	ldrex	r3, [r3]
 8007630:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007632:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007634:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007638:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	3314      	adds	r3, #20
 8007642:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007646:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007648:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800764a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800764c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800764e:	e841 2300 	strex	r3, r2, [r1]
 8007652:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007654:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007656:	2b00      	cmp	r3, #0
 8007658:	d1e3      	bne.n	8007622 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2220      	movs	r2, #32
 800765e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2200      	movs	r2, #0
 8007666:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	330c      	adds	r3, #12
 800766e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007670:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007672:	e853 3f00 	ldrex	r3, [r3]
 8007676:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007678:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800767a:	f023 0310 	bic.w	r3, r3, #16
 800767e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	330c      	adds	r3, #12
 8007688:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800768c:	65ba      	str	r2, [r7, #88]	; 0x58
 800768e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007690:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007692:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007694:	e841 2300 	strex	r3, r2, [r1]
 8007698:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800769a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800769c:	2b00      	cmp	r3, #0
 800769e:	d1e3      	bne.n	8007668 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a4:	4618      	mov	r0, r3
 80076a6:	f7fc fc27 	bl	8003ef8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	1ad3      	subs	r3, r2, r3
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	4619      	mov	r1, r3
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 f8d4 	bl	8007868 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80076c0:	e099      	b.n	80077f6 <HAL_UART_IRQHandler+0x50e>
 80076c2:	bf00      	nop
 80076c4:	08007d7b 	.word	0x08007d7b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	1ad3      	subs	r3, r2, r3
 80076d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80076dc:	b29b      	uxth	r3, r3
 80076de:	2b00      	cmp	r3, #0
 80076e0:	f000 808b 	beq.w	80077fa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80076e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	f000 8086 	beq.w	80077fa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	330c      	adds	r3, #12
 80076f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076f8:	e853 3f00 	ldrex	r3, [r3]
 80076fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80076fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007700:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007704:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	330c      	adds	r3, #12
 800770e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007712:	647a      	str	r2, [r7, #68]	; 0x44
 8007714:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007716:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007718:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800771a:	e841 2300 	strex	r3, r2, [r1]
 800771e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007722:	2b00      	cmp	r3, #0
 8007724:	d1e3      	bne.n	80076ee <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	3314      	adds	r3, #20
 800772c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800772e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007730:	e853 3f00 	ldrex	r3, [r3]
 8007734:	623b      	str	r3, [r7, #32]
   return(result);
 8007736:	6a3b      	ldr	r3, [r7, #32]
 8007738:	f023 0301 	bic.w	r3, r3, #1
 800773c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	3314      	adds	r3, #20
 8007746:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800774a:	633a      	str	r2, [r7, #48]	; 0x30
 800774c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800774e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007752:	e841 2300 	strex	r3, r2, [r1]
 8007756:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800775a:	2b00      	cmp	r3, #0
 800775c:	d1e3      	bne.n	8007726 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2220      	movs	r2, #32
 8007762:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2200      	movs	r2, #0
 800776a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	330c      	adds	r3, #12
 8007772:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	e853 3f00 	ldrex	r3, [r3]
 800777a:	60fb      	str	r3, [r7, #12]
   return(result);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f023 0310 	bic.w	r3, r3, #16
 8007782:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	330c      	adds	r3, #12
 800778c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007790:	61fa      	str	r2, [r7, #28]
 8007792:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007794:	69b9      	ldr	r1, [r7, #24]
 8007796:	69fa      	ldr	r2, [r7, #28]
 8007798:	e841 2300 	strex	r3, r2, [r1]
 800779c:	617b      	str	r3, [r7, #20]
   return(result);
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d1e3      	bne.n	800776c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80077a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80077a8:	4619      	mov	r1, r3
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 f85c 	bl	8007868 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80077b0:	e023      	b.n	80077fa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80077b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d009      	beq.n	80077d2 <HAL_UART_IRQHandler+0x4ea>
 80077be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d003      	beq.n	80077d2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 fae9 	bl	8007da2 <UART_Transmit_IT>
    return;
 80077d0:	e014      	b.n	80077fc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80077d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d00e      	beq.n	80077fc <HAL_UART_IRQHandler+0x514>
 80077de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d008      	beq.n	80077fc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 fb29 	bl	8007e42 <UART_EndTransmit_IT>
    return;
 80077f0:	e004      	b.n	80077fc <HAL_UART_IRQHandler+0x514>
    return;
 80077f2:	bf00      	nop
 80077f4:	e002      	b.n	80077fc <HAL_UART_IRQHandler+0x514>
      return;
 80077f6:	bf00      	nop
 80077f8:	e000      	b.n	80077fc <HAL_UART_IRQHandler+0x514>
      return;
 80077fa:	bf00      	nop
  }
}
 80077fc:	37e8      	adds	r7, #232	; 0xe8
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
 8007802:	bf00      	nop

08007804 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007804:	b480      	push	{r7}
 8007806:	b083      	sub	sp, #12
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800780c:	bf00      	nop
 800780e:	370c      	adds	r7, #12
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr

08007818 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007818:	b480      	push	{r7}
 800781a:	b083      	sub	sp, #12
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007820:	bf00      	nop
 8007822:	370c      	adds	r7, #12
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800782c:	b480      	push	{r7}
 800782e:	b083      	sub	sp, #12
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007834:	bf00      	nop
 8007836:	370c      	adds	r7, #12
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr

08007840 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007840:	b480      	push	{r7}
 8007842:	b083      	sub	sp, #12
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007848:	bf00      	nop
 800784a:	370c      	adds	r7, #12
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr

08007854 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007854:	b480      	push	{r7}
 8007856:	b083      	sub	sp, #12
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800785c:	bf00      	nop
 800785e:	370c      	adds	r7, #12
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr

08007868 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	460b      	mov	r3, r1
 8007872:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007874:	bf00      	nop
 8007876:	370c      	adds	r7, #12
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr

08007880 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b090      	sub	sp, #64	; 0x40
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800788c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007898:	2b00      	cmp	r3, #0
 800789a:	d137      	bne.n	800790c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800789c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800789e:	2200      	movs	r2, #0
 80078a0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80078a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	3314      	adds	r3, #20
 80078a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ac:	e853 3f00 	ldrex	r3, [r3]
 80078b0:	623b      	str	r3, [r7, #32]
   return(result);
 80078b2:	6a3b      	ldr	r3, [r7, #32]
 80078b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80078ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	3314      	adds	r3, #20
 80078c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80078c2:	633a      	str	r2, [r7, #48]	; 0x30
 80078c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80078c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078ca:	e841 2300 	strex	r3, r2, [r1]
 80078ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80078d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d1e5      	bne.n	80078a2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80078d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	330c      	adds	r3, #12
 80078dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	e853 3f00 	ldrex	r3, [r3]
 80078e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078ec:	637b      	str	r3, [r7, #52]	; 0x34
 80078ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	330c      	adds	r3, #12
 80078f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078f6:	61fa      	str	r2, [r7, #28]
 80078f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078fa:	69b9      	ldr	r1, [r7, #24]
 80078fc:	69fa      	ldr	r2, [r7, #28]
 80078fe:	e841 2300 	strex	r3, r2, [r1]
 8007902:	617b      	str	r3, [r7, #20]
   return(result);
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d1e5      	bne.n	80078d6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800790a:	e002      	b.n	8007912 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800790c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800790e:	f7ff ff79 	bl	8007804 <HAL_UART_TxCpltCallback>
}
 8007912:	bf00      	nop
 8007914:	3740      	adds	r7, #64	; 0x40
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}

0800791a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800791a:	b580      	push	{r7, lr}
 800791c:	b084      	sub	sp, #16
 800791e:	af00      	add	r7, sp, #0
 8007920:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007926:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007928:	68f8      	ldr	r0, [r7, #12]
 800792a:	f7ff ff75 	bl	8007818 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800792e:	bf00      	nop
 8007930:	3710      	adds	r7, #16
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}

08007936 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007936:	b580      	push	{r7, lr}
 8007938:	b09c      	sub	sp, #112	; 0x70
 800793a:	af00      	add	r7, sp, #0
 800793c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007942:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800794e:	2b00      	cmp	r3, #0
 8007950:	d172      	bne.n	8007a38 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007952:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007954:	2200      	movs	r2, #0
 8007956:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007958:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	330c      	adds	r3, #12
 800795e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007960:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007962:	e853 3f00 	ldrex	r3, [r3]
 8007966:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007968:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800796a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800796e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	330c      	adds	r3, #12
 8007976:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007978:	65ba      	str	r2, [r7, #88]	; 0x58
 800797a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800797c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800797e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007980:	e841 2300 	strex	r3, r2, [r1]
 8007984:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007986:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007988:	2b00      	cmp	r3, #0
 800798a:	d1e5      	bne.n	8007958 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800798c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	3314      	adds	r3, #20
 8007992:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007996:	e853 3f00 	ldrex	r3, [r3]
 800799a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800799c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800799e:	f023 0301 	bic.w	r3, r3, #1
 80079a2:	667b      	str	r3, [r7, #100]	; 0x64
 80079a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	3314      	adds	r3, #20
 80079aa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80079ac:	647a      	str	r2, [r7, #68]	; 0x44
 80079ae:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80079b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80079b4:	e841 2300 	strex	r3, r2, [r1]
 80079b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80079ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d1e5      	bne.n	800798c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	3314      	adds	r3, #20
 80079c6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ca:	e853 3f00 	ldrex	r3, [r3]
 80079ce:	623b      	str	r3, [r7, #32]
   return(result);
 80079d0:	6a3b      	ldr	r3, [r7, #32]
 80079d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079d6:	663b      	str	r3, [r7, #96]	; 0x60
 80079d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	3314      	adds	r3, #20
 80079de:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80079e0:	633a      	str	r2, [r7, #48]	; 0x30
 80079e2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079e8:	e841 2300 	strex	r3, r2, [r1]
 80079ec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80079ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d1e5      	bne.n	80079c0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80079f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079f6:	2220      	movs	r2, #32
 80079f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d119      	bne.n	8007a38 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	330c      	adds	r3, #12
 8007a0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	e853 3f00 	ldrex	r3, [r3]
 8007a12:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	f023 0310 	bic.w	r3, r3, #16
 8007a1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	330c      	adds	r3, #12
 8007a22:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007a24:	61fa      	str	r2, [r7, #28]
 8007a26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a28:	69b9      	ldr	r1, [r7, #24]
 8007a2a:	69fa      	ldr	r2, [r7, #28]
 8007a2c:	e841 2300 	strex	r3, r2, [r1]
 8007a30:	617b      	str	r3, [r7, #20]
   return(result);
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d1e5      	bne.n	8007a04 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d106      	bne.n	8007a4e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a42:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007a44:	4619      	mov	r1, r3
 8007a46:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007a48:	f7ff ff0e 	bl	8007868 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007a4c:	e002      	b.n	8007a54 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8007a4e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007a50:	f7ff feec 	bl	800782c <HAL_UART_RxCpltCallback>
}
 8007a54:	bf00      	nop
 8007a56:	3770      	adds	r7, #112	; 0x70
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b084      	sub	sp, #16
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a68:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	d108      	bne.n	8007a84 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007a76:	085b      	lsrs	r3, r3, #1
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	68f8      	ldr	r0, [r7, #12]
 8007a7e:	f7ff fef3 	bl	8007868 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007a82:	e002      	b.n	8007a8a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007a84:	68f8      	ldr	r0, [r7, #12]
 8007a86:	f7ff fedb 	bl	8007840 <HAL_UART_RxHalfCpltCallback>
}
 8007a8a:	bf00      	nop
 8007a8c:	3710      	adds	r7, #16
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}

08007a92 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007a92:	b580      	push	{r7, lr}
 8007a94:	b084      	sub	sp, #16
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aa2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	695b      	ldr	r3, [r3, #20]
 8007aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aae:	2b80      	cmp	r3, #128	; 0x80
 8007ab0:	bf0c      	ite	eq
 8007ab2:	2301      	moveq	r3, #1
 8007ab4:	2300      	movne	r3, #0
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ac0:	b2db      	uxtb	r3, r3
 8007ac2:	2b21      	cmp	r3, #33	; 0x21
 8007ac4:	d108      	bne.n	8007ad8 <UART_DMAError+0x46>
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d005      	beq.n	8007ad8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007ad2:	68b8      	ldr	r0, [r7, #8]
 8007ad4:	f000 f8c6 	bl	8007c64 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	695b      	ldr	r3, [r3, #20]
 8007ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ae2:	2b40      	cmp	r3, #64	; 0x40
 8007ae4:	bf0c      	ite	eq
 8007ae6:	2301      	moveq	r3, #1
 8007ae8:	2300      	movne	r3, #0
 8007aea:	b2db      	uxtb	r3, r3
 8007aec:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	2b22      	cmp	r3, #34	; 0x22
 8007af8:	d108      	bne.n	8007b0c <UART_DMAError+0x7a>
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d005      	beq.n	8007b0c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	2200      	movs	r2, #0
 8007b04:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007b06:	68b8      	ldr	r0, [r7, #8]
 8007b08:	f000 f8d4 	bl	8007cb4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b10:	f043 0210 	orr.w	r2, r3, #16
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b18:	68b8      	ldr	r0, [r7, #8]
 8007b1a:	f7ff fe9b 	bl	8007854 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b1e:	bf00      	nop
 8007b20:	3710      	adds	r7, #16
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}
	...

08007b28 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b098      	sub	sp, #96	; 0x60
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	60f8      	str	r0, [r7, #12]
 8007b30:	60b9      	str	r1, [r7, #8]
 8007b32:	4613      	mov	r3, r2
 8007b34:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007b36:	68ba      	ldr	r2, [r7, #8]
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	88fa      	ldrh	r2, [r7, #6]
 8007b40:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2200      	movs	r2, #0
 8007b46:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2222      	movs	r2, #34	; 0x22
 8007b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b54:	4a40      	ldr	r2, [pc, #256]	; (8007c58 <UART_Start_Receive_DMA+0x130>)
 8007b56:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b5c:	4a3f      	ldr	r2, [pc, #252]	; (8007c5c <UART_Start_Receive_DMA+0x134>)
 8007b5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b64:	4a3e      	ldr	r2, [pc, #248]	; (8007c60 <UART_Start_Receive_DMA+0x138>)
 8007b66:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007b70:	f107 0308 	add.w	r3, r7, #8
 8007b74:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	3304      	adds	r3, #4
 8007b80:	4619      	mov	r1, r3
 8007b82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	88fb      	ldrh	r3, [r7, #6]
 8007b88:	f7fc f95e 	bl	8003e48 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	613b      	str	r3, [r7, #16]
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	613b      	str	r3, [r7, #16]
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	613b      	str	r3, [r7, #16]
 8007ba0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	691b      	ldr	r3, [r3, #16]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d019      	beq.n	8007be6 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	330c      	adds	r3, #12
 8007bb8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bbc:	e853 3f00 	ldrex	r3, [r3]
 8007bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007bc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bc8:	65bb      	str	r3, [r7, #88]	; 0x58
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	330c      	adds	r3, #12
 8007bd0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007bd2:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007bd4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007bd8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007bda:	e841 2300 	strex	r3, r2, [r1]
 8007bde:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007be0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d1e5      	bne.n	8007bb2 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	3314      	adds	r3, #20
 8007bec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bf0:	e853 3f00 	ldrex	r3, [r3]
 8007bf4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf8:	f043 0301 	orr.w	r3, r3, #1
 8007bfc:	657b      	str	r3, [r7, #84]	; 0x54
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	3314      	adds	r3, #20
 8007c04:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007c06:	63ba      	str	r2, [r7, #56]	; 0x38
 8007c08:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c0a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007c0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c0e:	e841 2300 	strex	r3, r2, [r1]
 8007c12:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d1e5      	bne.n	8007be6 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	3314      	adds	r3, #20
 8007c20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c22:	69bb      	ldr	r3, [r7, #24]
 8007c24:	e853 3f00 	ldrex	r3, [r3]
 8007c28:	617b      	str	r3, [r7, #20]
   return(result);
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c30:	653b      	str	r3, [r7, #80]	; 0x50
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	3314      	adds	r3, #20
 8007c38:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007c3a:	627a      	str	r2, [r7, #36]	; 0x24
 8007c3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c3e:	6a39      	ldr	r1, [r7, #32]
 8007c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c42:	e841 2300 	strex	r3, r2, [r1]
 8007c46:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c48:	69fb      	ldr	r3, [r7, #28]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d1e5      	bne.n	8007c1a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8007c4e:	2300      	movs	r3, #0
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3760      	adds	r7, #96	; 0x60
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}
 8007c58:	08007937 	.word	0x08007937
 8007c5c:	08007a5d 	.word	0x08007a5d
 8007c60:	08007a93 	.word	0x08007a93

08007c64 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b089      	sub	sp, #36	; 0x24
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	330c      	adds	r3, #12
 8007c72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	e853 3f00 	ldrex	r3, [r3]
 8007c7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007c82:	61fb      	str	r3, [r7, #28]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	330c      	adds	r3, #12
 8007c8a:	69fa      	ldr	r2, [r7, #28]
 8007c8c:	61ba      	str	r2, [r7, #24]
 8007c8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c90:	6979      	ldr	r1, [r7, #20]
 8007c92:	69ba      	ldr	r2, [r7, #24]
 8007c94:	e841 2300 	strex	r3, r2, [r1]
 8007c98:	613b      	str	r3, [r7, #16]
   return(result);
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d1e5      	bne.n	8007c6c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2220      	movs	r2, #32
 8007ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007ca8:	bf00      	nop
 8007caa:	3724      	adds	r7, #36	; 0x24
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr

08007cb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b095      	sub	sp, #84	; 0x54
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	330c      	adds	r3, #12
 8007cc2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cc6:	e853 3f00 	ldrex	r3, [r3]
 8007cca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007cd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	330c      	adds	r3, #12
 8007cda:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007cdc:	643a      	str	r2, [r7, #64]	; 0x40
 8007cde:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007ce2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ce4:	e841 2300 	strex	r3, r2, [r1]
 8007ce8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d1e5      	bne.n	8007cbc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	3314      	adds	r3, #20
 8007cf6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf8:	6a3b      	ldr	r3, [r7, #32]
 8007cfa:	e853 3f00 	ldrex	r3, [r3]
 8007cfe:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d00:	69fb      	ldr	r3, [r7, #28]
 8007d02:	f023 0301 	bic.w	r3, r3, #1
 8007d06:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	3314      	adds	r3, #20
 8007d0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d10:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007d12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d18:	e841 2300 	strex	r3, r2, [r1]
 8007d1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d1e5      	bne.n	8007cf0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	d119      	bne.n	8007d60 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	330c      	adds	r3, #12
 8007d32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	e853 3f00 	ldrex	r3, [r3]
 8007d3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	f023 0310 	bic.w	r3, r3, #16
 8007d42:	647b      	str	r3, [r7, #68]	; 0x44
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	330c      	adds	r3, #12
 8007d4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d4c:	61ba      	str	r2, [r7, #24]
 8007d4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d50:	6979      	ldr	r1, [r7, #20]
 8007d52:	69ba      	ldr	r2, [r7, #24]
 8007d54:	e841 2300 	strex	r3, r2, [r1]
 8007d58:	613b      	str	r3, [r7, #16]
   return(result);
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d1e5      	bne.n	8007d2c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2220      	movs	r2, #32
 8007d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007d6e:	bf00      	nop
 8007d70:	3754      	adds	r7, #84	; 0x54
 8007d72:	46bd      	mov	sp, r7
 8007d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d78:	4770      	bx	lr

08007d7a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d7a:	b580      	push	{r7, lr}
 8007d7c:	b084      	sub	sp, #16
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d86:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2200      	movs	r2, #0
 8007d92:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d94:	68f8      	ldr	r0, [r7, #12]
 8007d96:	f7ff fd5d 	bl	8007854 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d9a:	bf00      	nop
 8007d9c:	3710      	adds	r7, #16
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}

08007da2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007da2:	b480      	push	{r7}
 8007da4:	b085      	sub	sp, #20
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	2b21      	cmp	r3, #33	; 0x21
 8007db4:	d13e      	bne.n	8007e34 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dbe:	d114      	bne.n	8007dea <UART_Transmit_IT+0x48>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	691b      	ldr	r3, [r3, #16]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d110      	bne.n	8007dea <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6a1b      	ldr	r3, [r3, #32]
 8007dcc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	881b      	ldrh	r3, [r3, #0]
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ddc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6a1b      	ldr	r3, [r3, #32]
 8007de2:	1c9a      	adds	r2, r3, #2
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	621a      	str	r2, [r3, #32]
 8007de8:	e008      	b.n	8007dfc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6a1b      	ldr	r3, [r3, #32]
 8007dee:	1c59      	adds	r1, r3, #1
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	6211      	str	r1, [r2, #32]
 8007df4:	781a      	ldrb	r2, [r3, #0]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	3b01      	subs	r3, #1
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	687a      	ldr	r2, [r7, #4]
 8007e08:	4619      	mov	r1, r3
 8007e0a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d10f      	bne.n	8007e30 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	68da      	ldr	r2, [r3, #12]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e1e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	68da      	ldr	r2, [r3, #12]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e2e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007e30:	2300      	movs	r3, #0
 8007e32:	e000      	b.n	8007e36 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007e34:	2302      	movs	r3, #2
  }
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3714      	adds	r7, #20
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr

08007e42 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007e42:	b580      	push	{r7, lr}
 8007e44:	b082      	sub	sp, #8
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	68da      	ldr	r2, [r3, #12]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e58:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2220      	movs	r2, #32
 8007e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f7ff fcce 	bl	8007804 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007e68:	2300      	movs	r3, #0
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3708      	adds	r7, #8
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}

08007e72 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007e72:	b580      	push	{r7, lr}
 8007e74:	b08c      	sub	sp, #48	; 0x30
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e80:	b2db      	uxtb	r3, r3
 8007e82:	2b22      	cmp	r3, #34	; 0x22
 8007e84:	f040 80ab 	bne.w	8007fde <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	689b      	ldr	r3, [r3, #8]
 8007e8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e90:	d117      	bne.n	8007ec2 <UART_Receive_IT+0x50>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	691b      	ldr	r3, [r3, #16]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d113      	bne.n	8007ec2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ea2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eb0:	b29a      	uxth	r2, r3
 8007eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eba:	1c9a      	adds	r2, r3, #2
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	629a      	str	r2, [r3, #40]	; 0x28
 8007ec0:	e026      	b.n	8007f10 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	689b      	ldr	r3, [r3, #8]
 8007ed0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ed4:	d007      	beq.n	8007ee6 <UART_Receive_IT+0x74>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	689b      	ldr	r3, [r3, #8]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d10a      	bne.n	8007ef4 <UART_Receive_IT+0x82>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	691b      	ldr	r3, [r3, #16]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d106      	bne.n	8007ef4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	b2da      	uxtb	r2, r3
 8007eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ef0:	701a      	strb	r2, [r3, #0]
 8007ef2:	e008      	b.n	8007f06 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	b2db      	uxtb	r3, r3
 8007efc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f00:	b2da      	uxtb	r2, r3
 8007f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f04:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f0a:	1c5a      	adds	r2, r3, #1
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	3b01      	subs	r3, #1
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	687a      	ldr	r2, [r7, #4]
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d15a      	bne.n	8007fda <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	68da      	ldr	r2, [r3, #12]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f022 0220 	bic.w	r2, r2, #32
 8007f32:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	68da      	ldr	r2, [r3, #12]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007f42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	695a      	ldr	r2, [r3, #20]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f022 0201 	bic.w	r2, r2, #1
 8007f52:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2220      	movs	r2, #32
 8007f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d135      	bne.n	8007fd0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2200      	movs	r2, #0
 8007f68:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	330c      	adds	r3, #12
 8007f70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	e853 3f00 	ldrex	r3, [r3]
 8007f78:	613b      	str	r3, [r7, #16]
   return(result);
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	f023 0310 	bic.w	r3, r3, #16
 8007f80:	627b      	str	r3, [r7, #36]	; 0x24
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	330c      	adds	r3, #12
 8007f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f8a:	623a      	str	r2, [r7, #32]
 8007f8c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f8e:	69f9      	ldr	r1, [r7, #28]
 8007f90:	6a3a      	ldr	r2, [r7, #32]
 8007f92:	e841 2300 	strex	r3, r2, [r1]
 8007f96:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f98:	69bb      	ldr	r3, [r7, #24]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d1e5      	bne.n	8007f6a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f003 0310 	and.w	r3, r3, #16
 8007fa8:	2b10      	cmp	r3, #16
 8007faa:	d10a      	bne.n	8007fc2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007fac:	2300      	movs	r3, #0
 8007fae:	60fb      	str	r3, [r7, #12]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	60fb      	str	r3, [r7, #12]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	60fb      	str	r3, [r7, #12]
 8007fc0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007fc6:	4619      	mov	r1, r3
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f7ff fc4d 	bl	8007868 <HAL_UARTEx_RxEventCallback>
 8007fce:	e002      	b.n	8007fd6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f7ff fc2b 	bl	800782c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	e002      	b.n	8007fe0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	e000      	b.n	8007fe0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007fde:	2302      	movs	r3, #2
  }
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3730      	adds	r7, #48	; 0x30
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}

08007fe8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007fe8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007fec:	b0c0      	sub	sp, #256	; 0x100
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	691b      	ldr	r3, [r3, #16]
 8007ffc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008004:	68d9      	ldr	r1, [r3, #12]
 8008006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800800a:	681a      	ldr	r2, [r3, #0]
 800800c:	ea40 0301 	orr.w	r3, r0, r1
 8008010:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008016:	689a      	ldr	r2, [r3, #8]
 8008018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800801c:	691b      	ldr	r3, [r3, #16]
 800801e:	431a      	orrs	r2, r3
 8008020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008024:	695b      	ldr	r3, [r3, #20]
 8008026:	431a      	orrs	r2, r3
 8008028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800802c:	69db      	ldr	r3, [r3, #28]
 800802e:	4313      	orrs	r3, r2
 8008030:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	68db      	ldr	r3, [r3, #12]
 800803c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008040:	f021 010c 	bic.w	r1, r1, #12
 8008044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800804e:	430b      	orrs	r3, r1
 8008050:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	695b      	ldr	r3, [r3, #20]
 800805a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800805e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008062:	6999      	ldr	r1, [r3, #24]
 8008064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008068:	681a      	ldr	r2, [r3, #0]
 800806a:	ea40 0301 	orr.w	r3, r0, r1
 800806e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008074:	681a      	ldr	r2, [r3, #0]
 8008076:	4b8f      	ldr	r3, [pc, #572]	; (80082b4 <UART_SetConfig+0x2cc>)
 8008078:	429a      	cmp	r2, r3
 800807a:	d005      	beq.n	8008088 <UART_SetConfig+0xa0>
 800807c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008080:	681a      	ldr	r2, [r3, #0]
 8008082:	4b8d      	ldr	r3, [pc, #564]	; (80082b8 <UART_SetConfig+0x2d0>)
 8008084:	429a      	cmp	r2, r3
 8008086:	d104      	bne.n	8008092 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008088:	f7fd f9b0 	bl	80053ec <HAL_RCC_GetPCLK2Freq>
 800808c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008090:	e003      	b.n	800809a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008092:	f7fd f997 	bl	80053c4 <HAL_RCC_GetPCLK1Freq>
 8008096:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800809a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800809e:	69db      	ldr	r3, [r3, #28]
 80080a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080a4:	f040 810c 	bne.w	80082c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80080a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080ac:	2200      	movs	r2, #0
 80080ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80080b2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80080b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80080ba:	4622      	mov	r2, r4
 80080bc:	462b      	mov	r3, r5
 80080be:	1891      	adds	r1, r2, r2
 80080c0:	65b9      	str	r1, [r7, #88]	; 0x58
 80080c2:	415b      	adcs	r3, r3
 80080c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80080c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80080ca:	4621      	mov	r1, r4
 80080cc:	eb12 0801 	adds.w	r8, r2, r1
 80080d0:	4629      	mov	r1, r5
 80080d2:	eb43 0901 	adc.w	r9, r3, r1
 80080d6:	f04f 0200 	mov.w	r2, #0
 80080da:	f04f 0300 	mov.w	r3, #0
 80080de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80080e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80080e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80080ea:	4690      	mov	r8, r2
 80080ec:	4699      	mov	r9, r3
 80080ee:	4623      	mov	r3, r4
 80080f0:	eb18 0303 	adds.w	r3, r8, r3
 80080f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80080f8:	462b      	mov	r3, r5
 80080fa:	eb49 0303 	adc.w	r3, r9, r3
 80080fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	2200      	movs	r2, #0
 800810a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800810e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008112:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008116:	460b      	mov	r3, r1
 8008118:	18db      	adds	r3, r3, r3
 800811a:	653b      	str	r3, [r7, #80]	; 0x50
 800811c:	4613      	mov	r3, r2
 800811e:	eb42 0303 	adc.w	r3, r2, r3
 8008122:	657b      	str	r3, [r7, #84]	; 0x54
 8008124:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008128:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800812c:	f7f8 f854 	bl	80001d8 <__aeabi_uldivmod>
 8008130:	4602      	mov	r2, r0
 8008132:	460b      	mov	r3, r1
 8008134:	4b61      	ldr	r3, [pc, #388]	; (80082bc <UART_SetConfig+0x2d4>)
 8008136:	fba3 2302 	umull	r2, r3, r3, r2
 800813a:	095b      	lsrs	r3, r3, #5
 800813c:	011c      	lsls	r4, r3, #4
 800813e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008142:	2200      	movs	r2, #0
 8008144:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008148:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800814c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008150:	4642      	mov	r2, r8
 8008152:	464b      	mov	r3, r9
 8008154:	1891      	adds	r1, r2, r2
 8008156:	64b9      	str	r1, [r7, #72]	; 0x48
 8008158:	415b      	adcs	r3, r3
 800815a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800815c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008160:	4641      	mov	r1, r8
 8008162:	eb12 0a01 	adds.w	sl, r2, r1
 8008166:	4649      	mov	r1, r9
 8008168:	eb43 0b01 	adc.w	fp, r3, r1
 800816c:	f04f 0200 	mov.w	r2, #0
 8008170:	f04f 0300 	mov.w	r3, #0
 8008174:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008178:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800817c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008180:	4692      	mov	sl, r2
 8008182:	469b      	mov	fp, r3
 8008184:	4643      	mov	r3, r8
 8008186:	eb1a 0303 	adds.w	r3, sl, r3
 800818a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800818e:	464b      	mov	r3, r9
 8008190:	eb4b 0303 	adc.w	r3, fp, r3
 8008194:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	2200      	movs	r2, #0
 80081a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80081a4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80081a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80081ac:	460b      	mov	r3, r1
 80081ae:	18db      	adds	r3, r3, r3
 80081b0:	643b      	str	r3, [r7, #64]	; 0x40
 80081b2:	4613      	mov	r3, r2
 80081b4:	eb42 0303 	adc.w	r3, r2, r3
 80081b8:	647b      	str	r3, [r7, #68]	; 0x44
 80081ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80081be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80081c2:	f7f8 f809 	bl	80001d8 <__aeabi_uldivmod>
 80081c6:	4602      	mov	r2, r0
 80081c8:	460b      	mov	r3, r1
 80081ca:	4611      	mov	r1, r2
 80081cc:	4b3b      	ldr	r3, [pc, #236]	; (80082bc <UART_SetConfig+0x2d4>)
 80081ce:	fba3 2301 	umull	r2, r3, r3, r1
 80081d2:	095b      	lsrs	r3, r3, #5
 80081d4:	2264      	movs	r2, #100	; 0x64
 80081d6:	fb02 f303 	mul.w	r3, r2, r3
 80081da:	1acb      	subs	r3, r1, r3
 80081dc:	00db      	lsls	r3, r3, #3
 80081de:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80081e2:	4b36      	ldr	r3, [pc, #216]	; (80082bc <UART_SetConfig+0x2d4>)
 80081e4:	fba3 2302 	umull	r2, r3, r3, r2
 80081e8:	095b      	lsrs	r3, r3, #5
 80081ea:	005b      	lsls	r3, r3, #1
 80081ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80081f0:	441c      	add	r4, r3
 80081f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80081f6:	2200      	movs	r2, #0
 80081f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80081fc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008200:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008204:	4642      	mov	r2, r8
 8008206:	464b      	mov	r3, r9
 8008208:	1891      	adds	r1, r2, r2
 800820a:	63b9      	str	r1, [r7, #56]	; 0x38
 800820c:	415b      	adcs	r3, r3
 800820e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008210:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008214:	4641      	mov	r1, r8
 8008216:	1851      	adds	r1, r2, r1
 8008218:	6339      	str	r1, [r7, #48]	; 0x30
 800821a:	4649      	mov	r1, r9
 800821c:	414b      	adcs	r3, r1
 800821e:	637b      	str	r3, [r7, #52]	; 0x34
 8008220:	f04f 0200 	mov.w	r2, #0
 8008224:	f04f 0300 	mov.w	r3, #0
 8008228:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800822c:	4659      	mov	r1, fp
 800822e:	00cb      	lsls	r3, r1, #3
 8008230:	4651      	mov	r1, sl
 8008232:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008236:	4651      	mov	r1, sl
 8008238:	00ca      	lsls	r2, r1, #3
 800823a:	4610      	mov	r0, r2
 800823c:	4619      	mov	r1, r3
 800823e:	4603      	mov	r3, r0
 8008240:	4642      	mov	r2, r8
 8008242:	189b      	adds	r3, r3, r2
 8008244:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008248:	464b      	mov	r3, r9
 800824a:	460a      	mov	r2, r1
 800824c:	eb42 0303 	adc.w	r3, r2, r3
 8008250:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	2200      	movs	r2, #0
 800825c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008260:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008264:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008268:	460b      	mov	r3, r1
 800826a:	18db      	adds	r3, r3, r3
 800826c:	62bb      	str	r3, [r7, #40]	; 0x28
 800826e:	4613      	mov	r3, r2
 8008270:	eb42 0303 	adc.w	r3, r2, r3
 8008274:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008276:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800827a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800827e:	f7f7 ffab 	bl	80001d8 <__aeabi_uldivmod>
 8008282:	4602      	mov	r2, r0
 8008284:	460b      	mov	r3, r1
 8008286:	4b0d      	ldr	r3, [pc, #52]	; (80082bc <UART_SetConfig+0x2d4>)
 8008288:	fba3 1302 	umull	r1, r3, r3, r2
 800828c:	095b      	lsrs	r3, r3, #5
 800828e:	2164      	movs	r1, #100	; 0x64
 8008290:	fb01 f303 	mul.w	r3, r1, r3
 8008294:	1ad3      	subs	r3, r2, r3
 8008296:	00db      	lsls	r3, r3, #3
 8008298:	3332      	adds	r3, #50	; 0x32
 800829a:	4a08      	ldr	r2, [pc, #32]	; (80082bc <UART_SetConfig+0x2d4>)
 800829c:	fba2 2303 	umull	r2, r3, r2, r3
 80082a0:	095b      	lsrs	r3, r3, #5
 80082a2:	f003 0207 	and.w	r2, r3, #7
 80082a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4422      	add	r2, r4
 80082ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80082b0:	e105      	b.n	80084be <UART_SetConfig+0x4d6>
 80082b2:	bf00      	nop
 80082b4:	40011000 	.word	0x40011000
 80082b8:	40011400 	.word	0x40011400
 80082bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80082c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082c4:	2200      	movs	r2, #0
 80082c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80082ca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80082ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80082d2:	4642      	mov	r2, r8
 80082d4:	464b      	mov	r3, r9
 80082d6:	1891      	adds	r1, r2, r2
 80082d8:	6239      	str	r1, [r7, #32]
 80082da:	415b      	adcs	r3, r3
 80082dc:	627b      	str	r3, [r7, #36]	; 0x24
 80082de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80082e2:	4641      	mov	r1, r8
 80082e4:	1854      	adds	r4, r2, r1
 80082e6:	4649      	mov	r1, r9
 80082e8:	eb43 0501 	adc.w	r5, r3, r1
 80082ec:	f04f 0200 	mov.w	r2, #0
 80082f0:	f04f 0300 	mov.w	r3, #0
 80082f4:	00eb      	lsls	r3, r5, #3
 80082f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80082fa:	00e2      	lsls	r2, r4, #3
 80082fc:	4614      	mov	r4, r2
 80082fe:	461d      	mov	r5, r3
 8008300:	4643      	mov	r3, r8
 8008302:	18e3      	adds	r3, r4, r3
 8008304:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008308:	464b      	mov	r3, r9
 800830a:	eb45 0303 	adc.w	r3, r5, r3
 800830e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	2200      	movs	r2, #0
 800831a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800831e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008322:	f04f 0200 	mov.w	r2, #0
 8008326:	f04f 0300 	mov.w	r3, #0
 800832a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800832e:	4629      	mov	r1, r5
 8008330:	008b      	lsls	r3, r1, #2
 8008332:	4621      	mov	r1, r4
 8008334:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008338:	4621      	mov	r1, r4
 800833a:	008a      	lsls	r2, r1, #2
 800833c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008340:	f7f7 ff4a 	bl	80001d8 <__aeabi_uldivmod>
 8008344:	4602      	mov	r2, r0
 8008346:	460b      	mov	r3, r1
 8008348:	4b60      	ldr	r3, [pc, #384]	; (80084cc <UART_SetConfig+0x4e4>)
 800834a:	fba3 2302 	umull	r2, r3, r3, r2
 800834e:	095b      	lsrs	r3, r3, #5
 8008350:	011c      	lsls	r4, r3, #4
 8008352:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008356:	2200      	movs	r2, #0
 8008358:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800835c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008360:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008364:	4642      	mov	r2, r8
 8008366:	464b      	mov	r3, r9
 8008368:	1891      	adds	r1, r2, r2
 800836a:	61b9      	str	r1, [r7, #24]
 800836c:	415b      	adcs	r3, r3
 800836e:	61fb      	str	r3, [r7, #28]
 8008370:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008374:	4641      	mov	r1, r8
 8008376:	1851      	adds	r1, r2, r1
 8008378:	6139      	str	r1, [r7, #16]
 800837a:	4649      	mov	r1, r9
 800837c:	414b      	adcs	r3, r1
 800837e:	617b      	str	r3, [r7, #20]
 8008380:	f04f 0200 	mov.w	r2, #0
 8008384:	f04f 0300 	mov.w	r3, #0
 8008388:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800838c:	4659      	mov	r1, fp
 800838e:	00cb      	lsls	r3, r1, #3
 8008390:	4651      	mov	r1, sl
 8008392:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008396:	4651      	mov	r1, sl
 8008398:	00ca      	lsls	r2, r1, #3
 800839a:	4610      	mov	r0, r2
 800839c:	4619      	mov	r1, r3
 800839e:	4603      	mov	r3, r0
 80083a0:	4642      	mov	r2, r8
 80083a2:	189b      	adds	r3, r3, r2
 80083a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80083a8:	464b      	mov	r3, r9
 80083aa:	460a      	mov	r2, r1
 80083ac:	eb42 0303 	adc.w	r3, r2, r3
 80083b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80083b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	2200      	movs	r2, #0
 80083bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80083be:	67fa      	str	r2, [r7, #124]	; 0x7c
 80083c0:	f04f 0200 	mov.w	r2, #0
 80083c4:	f04f 0300 	mov.w	r3, #0
 80083c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80083cc:	4649      	mov	r1, r9
 80083ce:	008b      	lsls	r3, r1, #2
 80083d0:	4641      	mov	r1, r8
 80083d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80083d6:	4641      	mov	r1, r8
 80083d8:	008a      	lsls	r2, r1, #2
 80083da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80083de:	f7f7 fefb 	bl	80001d8 <__aeabi_uldivmod>
 80083e2:	4602      	mov	r2, r0
 80083e4:	460b      	mov	r3, r1
 80083e6:	4b39      	ldr	r3, [pc, #228]	; (80084cc <UART_SetConfig+0x4e4>)
 80083e8:	fba3 1302 	umull	r1, r3, r3, r2
 80083ec:	095b      	lsrs	r3, r3, #5
 80083ee:	2164      	movs	r1, #100	; 0x64
 80083f0:	fb01 f303 	mul.w	r3, r1, r3
 80083f4:	1ad3      	subs	r3, r2, r3
 80083f6:	011b      	lsls	r3, r3, #4
 80083f8:	3332      	adds	r3, #50	; 0x32
 80083fa:	4a34      	ldr	r2, [pc, #208]	; (80084cc <UART_SetConfig+0x4e4>)
 80083fc:	fba2 2303 	umull	r2, r3, r2, r3
 8008400:	095b      	lsrs	r3, r3, #5
 8008402:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008406:	441c      	add	r4, r3
 8008408:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800840c:	2200      	movs	r2, #0
 800840e:	673b      	str	r3, [r7, #112]	; 0x70
 8008410:	677a      	str	r2, [r7, #116]	; 0x74
 8008412:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008416:	4642      	mov	r2, r8
 8008418:	464b      	mov	r3, r9
 800841a:	1891      	adds	r1, r2, r2
 800841c:	60b9      	str	r1, [r7, #8]
 800841e:	415b      	adcs	r3, r3
 8008420:	60fb      	str	r3, [r7, #12]
 8008422:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008426:	4641      	mov	r1, r8
 8008428:	1851      	adds	r1, r2, r1
 800842a:	6039      	str	r1, [r7, #0]
 800842c:	4649      	mov	r1, r9
 800842e:	414b      	adcs	r3, r1
 8008430:	607b      	str	r3, [r7, #4]
 8008432:	f04f 0200 	mov.w	r2, #0
 8008436:	f04f 0300 	mov.w	r3, #0
 800843a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800843e:	4659      	mov	r1, fp
 8008440:	00cb      	lsls	r3, r1, #3
 8008442:	4651      	mov	r1, sl
 8008444:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008448:	4651      	mov	r1, sl
 800844a:	00ca      	lsls	r2, r1, #3
 800844c:	4610      	mov	r0, r2
 800844e:	4619      	mov	r1, r3
 8008450:	4603      	mov	r3, r0
 8008452:	4642      	mov	r2, r8
 8008454:	189b      	adds	r3, r3, r2
 8008456:	66bb      	str	r3, [r7, #104]	; 0x68
 8008458:	464b      	mov	r3, r9
 800845a:	460a      	mov	r2, r1
 800845c:	eb42 0303 	adc.w	r3, r2, r3
 8008460:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	2200      	movs	r2, #0
 800846a:	663b      	str	r3, [r7, #96]	; 0x60
 800846c:	667a      	str	r2, [r7, #100]	; 0x64
 800846e:	f04f 0200 	mov.w	r2, #0
 8008472:	f04f 0300 	mov.w	r3, #0
 8008476:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800847a:	4649      	mov	r1, r9
 800847c:	008b      	lsls	r3, r1, #2
 800847e:	4641      	mov	r1, r8
 8008480:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008484:	4641      	mov	r1, r8
 8008486:	008a      	lsls	r2, r1, #2
 8008488:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800848c:	f7f7 fea4 	bl	80001d8 <__aeabi_uldivmod>
 8008490:	4602      	mov	r2, r0
 8008492:	460b      	mov	r3, r1
 8008494:	4b0d      	ldr	r3, [pc, #52]	; (80084cc <UART_SetConfig+0x4e4>)
 8008496:	fba3 1302 	umull	r1, r3, r3, r2
 800849a:	095b      	lsrs	r3, r3, #5
 800849c:	2164      	movs	r1, #100	; 0x64
 800849e:	fb01 f303 	mul.w	r3, r1, r3
 80084a2:	1ad3      	subs	r3, r2, r3
 80084a4:	011b      	lsls	r3, r3, #4
 80084a6:	3332      	adds	r3, #50	; 0x32
 80084a8:	4a08      	ldr	r2, [pc, #32]	; (80084cc <UART_SetConfig+0x4e4>)
 80084aa:	fba2 2303 	umull	r2, r3, r2, r3
 80084ae:	095b      	lsrs	r3, r3, #5
 80084b0:	f003 020f 	and.w	r2, r3, #15
 80084b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4422      	add	r2, r4
 80084bc:	609a      	str	r2, [r3, #8]
}
 80084be:	bf00      	nop
 80084c0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80084c4:	46bd      	mov	sp, r7
 80084c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80084ca:	bf00      	nop
 80084cc:	51eb851f 	.word	0x51eb851f

080084d0 <__cxa_pure_virtual>:
 80084d0:	b508      	push	{r3, lr}
 80084d2:	f000 f80d 	bl	80084f0 <_ZSt9terminatev>

080084d6 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80084d6:	b508      	push	{r3, lr}
 80084d8:	4780      	blx	r0
 80084da:	f000 f80e 	bl	80084fa <abort>
	...

080084e0 <_ZSt13get_terminatev>:
 80084e0:	4b02      	ldr	r3, [pc, #8]	; (80084ec <_ZSt13get_terminatev+0xc>)
 80084e2:	6818      	ldr	r0, [r3, #0]
 80084e4:	f3bf 8f5b 	dmb	ish
 80084e8:	4770      	bx	lr
 80084ea:	bf00      	nop
 80084ec:	2000000c 	.word	0x2000000c

080084f0 <_ZSt9terminatev>:
 80084f0:	b508      	push	{r3, lr}
 80084f2:	f7ff fff5 	bl	80084e0 <_ZSt13get_terminatev>
 80084f6:	f7ff ffee 	bl	80084d6 <_ZN10__cxxabiv111__terminateEPFvvE>

080084fa <abort>:
 80084fa:	b508      	push	{r3, lr}
 80084fc:	2006      	movs	r0, #6
 80084fe:	f000 f873 	bl	80085e8 <raise>
 8008502:	2001      	movs	r0, #1
 8008504:	f7fb f9f2 	bl	80038ec <_exit>

08008508 <__errno>:
 8008508:	4b01      	ldr	r3, [pc, #4]	; (8008510 <__errno+0x8>)
 800850a:	6818      	ldr	r0, [r3, #0]
 800850c:	4770      	bx	lr
 800850e:	bf00      	nop
 8008510:	20000010 	.word	0x20000010

08008514 <__libc_init_array>:
 8008514:	b570      	push	{r4, r5, r6, lr}
 8008516:	4d0d      	ldr	r5, [pc, #52]	; (800854c <__libc_init_array+0x38>)
 8008518:	4c0d      	ldr	r4, [pc, #52]	; (8008550 <__libc_init_array+0x3c>)
 800851a:	1b64      	subs	r4, r4, r5
 800851c:	10a4      	asrs	r4, r4, #2
 800851e:	2600      	movs	r6, #0
 8008520:	42a6      	cmp	r6, r4
 8008522:	d109      	bne.n	8008538 <__libc_init_array+0x24>
 8008524:	4d0b      	ldr	r5, [pc, #44]	; (8008554 <__libc_init_array+0x40>)
 8008526:	4c0c      	ldr	r4, [pc, #48]	; (8008558 <__libc_init_array+0x44>)
 8008528:	f000 f9b0 	bl	800888c <_init>
 800852c:	1b64      	subs	r4, r4, r5
 800852e:	10a4      	asrs	r4, r4, #2
 8008530:	2600      	movs	r6, #0
 8008532:	42a6      	cmp	r6, r4
 8008534:	d105      	bne.n	8008542 <__libc_init_array+0x2e>
 8008536:	bd70      	pop	{r4, r5, r6, pc}
 8008538:	f855 3b04 	ldr.w	r3, [r5], #4
 800853c:	4798      	blx	r3
 800853e:	3601      	adds	r6, #1
 8008540:	e7ee      	b.n	8008520 <__libc_init_array+0xc>
 8008542:	f855 3b04 	ldr.w	r3, [r5], #4
 8008546:	4798      	blx	r3
 8008548:	3601      	adds	r6, #1
 800854a:	e7f2      	b.n	8008532 <__libc_init_array+0x1e>
 800854c:	08008afc 	.word	0x08008afc
 8008550:	08008afc 	.word	0x08008afc
 8008554:	08008afc 	.word	0x08008afc
 8008558:	08008b04 	.word	0x08008b04

0800855c <memcpy>:
 800855c:	440a      	add	r2, r1
 800855e:	4291      	cmp	r1, r2
 8008560:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008564:	d100      	bne.n	8008568 <memcpy+0xc>
 8008566:	4770      	bx	lr
 8008568:	b510      	push	{r4, lr}
 800856a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800856e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008572:	4291      	cmp	r1, r2
 8008574:	d1f9      	bne.n	800856a <memcpy+0xe>
 8008576:	bd10      	pop	{r4, pc}

08008578 <memset>:
 8008578:	4402      	add	r2, r0
 800857a:	4603      	mov	r3, r0
 800857c:	4293      	cmp	r3, r2
 800857e:	d100      	bne.n	8008582 <memset+0xa>
 8008580:	4770      	bx	lr
 8008582:	f803 1b01 	strb.w	r1, [r3], #1
 8008586:	e7f9      	b.n	800857c <memset+0x4>

08008588 <realloc>:
 8008588:	4b02      	ldr	r3, [pc, #8]	; (8008594 <realloc+0xc>)
 800858a:	460a      	mov	r2, r1
 800858c:	4601      	mov	r1, r0
 800858e:	6818      	ldr	r0, [r3, #0]
 8008590:	f000 b8da 	b.w	8008748 <_realloc_r>
 8008594:	20000010 	.word	0x20000010

08008598 <_raise_r>:
 8008598:	291f      	cmp	r1, #31
 800859a:	b538      	push	{r3, r4, r5, lr}
 800859c:	4604      	mov	r4, r0
 800859e:	460d      	mov	r5, r1
 80085a0:	d904      	bls.n	80085ac <_raise_r+0x14>
 80085a2:	2316      	movs	r3, #22
 80085a4:	6003      	str	r3, [r0, #0]
 80085a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085aa:	bd38      	pop	{r3, r4, r5, pc}
 80085ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80085ae:	b112      	cbz	r2, 80085b6 <_raise_r+0x1e>
 80085b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80085b4:	b94b      	cbnz	r3, 80085ca <_raise_r+0x32>
 80085b6:	4620      	mov	r0, r4
 80085b8:	f000 f830 	bl	800861c <_getpid_r>
 80085bc:	462a      	mov	r2, r5
 80085be:	4601      	mov	r1, r0
 80085c0:	4620      	mov	r0, r4
 80085c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085c6:	f000 b817 	b.w	80085f8 <_kill_r>
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	d00a      	beq.n	80085e4 <_raise_r+0x4c>
 80085ce:	1c59      	adds	r1, r3, #1
 80085d0:	d103      	bne.n	80085da <_raise_r+0x42>
 80085d2:	2316      	movs	r3, #22
 80085d4:	6003      	str	r3, [r0, #0]
 80085d6:	2001      	movs	r0, #1
 80085d8:	e7e7      	b.n	80085aa <_raise_r+0x12>
 80085da:	2400      	movs	r4, #0
 80085dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80085e0:	4628      	mov	r0, r5
 80085e2:	4798      	blx	r3
 80085e4:	2000      	movs	r0, #0
 80085e6:	e7e0      	b.n	80085aa <_raise_r+0x12>

080085e8 <raise>:
 80085e8:	4b02      	ldr	r3, [pc, #8]	; (80085f4 <raise+0xc>)
 80085ea:	4601      	mov	r1, r0
 80085ec:	6818      	ldr	r0, [r3, #0]
 80085ee:	f7ff bfd3 	b.w	8008598 <_raise_r>
 80085f2:	bf00      	nop
 80085f4:	20000010 	.word	0x20000010

080085f8 <_kill_r>:
 80085f8:	b538      	push	{r3, r4, r5, lr}
 80085fa:	4d07      	ldr	r5, [pc, #28]	; (8008618 <_kill_r+0x20>)
 80085fc:	2300      	movs	r3, #0
 80085fe:	4604      	mov	r4, r0
 8008600:	4608      	mov	r0, r1
 8008602:	4611      	mov	r1, r2
 8008604:	602b      	str	r3, [r5, #0]
 8008606:	f7fb f961 	bl	80038cc <_kill>
 800860a:	1c43      	adds	r3, r0, #1
 800860c:	d102      	bne.n	8008614 <_kill_r+0x1c>
 800860e:	682b      	ldr	r3, [r5, #0]
 8008610:	b103      	cbz	r3, 8008614 <_kill_r+0x1c>
 8008612:	6023      	str	r3, [r4, #0]
 8008614:	bd38      	pop	{r3, r4, r5, pc}
 8008616:	bf00      	nop
 8008618:	20000ef8 	.word	0x20000ef8

0800861c <_getpid_r>:
 800861c:	f7fb b94e 	b.w	80038bc <_getpid>

08008620 <sbrk_aligned>:
 8008620:	b570      	push	{r4, r5, r6, lr}
 8008622:	4e0e      	ldr	r6, [pc, #56]	; (800865c <sbrk_aligned+0x3c>)
 8008624:	460c      	mov	r4, r1
 8008626:	6831      	ldr	r1, [r6, #0]
 8008628:	4605      	mov	r5, r0
 800862a:	b911      	cbnz	r1, 8008632 <sbrk_aligned+0x12>
 800862c:	f000 f8bc 	bl	80087a8 <_sbrk_r>
 8008630:	6030      	str	r0, [r6, #0]
 8008632:	4621      	mov	r1, r4
 8008634:	4628      	mov	r0, r5
 8008636:	f000 f8b7 	bl	80087a8 <_sbrk_r>
 800863a:	1c43      	adds	r3, r0, #1
 800863c:	d00a      	beq.n	8008654 <sbrk_aligned+0x34>
 800863e:	1cc4      	adds	r4, r0, #3
 8008640:	f024 0403 	bic.w	r4, r4, #3
 8008644:	42a0      	cmp	r0, r4
 8008646:	d007      	beq.n	8008658 <sbrk_aligned+0x38>
 8008648:	1a21      	subs	r1, r4, r0
 800864a:	4628      	mov	r0, r5
 800864c:	f000 f8ac 	bl	80087a8 <_sbrk_r>
 8008650:	3001      	adds	r0, #1
 8008652:	d101      	bne.n	8008658 <sbrk_aligned+0x38>
 8008654:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008658:	4620      	mov	r0, r4
 800865a:	bd70      	pop	{r4, r5, r6, pc}
 800865c:	20000ef4 	.word	0x20000ef4

08008660 <_malloc_r>:
 8008660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008664:	1ccd      	adds	r5, r1, #3
 8008666:	f025 0503 	bic.w	r5, r5, #3
 800866a:	3508      	adds	r5, #8
 800866c:	2d0c      	cmp	r5, #12
 800866e:	bf38      	it	cc
 8008670:	250c      	movcc	r5, #12
 8008672:	2d00      	cmp	r5, #0
 8008674:	4607      	mov	r7, r0
 8008676:	db01      	blt.n	800867c <_malloc_r+0x1c>
 8008678:	42a9      	cmp	r1, r5
 800867a:	d905      	bls.n	8008688 <_malloc_r+0x28>
 800867c:	230c      	movs	r3, #12
 800867e:	603b      	str	r3, [r7, #0]
 8008680:	2600      	movs	r6, #0
 8008682:	4630      	mov	r0, r6
 8008684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008688:	4e2e      	ldr	r6, [pc, #184]	; (8008744 <_malloc_r+0xe4>)
 800868a:	f000 f89d 	bl	80087c8 <__malloc_lock>
 800868e:	6833      	ldr	r3, [r6, #0]
 8008690:	461c      	mov	r4, r3
 8008692:	bb34      	cbnz	r4, 80086e2 <_malloc_r+0x82>
 8008694:	4629      	mov	r1, r5
 8008696:	4638      	mov	r0, r7
 8008698:	f7ff ffc2 	bl	8008620 <sbrk_aligned>
 800869c:	1c43      	adds	r3, r0, #1
 800869e:	4604      	mov	r4, r0
 80086a0:	d14d      	bne.n	800873e <_malloc_r+0xde>
 80086a2:	6834      	ldr	r4, [r6, #0]
 80086a4:	4626      	mov	r6, r4
 80086a6:	2e00      	cmp	r6, #0
 80086a8:	d140      	bne.n	800872c <_malloc_r+0xcc>
 80086aa:	6823      	ldr	r3, [r4, #0]
 80086ac:	4631      	mov	r1, r6
 80086ae:	4638      	mov	r0, r7
 80086b0:	eb04 0803 	add.w	r8, r4, r3
 80086b4:	f000 f878 	bl	80087a8 <_sbrk_r>
 80086b8:	4580      	cmp	r8, r0
 80086ba:	d13a      	bne.n	8008732 <_malloc_r+0xd2>
 80086bc:	6821      	ldr	r1, [r4, #0]
 80086be:	3503      	adds	r5, #3
 80086c0:	1a6d      	subs	r5, r5, r1
 80086c2:	f025 0503 	bic.w	r5, r5, #3
 80086c6:	3508      	adds	r5, #8
 80086c8:	2d0c      	cmp	r5, #12
 80086ca:	bf38      	it	cc
 80086cc:	250c      	movcc	r5, #12
 80086ce:	4629      	mov	r1, r5
 80086d0:	4638      	mov	r0, r7
 80086d2:	f7ff ffa5 	bl	8008620 <sbrk_aligned>
 80086d6:	3001      	adds	r0, #1
 80086d8:	d02b      	beq.n	8008732 <_malloc_r+0xd2>
 80086da:	6823      	ldr	r3, [r4, #0]
 80086dc:	442b      	add	r3, r5
 80086de:	6023      	str	r3, [r4, #0]
 80086e0:	e00e      	b.n	8008700 <_malloc_r+0xa0>
 80086e2:	6822      	ldr	r2, [r4, #0]
 80086e4:	1b52      	subs	r2, r2, r5
 80086e6:	d41e      	bmi.n	8008726 <_malloc_r+0xc6>
 80086e8:	2a0b      	cmp	r2, #11
 80086ea:	d916      	bls.n	800871a <_malloc_r+0xba>
 80086ec:	1961      	adds	r1, r4, r5
 80086ee:	42a3      	cmp	r3, r4
 80086f0:	6025      	str	r5, [r4, #0]
 80086f2:	bf18      	it	ne
 80086f4:	6059      	strne	r1, [r3, #4]
 80086f6:	6863      	ldr	r3, [r4, #4]
 80086f8:	bf08      	it	eq
 80086fa:	6031      	streq	r1, [r6, #0]
 80086fc:	5162      	str	r2, [r4, r5]
 80086fe:	604b      	str	r3, [r1, #4]
 8008700:	4638      	mov	r0, r7
 8008702:	f104 060b 	add.w	r6, r4, #11
 8008706:	f000 f865 	bl	80087d4 <__malloc_unlock>
 800870a:	f026 0607 	bic.w	r6, r6, #7
 800870e:	1d23      	adds	r3, r4, #4
 8008710:	1af2      	subs	r2, r6, r3
 8008712:	d0b6      	beq.n	8008682 <_malloc_r+0x22>
 8008714:	1b9b      	subs	r3, r3, r6
 8008716:	50a3      	str	r3, [r4, r2]
 8008718:	e7b3      	b.n	8008682 <_malloc_r+0x22>
 800871a:	6862      	ldr	r2, [r4, #4]
 800871c:	42a3      	cmp	r3, r4
 800871e:	bf0c      	ite	eq
 8008720:	6032      	streq	r2, [r6, #0]
 8008722:	605a      	strne	r2, [r3, #4]
 8008724:	e7ec      	b.n	8008700 <_malloc_r+0xa0>
 8008726:	4623      	mov	r3, r4
 8008728:	6864      	ldr	r4, [r4, #4]
 800872a:	e7b2      	b.n	8008692 <_malloc_r+0x32>
 800872c:	4634      	mov	r4, r6
 800872e:	6876      	ldr	r6, [r6, #4]
 8008730:	e7b9      	b.n	80086a6 <_malloc_r+0x46>
 8008732:	230c      	movs	r3, #12
 8008734:	603b      	str	r3, [r7, #0]
 8008736:	4638      	mov	r0, r7
 8008738:	f000 f84c 	bl	80087d4 <__malloc_unlock>
 800873c:	e7a1      	b.n	8008682 <_malloc_r+0x22>
 800873e:	6025      	str	r5, [r4, #0]
 8008740:	e7de      	b.n	8008700 <_malloc_r+0xa0>
 8008742:	bf00      	nop
 8008744:	20000ef0 	.word	0x20000ef0

08008748 <_realloc_r>:
 8008748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800874c:	4680      	mov	r8, r0
 800874e:	4614      	mov	r4, r2
 8008750:	460e      	mov	r6, r1
 8008752:	b921      	cbnz	r1, 800875e <_realloc_r+0x16>
 8008754:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008758:	4611      	mov	r1, r2
 800875a:	f7ff bf81 	b.w	8008660 <_malloc_r>
 800875e:	b92a      	cbnz	r2, 800876c <_realloc_r+0x24>
 8008760:	f000 f83e 	bl	80087e0 <_free_r>
 8008764:	4625      	mov	r5, r4
 8008766:	4628      	mov	r0, r5
 8008768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800876c:	f000 f884 	bl	8008878 <_malloc_usable_size_r>
 8008770:	4284      	cmp	r4, r0
 8008772:	4607      	mov	r7, r0
 8008774:	d802      	bhi.n	800877c <_realloc_r+0x34>
 8008776:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800877a:	d812      	bhi.n	80087a2 <_realloc_r+0x5a>
 800877c:	4621      	mov	r1, r4
 800877e:	4640      	mov	r0, r8
 8008780:	f7ff ff6e 	bl	8008660 <_malloc_r>
 8008784:	4605      	mov	r5, r0
 8008786:	2800      	cmp	r0, #0
 8008788:	d0ed      	beq.n	8008766 <_realloc_r+0x1e>
 800878a:	42bc      	cmp	r4, r7
 800878c:	4622      	mov	r2, r4
 800878e:	4631      	mov	r1, r6
 8008790:	bf28      	it	cs
 8008792:	463a      	movcs	r2, r7
 8008794:	f7ff fee2 	bl	800855c <memcpy>
 8008798:	4631      	mov	r1, r6
 800879a:	4640      	mov	r0, r8
 800879c:	f000 f820 	bl	80087e0 <_free_r>
 80087a0:	e7e1      	b.n	8008766 <_realloc_r+0x1e>
 80087a2:	4635      	mov	r5, r6
 80087a4:	e7df      	b.n	8008766 <_realloc_r+0x1e>
	...

080087a8 <_sbrk_r>:
 80087a8:	b538      	push	{r3, r4, r5, lr}
 80087aa:	4d06      	ldr	r5, [pc, #24]	; (80087c4 <_sbrk_r+0x1c>)
 80087ac:	2300      	movs	r3, #0
 80087ae:	4604      	mov	r4, r0
 80087b0:	4608      	mov	r0, r1
 80087b2:	602b      	str	r3, [r5, #0]
 80087b4:	f7fb f8a4 	bl	8003900 <_sbrk>
 80087b8:	1c43      	adds	r3, r0, #1
 80087ba:	d102      	bne.n	80087c2 <_sbrk_r+0x1a>
 80087bc:	682b      	ldr	r3, [r5, #0]
 80087be:	b103      	cbz	r3, 80087c2 <_sbrk_r+0x1a>
 80087c0:	6023      	str	r3, [r4, #0]
 80087c2:	bd38      	pop	{r3, r4, r5, pc}
 80087c4:	20000ef8 	.word	0x20000ef8

080087c8 <__malloc_lock>:
 80087c8:	4801      	ldr	r0, [pc, #4]	; (80087d0 <__malloc_lock+0x8>)
 80087ca:	f000 b85d 	b.w	8008888 <__retarget_lock_acquire_recursive>
 80087ce:	bf00      	nop
 80087d0:	20000efc 	.word	0x20000efc

080087d4 <__malloc_unlock>:
 80087d4:	4801      	ldr	r0, [pc, #4]	; (80087dc <__malloc_unlock+0x8>)
 80087d6:	f000 b858 	b.w	800888a <__retarget_lock_release_recursive>
 80087da:	bf00      	nop
 80087dc:	20000efc 	.word	0x20000efc

080087e0 <_free_r>:
 80087e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80087e2:	2900      	cmp	r1, #0
 80087e4:	d044      	beq.n	8008870 <_free_r+0x90>
 80087e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087ea:	9001      	str	r0, [sp, #4]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	f1a1 0404 	sub.w	r4, r1, #4
 80087f2:	bfb8      	it	lt
 80087f4:	18e4      	addlt	r4, r4, r3
 80087f6:	f7ff ffe7 	bl	80087c8 <__malloc_lock>
 80087fa:	4a1e      	ldr	r2, [pc, #120]	; (8008874 <_free_r+0x94>)
 80087fc:	9801      	ldr	r0, [sp, #4]
 80087fe:	6813      	ldr	r3, [r2, #0]
 8008800:	b933      	cbnz	r3, 8008810 <_free_r+0x30>
 8008802:	6063      	str	r3, [r4, #4]
 8008804:	6014      	str	r4, [r2, #0]
 8008806:	b003      	add	sp, #12
 8008808:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800880c:	f7ff bfe2 	b.w	80087d4 <__malloc_unlock>
 8008810:	42a3      	cmp	r3, r4
 8008812:	d908      	bls.n	8008826 <_free_r+0x46>
 8008814:	6825      	ldr	r5, [r4, #0]
 8008816:	1961      	adds	r1, r4, r5
 8008818:	428b      	cmp	r3, r1
 800881a:	bf01      	itttt	eq
 800881c:	6819      	ldreq	r1, [r3, #0]
 800881e:	685b      	ldreq	r3, [r3, #4]
 8008820:	1949      	addeq	r1, r1, r5
 8008822:	6021      	streq	r1, [r4, #0]
 8008824:	e7ed      	b.n	8008802 <_free_r+0x22>
 8008826:	461a      	mov	r2, r3
 8008828:	685b      	ldr	r3, [r3, #4]
 800882a:	b10b      	cbz	r3, 8008830 <_free_r+0x50>
 800882c:	42a3      	cmp	r3, r4
 800882e:	d9fa      	bls.n	8008826 <_free_r+0x46>
 8008830:	6811      	ldr	r1, [r2, #0]
 8008832:	1855      	adds	r5, r2, r1
 8008834:	42a5      	cmp	r5, r4
 8008836:	d10b      	bne.n	8008850 <_free_r+0x70>
 8008838:	6824      	ldr	r4, [r4, #0]
 800883a:	4421      	add	r1, r4
 800883c:	1854      	adds	r4, r2, r1
 800883e:	42a3      	cmp	r3, r4
 8008840:	6011      	str	r1, [r2, #0]
 8008842:	d1e0      	bne.n	8008806 <_free_r+0x26>
 8008844:	681c      	ldr	r4, [r3, #0]
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	6053      	str	r3, [r2, #4]
 800884a:	4421      	add	r1, r4
 800884c:	6011      	str	r1, [r2, #0]
 800884e:	e7da      	b.n	8008806 <_free_r+0x26>
 8008850:	d902      	bls.n	8008858 <_free_r+0x78>
 8008852:	230c      	movs	r3, #12
 8008854:	6003      	str	r3, [r0, #0]
 8008856:	e7d6      	b.n	8008806 <_free_r+0x26>
 8008858:	6825      	ldr	r5, [r4, #0]
 800885a:	1961      	adds	r1, r4, r5
 800885c:	428b      	cmp	r3, r1
 800885e:	bf04      	itt	eq
 8008860:	6819      	ldreq	r1, [r3, #0]
 8008862:	685b      	ldreq	r3, [r3, #4]
 8008864:	6063      	str	r3, [r4, #4]
 8008866:	bf04      	itt	eq
 8008868:	1949      	addeq	r1, r1, r5
 800886a:	6021      	streq	r1, [r4, #0]
 800886c:	6054      	str	r4, [r2, #4]
 800886e:	e7ca      	b.n	8008806 <_free_r+0x26>
 8008870:	b003      	add	sp, #12
 8008872:	bd30      	pop	{r4, r5, pc}
 8008874:	20000ef0 	.word	0x20000ef0

08008878 <_malloc_usable_size_r>:
 8008878:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800887c:	1f18      	subs	r0, r3, #4
 800887e:	2b00      	cmp	r3, #0
 8008880:	bfbc      	itt	lt
 8008882:	580b      	ldrlt	r3, [r1, r0]
 8008884:	18c0      	addlt	r0, r0, r3
 8008886:	4770      	bx	lr

08008888 <__retarget_lock_acquire_recursive>:
 8008888:	4770      	bx	lr

0800888a <__retarget_lock_release_recursive>:
 800888a:	4770      	bx	lr

0800888c <_init>:
 800888c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800888e:	bf00      	nop
 8008890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008892:	bc08      	pop	{r3}
 8008894:	469e      	mov	lr, r3
 8008896:	4770      	bx	lr

08008898 <_fini>:
 8008898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800889a:	bf00      	nop
 800889c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800889e:	bc08      	pop	{r3}
 80088a0:	469e      	mov	lr, r3
 80088a2:	4770      	bx	lr
