
Eurobot2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008314  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  0800849c  0800849c  0001849c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086ec  080086ec  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080086ec  080086ec  000186ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086f4  080086f4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080086f4  080086f4  000186f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086fc  080086fc  000186fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008700  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00000dcc  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000e40  20000e40  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019f5e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fc0  00000000  00000000  0003a002  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001360  00000000  00000000  0003cfc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001288  00000000  00000000  0003e328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002413e  00000000  00000000  0003f5b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000170d0  00000000  00000000  000636ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da9ac  00000000  00000000  0007a7be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015516a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000057cc  00000000  00000000  001551bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000074 	.word	0x20000074
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008484 	.word	0x08008484

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000078 	.word	0x20000078
 80001c4:	08008484 	.word	0x08008484

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
 80004e4:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 80004e6:	683b      	ldr	r3, [r7, #0]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	0a5a      	lsrs	r2, r3, #9
 80004ec:	490f      	ldr	r1, [pc, #60]	; (800052c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80004ee:	fba1 1202 	umull	r1, r2, r1, r2
 80004f2:	09d2      	lsrs	r2, r2, #7
 80004f4:	490e      	ldr	r1, [pc, #56]	; (8000530 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 80004f6:	fb01 f202 	mul.w	r2, r1, r2
 80004fa:	1a9b      	subs	r3, r3, r2
 80004fc:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	0a5b      	lsrs	r3, r3, #9
 8000504:	4a09      	ldr	r2, [pc, #36]	; (800052c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000506:	fba2 2303 	umull	r2, r3, r2, r3
 800050a:	09db      	lsrs	r3, r3, #7
 800050c:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	681a      	ldr	r2, [r3, #0]
 8000512:	68bb      	ldr	r3, [r7, #8]
 8000514:	441a      	add	r2, r3
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	68fa      	ldr	r2, [r7, #12]
 800051e:	601a      	str	r2, [r3, #0]
}
 8000520:	bf00      	nop
 8000522:	3714      	adds	r7, #20
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr
 800052c:	00044b83 	.word	0x00044b83
 8000530:	3b9aca00 	.word	0x3b9aca00

08000534 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	2200      	movs	r2, #0
 8000546:	605a      	str	r2, [r3, #4]
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	4618      	mov	r0, r3
 800054c:	370c      	adds	r7, #12
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
	...

08000558 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
 8000560:	4a04      	ldr	r2, [pc, #16]	; (8000574 <_ZN3ros3MsgC1Ev+0x1c>)
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	4618      	mov	r0, r3
 800056a:	370c      	adds	r7, #12
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr
 8000574:	080086bc 	.word	0x080086bc

08000578 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
      data()
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	4618      	mov	r0, r3
 8000584:	f7ff ffe8 	bl	8000558 <_ZN3ros3MsgC1Ev>
 8000588:	4a06      	ldr	r2, [pc, #24]	; (80005a4 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	3304      	adds	r3, #4
 8000592:	4618      	mov	r0, r3
 8000594:	f7ff ffce 	bl	8000534 <_ZN3ros4TimeC1Ev>
    {
    }
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	4618      	mov	r0, r3
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	080086a4 	.word	0x080086a4

080005a8 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80005a8:	b480      	push	{r7}
 80005aa:	b085      	sub	sp, #20
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
 80005b0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80005b2:	2300      	movs	r3, #0
 80005b4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	6859      	ldr	r1, [r3, #4]
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	683a      	ldr	r2, [r7, #0]
 80005be:	4413      	add	r3, r2
 80005c0:	b2ca      	uxtb	r2, r1
 80005c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	685b      	ldr	r3, [r3, #4]
 80005c8:	0a19      	lsrs	r1, r3, #8
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	3301      	adds	r3, #1
 80005ce:	683a      	ldr	r2, [r7, #0]
 80005d0:	4413      	add	r3, r2
 80005d2:	b2ca      	uxtb	r2, r1
 80005d4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	685b      	ldr	r3, [r3, #4]
 80005da:	0c19      	lsrs	r1, r3, #16
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	3302      	adds	r3, #2
 80005e0:	683a      	ldr	r2, [r7, #0]
 80005e2:	4413      	add	r3, r2
 80005e4:	b2ca      	uxtb	r2, r1
 80005e6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	685b      	ldr	r3, [r3, #4]
 80005ec:	0e19      	lsrs	r1, r3, #24
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	3303      	adds	r3, #3
 80005f2:	683a      	ldr	r2, [r7, #0]
 80005f4:	4413      	add	r3, r2
 80005f6:	b2ca      	uxtb	r2, r1
 80005f8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	3304      	adds	r3, #4
 80005fe:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	6899      	ldr	r1, [r3, #8]
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	683a      	ldr	r2, [r7, #0]
 8000608:	4413      	add	r3, r2
 800060a:	b2ca      	uxtb	r2, r1
 800060c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	689b      	ldr	r3, [r3, #8]
 8000612:	0a19      	lsrs	r1, r3, #8
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	3301      	adds	r3, #1
 8000618:	683a      	ldr	r2, [r7, #0]
 800061a:	4413      	add	r3, r2
 800061c:	b2ca      	uxtb	r2, r1
 800061e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	689b      	ldr	r3, [r3, #8]
 8000624:	0c19      	lsrs	r1, r3, #16
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	3302      	adds	r3, #2
 800062a:	683a      	ldr	r2, [r7, #0]
 800062c:	4413      	add	r3, r2
 800062e:	b2ca      	uxtb	r2, r1
 8000630:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	689b      	ldr	r3, [r3, #8]
 8000636:	0e19      	lsrs	r1, r3, #24
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	3303      	adds	r3, #3
 800063c:	683a      	ldr	r2, [r7, #0]
 800063e:	4413      	add	r3, r2
 8000640:	b2ca      	uxtb	r2, r1
 8000642:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	3304      	adds	r3, #4
 8000648:	60fb      	str	r3, [r7, #12]
      return offset;
 800064a:	68fb      	ldr	r3, [r7, #12]
    }
 800064c:	4618      	mov	r0, r3
 800064e:	3714      	adds	r7, #20
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr

08000658 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000658:	b480      	push	{r7}
 800065a:	b085      	sub	sp, #20
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000662:	2300      	movs	r3, #0
 8000664:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	683a      	ldr	r2, [r7, #0]
 800066a:	4413      	add	r3, r2
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	461a      	mov	r2, r3
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	685a      	ldr	r2, [r3, #4]
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	3301      	adds	r3, #1
 800067c:	6839      	ldr	r1, [r7, #0]
 800067e:	440b      	add	r3, r1
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	021b      	lsls	r3, r3, #8
 8000684:	431a      	orrs	r2, r3
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	685a      	ldr	r2, [r3, #4]
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	3302      	adds	r3, #2
 8000692:	6839      	ldr	r1, [r7, #0]
 8000694:	440b      	add	r3, r1
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	041b      	lsls	r3, r3, #16
 800069a:	431a      	orrs	r2, r3
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	685a      	ldr	r2, [r3, #4]
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	3303      	adds	r3, #3
 80006a8:	6839      	ldr	r1, [r7, #0]
 80006aa:	440b      	add	r3, r1
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	061b      	lsls	r3, r3, #24
 80006b0:	431a      	orrs	r2, r3
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	3304      	adds	r3, #4
 80006ba:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	683a      	ldr	r2, [r7, #0]
 80006c0:	4413      	add	r3, r2
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	461a      	mov	r2, r3
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	689a      	ldr	r2, [r3, #8]
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	3301      	adds	r3, #1
 80006d2:	6839      	ldr	r1, [r7, #0]
 80006d4:	440b      	add	r3, r1
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	021b      	lsls	r3, r3, #8
 80006da:	431a      	orrs	r2, r3
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	689a      	ldr	r2, [r3, #8]
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	3302      	adds	r3, #2
 80006e8:	6839      	ldr	r1, [r7, #0]
 80006ea:	440b      	add	r3, r1
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	041b      	lsls	r3, r3, #16
 80006f0:	431a      	orrs	r2, r3
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	689a      	ldr	r2, [r3, #8]
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	3303      	adds	r3, #3
 80006fe:	6839      	ldr	r1, [r7, #0]
 8000700:	440b      	add	r3, r1
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	061b      	lsls	r3, r3, #24
 8000706:	431a      	orrs	r2, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	3304      	adds	r3, #4
 8000710:	60fb      	str	r3, [r7, #12]
     return offset;
 8000712:	68fb      	ldr	r3, [r7, #12]
    }
 8000714:	4618      	mov	r0, r3
 8000716:	3714      	adds	r7, #20
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr

08000720 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
 8000728:	4b03      	ldr	r3, [pc, #12]	; (8000738 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 800072a:	4618      	mov	r0, r3
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	0800849c 	.word	0x0800849c

0800073c <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	4b03      	ldr	r3, [pc, #12]	; (8000754 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8000746:	4618      	mov	r0, r3
 8000748:	370c      	adds	r7, #12
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	080084ac 	.word	0x080084ac

08000758 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff fef8 	bl	8000558 <_ZN3ros3MsgC1Ev>
 8000768:	4a0b      	ldr	r2, [pc, #44]	; (8000798 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	2200      	movs	r2, #0
 8000772:	809a      	strh	r2, [r3, #4]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	4a09      	ldr	r2, [pc, #36]	; (800079c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	4a07      	ldr	r2, [pc, #28]	; (800079c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800077e:	60da      	str	r2, [r3, #12]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	4a06      	ldr	r2, [pc, #24]	; (800079c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000784:	611a      	str	r2, [r3, #16]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	2200      	movs	r2, #0
 800078a:	615a      	str	r2, [r3, #20]
    {
    }
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	4618      	mov	r0, r3
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	0800868c 	.word	0x0800868c
 800079c:	080084d0 	.word	0x080084d0

080007a0 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b088      	sub	sp, #32
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80007aa:	2300      	movs	r3, #0
 80007ac:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	8899      	ldrh	r1, [r3, #4]
 80007b2:	69fb      	ldr	r3, [r7, #28]
 80007b4:	683a      	ldr	r2, [r7, #0]
 80007b6:	4413      	add	r3, r2
 80007b8:	b2ca      	uxtb	r2, r1
 80007ba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	889b      	ldrh	r3, [r3, #4]
 80007c0:	0a1b      	lsrs	r3, r3, #8
 80007c2:	b299      	uxth	r1, r3
 80007c4:	69fb      	ldr	r3, [r7, #28]
 80007c6:	3301      	adds	r3, #1
 80007c8:	683a      	ldr	r2, [r7, #0]
 80007ca:	4413      	add	r3, r2
 80007cc:	b2ca      	uxtb	r2, r1
 80007ce:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80007d0:	69fb      	ldr	r3, [r7, #28]
 80007d2:	3302      	adds	r3, #2
 80007d4:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	689b      	ldr	r3, [r3, #8]
 80007da:	4618      	mov	r0, r3
 80007dc:	f7ff fcf4 	bl	80001c8 <strlen>
 80007e0:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80007e2:	69fb      	ldr	r3, [r7, #28]
 80007e4:	683a      	ldr	r2, [r7, #0]
 80007e6:	4413      	add	r3, r2
 80007e8:	69b9      	ldr	r1, [r7, #24]
 80007ea:	4618      	mov	r0, r3
 80007ec:	f001 fccb 	bl	8002186 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80007f0:	69fb      	ldr	r3, [r7, #28]
 80007f2:	3304      	adds	r3, #4
 80007f4:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	683a      	ldr	r2, [r7, #0]
 80007fa:	18d0      	adds	r0, r2, r3
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	689b      	ldr	r3, [r3, #8]
 8000800:	69ba      	ldr	r2, [r7, #24]
 8000802:	4619      	mov	r1, r3
 8000804:	f007 fca6 	bl	8008154 <memcpy>
      offset += length_topic_name;
 8000808:	69fa      	ldr	r2, [r7, #28]
 800080a:	69bb      	ldr	r3, [r7, #24]
 800080c:	4413      	add	r3, r2
 800080e:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	68db      	ldr	r3, [r3, #12]
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff fcd7 	bl	80001c8 <strlen>
 800081a:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 800081c:	69fb      	ldr	r3, [r7, #28]
 800081e:	683a      	ldr	r2, [r7, #0]
 8000820:	4413      	add	r3, r2
 8000822:	6979      	ldr	r1, [r7, #20]
 8000824:	4618      	mov	r0, r3
 8000826:	f001 fcae 	bl	8002186 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800082a:	69fb      	ldr	r3, [r7, #28]
 800082c:	3304      	adds	r3, #4
 800082e:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8000830:	69fb      	ldr	r3, [r7, #28]
 8000832:	683a      	ldr	r2, [r7, #0]
 8000834:	18d0      	adds	r0, r2, r3
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	68db      	ldr	r3, [r3, #12]
 800083a:	697a      	ldr	r2, [r7, #20]
 800083c:	4619      	mov	r1, r3
 800083e:	f007 fc89 	bl	8008154 <memcpy>
      offset += length_message_type;
 8000842:	69fa      	ldr	r2, [r7, #28]
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	4413      	add	r3, r2
 8000848:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	691b      	ldr	r3, [r3, #16]
 800084e:	4618      	mov	r0, r3
 8000850:	f7ff fcba 	bl	80001c8 <strlen>
 8000854:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8000856:	69fb      	ldr	r3, [r7, #28]
 8000858:	683a      	ldr	r2, [r7, #0]
 800085a:	4413      	add	r3, r2
 800085c:	6939      	ldr	r1, [r7, #16]
 800085e:	4618      	mov	r0, r3
 8000860:	f001 fc91 	bl	8002186 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000864:	69fb      	ldr	r3, [r7, #28]
 8000866:	3304      	adds	r3, #4
 8000868:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800086a:	69fb      	ldr	r3, [r7, #28]
 800086c:	683a      	ldr	r2, [r7, #0]
 800086e:	18d0      	adds	r0, r2, r3
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	691b      	ldr	r3, [r3, #16]
 8000874:	693a      	ldr	r2, [r7, #16]
 8000876:	4619      	mov	r1, r3
 8000878:	f007 fc6c 	bl	8008154 <memcpy>
      offset += length_md5sum;
 800087c:	69fa      	ldr	r2, [r7, #28]
 800087e:	693b      	ldr	r3, [r7, #16]
 8000880:	4413      	add	r3, r2
 8000882:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	695b      	ldr	r3, [r3, #20]
 8000888:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800088a:	68f9      	ldr	r1, [r7, #12]
 800088c:	69fb      	ldr	r3, [r7, #28]
 800088e:	683a      	ldr	r2, [r7, #0]
 8000890:	4413      	add	r3, r2
 8000892:	b2ca      	uxtb	r2, r1
 8000894:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	0a19      	lsrs	r1, r3, #8
 800089a:	69fb      	ldr	r3, [r7, #28]
 800089c:	3301      	adds	r3, #1
 800089e:	683a      	ldr	r2, [r7, #0]
 80008a0:	4413      	add	r3, r2
 80008a2:	b2ca      	uxtb	r2, r1
 80008a4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	0c19      	lsrs	r1, r3, #16
 80008aa:	69fb      	ldr	r3, [r7, #28]
 80008ac:	3302      	adds	r3, #2
 80008ae:	683a      	ldr	r2, [r7, #0]
 80008b0:	4413      	add	r3, r2
 80008b2:	b2ca      	uxtb	r2, r1
 80008b4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	0e19      	lsrs	r1, r3, #24
 80008ba:	69fb      	ldr	r3, [r7, #28]
 80008bc:	3303      	adds	r3, #3
 80008be:	683a      	ldr	r2, [r7, #0]
 80008c0:	4413      	add	r3, r2
 80008c2:	b2ca      	uxtb	r2, r1
 80008c4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	3304      	adds	r3, #4
 80008ca:	61fb      	str	r3, [r7, #28]
      return offset;
 80008cc:	69fb      	ldr	r3, [r7, #28]
    }
 80008ce:	4618      	mov	r0, r3
 80008d0:	3720      	adds	r7, #32
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80008d6:	b580      	push	{r7, lr}
 80008d8:	b08a      	sub	sp, #40	; 0x28
 80008da:	af00      	add	r7, sp, #0
 80008dc:	6078      	str	r0, [r7, #4]
 80008de:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80008e4:	69bb      	ldr	r3, [r7, #24]
 80008e6:	683a      	ldr	r2, [r7, #0]
 80008e8:	4413      	add	r3, r2
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	b29a      	uxth	r2, r3
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	889b      	ldrh	r3, [r3, #4]
 80008f6:	b21a      	sxth	r2, r3
 80008f8:	69bb      	ldr	r3, [r7, #24]
 80008fa:	3301      	adds	r3, #1
 80008fc:	6839      	ldr	r1, [r7, #0]
 80008fe:	440b      	add	r3, r1
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	021b      	lsls	r3, r3, #8
 8000904:	b21b      	sxth	r3, r3
 8000906:	4313      	orrs	r3, r2
 8000908:	b21b      	sxth	r3, r3
 800090a:	b29a      	uxth	r2, r3
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8000910:	69bb      	ldr	r3, [r7, #24]
 8000912:	3302      	adds	r3, #2
 8000914:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8000916:	69bb      	ldr	r3, [r7, #24]
 8000918:	683a      	ldr	r2, [r7, #0]
 800091a:	441a      	add	r2, r3
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	4611      	mov	r1, r2
 8000922:	4618      	mov	r0, r3
 8000924:	f001 fc4d 	bl	80021c2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000928:	69bb      	ldr	r3, [r7, #24]
 800092a:	3304      	adds	r3, #4
 800092c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800092e:	69bb      	ldr	r3, [r7, #24]
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
 8000932:	69ba      	ldr	r2, [r7, #24]
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	4413      	add	r3, r2
 8000938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800093a:	429a      	cmp	r2, r3
 800093c:	d20c      	bcs.n	8000958 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 800093e:	683a      	ldr	r2, [r7, #0]
 8000940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000942:	441a      	add	r2, r3
 8000944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000946:	3b01      	subs	r3, #1
 8000948:	6839      	ldr	r1, [r7, #0]
 800094a:	440b      	add	r3, r1
 800094c:	7812      	ldrb	r2, [r2, #0]
 800094e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000952:	3301      	adds	r3, #1
 8000954:	627b      	str	r3, [r7, #36]	; 0x24
 8000956:	e7ec      	b.n	8000932 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8000958:	69ba      	ldr	r2, [r7, #24]
 800095a:	697b      	ldr	r3, [r7, #20]
 800095c:	4413      	add	r3, r2
 800095e:	3b01      	subs	r3, #1
 8000960:	683a      	ldr	r2, [r7, #0]
 8000962:	4413      	add	r3, r2
 8000964:	2200      	movs	r2, #0
 8000966:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8000968:	69bb      	ldr	r3, [r7, #24]
 800096a:	3b01      	subs	r3, #1
 800096c:	683a      	ldr	r2, [r7, #0]
 800096e:	441a      	add	r2, r3
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8000974:	69ba      	ldr	r2, [r7, #24]
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	4413      	add	r3, r2
 800097a:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 800097c:	69bb      	ldr	r3, [r7, #24]
 800097e:	683a      	ldr	r2, [r7, #0]
 8000980:	441a      	add	r2, r3
 8000982:	f107 0310 	add.w	r3, r7, #16
 8000986:	4611      	mov	r1, r2
 8000988:	4618      	mov	r0, r3
 800098a:	f001 fc1a 	bl	80021c2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800098e:	69bb      	ldr	r3, [r7, #24]
 8000990:	3304      	adds	r3, #4
 8000992:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000994:	69bb      	ldr	r3, [r7, #24]
 8000996:	623b      	str	r3, [r7, #32]
 8000998:	69ba      	ldr	r2, [r7, #24]
 800099a:	693b      	ldr	r3, [r7, #16]
 800099c:	4413      	add	r3, r2
 800099e:	6a3a      	ldr	r2, [r7, #32]
 80009a0:	429a      	cmp	r2, r3
 80009a2:	d20c      	bcs.n	80009be <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 80009a4:	683a      	ldr	r2, [r7, #0]
 80009a6:	6a3b      	ldr	r3, [r7, #32]
 80009a8:	441a      	add	r2, r3
 80009aa:	6a3b      	ldr	r3, [r7, #32]
 80009ac:	3b01      	subs	r3, #1
 80009ae:	6839      	ldr	r1, [r7, #0]
 80009b0:	440b      	add	r3, r1
 80009b2:	7812      	ldrb	r2, [r2, #0]
 80009b4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80009b6:	6a3b      	ldr	r3, [r7, #32]
 80009b8:	3301      	adds	r3, #1
 80009ba:	623b      	str	r3, [r7, #32]
 80009bc:	e7ec      	b.n	8000998 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 80009be:	69ba      	ldr	r2, [r7, #24]
 80009c0:	693b      	ldr	r3, [r7, #16]
 80009c2:	4413      	add	r3, r2
 80009c4:	3b01      	subs	r3, #1
 80009c6:	683a      	ldr	r2, [r7, #0]
 80009c8:	4413      	add	r3, r2
 80009ca:	2200      	movs	r2, #0
 80009cc:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80009ce:	69bb      	ldr	r3, [r7, #24]
 80009d0:	3b01      	subs	r3, #1
 80009d2:	683a      	ldr	r2, [r7, #0]
 80009d4:	441a      	add	r2, r3
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80009da:	69ba      	ldr	r2, [r7, #24]
 80009dc:	693b      	ldr	r3, [r7, #16]
 80009de:	4413      	add	r3, r2
 80009e0:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80009e2:	69bb      	ldr	r3, [r7, #24]
 80009e4:	683a      	ldr	r2, [r7, #0]
 80009e6:	441a      	add	r2, r3
 80009e8:	f107 030c 	add.w	r3, r7, #12
 80009ec:	4611      	mov	r1, r2
 80009ee:	4618      	mov	r0, r3
 80009f0:	f001 fbe7 	bl	80021c2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80009f4:	69bb      	ldr	r3, [r7, #24]
 80009f6:	3304      	adds	r3, #4
 80009f8:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80009fa:	69bb      	ldr	r3, [r7, #24]
 80009fc:	61fb      	str	r3, [r7, #28]
 80009fe:	69ba      	ldr	r2, [r7, #24]
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	4413      	add	r3, r2
 8000a04:	69fa      	ldr	r2, [r7, #28]
 8000a06:	429a      	cmp	r2, r3
 8000a08:	d20c      	bcs.n	8000a24 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8000a0a:	683a      	ldr	r2, [r7, #0]
 8000a0c:	69fb      	ldr	r3, [r7, #28]
 8000a0e:	441a      	add	r2, r3
 8000a10:	69fb      	ldr	r3, [r7, #28]
 8000a12:	3b01      	subs	r3, #1
 8000a14:	6839      	ldr	r1, [r7, #0]
 8000a16:	440b      	add	r3, r1
 8000a18:	7812      	ldrb	r2, [r2, #0]
 8000a1a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000a1c:	69fb      	ldr	r3, [r7, #28]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	61fb      	str	r3, [r7, #28]
 8000a22:	e7ec      	b.n	80009fe <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8000a24:	69ba      	ldr	r2, [r7, #24]
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	4413      	add	r3, r2
 8000a2a:	3b01      	subs	r3, #1
 8000a2c:	683a      	ldr	r2, [r7, #0]
 8000a2e:	4413      	add	r3, r2
 8000a30:	2200      	movs	r2, #0
 8000a32:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8000a34:	69bb      	ldr	r3, [r7, #24]
 8000a36:	3b01      	subs	r3, #1
 8000a38:	683a      	ldr	r2, [r7, #0]
 8000a3a:	441a      	add	r2, r3
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8000a40:	69ba      	ldr	r2, [r7, #24]
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	4413      	add	r3, r2
 8000a46:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	69ba      	ldr	r2, [r7, #24]
 8000a50:	6839      	ldr	r1, [r7, #0]
 8000a52:	440a      	add	r2, r1
 8000a54:	7812      	ldrb	r2, [r2, #0]
 8000a56:	4313      	orrs	r3, r2
 8000a58:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000a5a:	68ba      	ldr	r2, [r7, #8]
 8000a5c:	69bb      	ldr	r3, [r7, #24]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	6839      	ldr	r1, [r7, #0]
 8000a62:	440b      	add	r3, r1
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	021b      	lsls	r3, r3, #8
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000a6c:	68ba      	ldr	r2, [r7, #8]
 8000a6e:	69bb      	ldr	r3, [r7, #24]
 8000a70:	3302      	adds	r3, #2
 8000a72:	6839      	ldr	r1, [r7, #0]
 8000a74:	440b      	add	r3, r1
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	041b      	lsls	r3, r3, #16
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000a7e:	68ba      	ldr	r2, [r7, #8]
 8000a80:	69bb      	ldr	r3, [r7, #24]
 8000a82:	3303      	adds	r3, #3
 8000a84:	6839      	ldr	r1, [r7, #0]
 8000a86:	440b      	add	r3, r1
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	061b      	lsls	r3, r3, #24
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8000a90:	68ba      	ldr	r2, [r7, #8]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8000a96:	69bb      	ldr	r3, [r7, #24]
 8000a98:	3304      	adds	r3, #4
 8000a9a:	61bb      	str	r3, [r7, #24]
     return offset;
 8000a9c:	69bb      	ldr	r3, [r7, #24]
    }
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3728      	adds	r7, #40	; 0x28
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
	...

08000aa8 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	4b03      	ldr	r3, [pc, #12]	; (8000ac0 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	080084d4 	.word	0x080084d4

08000ac4 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	4b03      	ldr	r3, [pc, #12]	; (8000adc <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8000ace:	4618      	mov	r0, r3
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	080084f0 	.word	0x080084f0

08000ae0 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff fd34 	bl	8000558 <_ZN3ros3MsgC1Ev>
 8000af0:	4a06      	ldr	r2, [pc, #24]	; (8000b0c <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2200      	movs	r2, #0
 8000afa:	711a      	strb	r2, [r3, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	4a04      	ldr	r2, [pc, #16]	; (8000b10 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8000b00:	609a      	str	r2, [r3, #8]
    {
    }
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4618      	mov	r0, r3
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	08008674 	.word	0x08008674
 8000b10:	080084d0 	.word	0x080084d0

08000b14 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	683a      	ldr	r2, [r7, #0]
 8000b26:	4413      	add	r3, r2
 8000b28:	687a      	ldr	r2, [r7, #4]
 8000b2a:	7912      	ldrb	r2, [r2, #4]
 8000b2c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	3301      	adds	r3, #1
 8000b32:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	689b      	ldr	r3, [r3, #8]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff fb45 	bl	80001c8 <strlen>
 8000b3e:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	683a      	ldr	r2, [r7, #0]
 8000b44:	4413      	add	r3, r2
 8000b46:	68b9      	ldr	r1, [r7, #8]
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f001 fb1c 	bl	8002186 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	3304      	adds	r3, #4
 8000b52:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	683a      	ldr	r2, [r7, #0]
 8000b58:	18d0      	adds	r0, r2, r3
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	689b      	ldr	r3, [r3, #8]
 8000b5e:	68ba      	ldr	r2, [r7, #8]
 8000b60:	4619      	mov	r1, r3
 8000b62:	f007 faf7 	bl	8008154 <memcpy>
      offset += length_msg;
 8000b66:	68fa      	ldr	r2, [r7, #12]
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	60fb      	str	r3, [r7, #12]
      return offset;
 8000b6e:	68fb      	ldr	r3, [r7, #12]
    }
 8000b70:	4618      	mov	r0, r3
 8000b72:	3710      	adds	r7, #16
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8000b86:	693b      	ldr	r3, [r7, #16]
 8000b88:	683a      	ldr	r2, [r7, #0]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	781a      	ldrb	r2, [r3, #0]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8000b92:	693b      	ldr	r3, [r7, #16]
 8000b94:	3301      	adds	r3, #1
 8000b96:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8000b98:	693b      	ldr	r3, [r7, #16]
 8000b9a:	683a      	ldr	r2, [r7, #0]
 8000b9c:	441a      	add	r2, r3
 8000b9e:	f107 030c 	add.w	r3, r7, #12
 8000ba2:	4611      	mov	r1, r2
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f001 fb0c 	bl	80021c2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	3304      	adds	r3, #4
 8000bae:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000bb0:	693b      	ldr	r3, [r7, #16]
 8000bb2:	617b      	str	r3, [r7, #20]
 8000bb4:	693a      	ldr	r2, [r7, #16]
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	4413      	add	r3, r2
 8000bba:	697a      	ldr	r2, [r7, #20]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d20c      	bcs.n	8000bda <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8000bc0:	683a      	ldr	r2, [r7, #0]
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	441a      	add	r2, r3
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	3b01      	subs	r3, #1
 8000bca:	6839      	ldr	r1, [r7, #0]
 8000bcc:	440b      	add	r3, r1
 8000bce:	7812      	ldrb	r2, [r2, #0]
 8000bd0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	617b      	str	r3, [r7, #20]
 8000bd8:	e7ec      	b.n	8000bb4 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	4413      	add	r3, r2
 8000be0:	3b01      	subs	r3, #1
 8000be2:	683a      	ldr	r2, [r7, #0]
 8000be4:	4413      	add	r3, r2
 8000be6:	2200      	movs	r2, #0
 8000be8:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	3b01      	subs	r3, #1
 8000bee:	683a      	ldr	r2, [r7, #0]
 8000bf0:	441a      	add	r2, r3
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	613b      	str	r3, [r7, #16]
     return offset;
 8000bfe:	693b      	ldr	r3, [r7, #16]
    }
 8000c00:	4618      	mov	r0, r3
 8000c02:	3718      	adds	r7, #24
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	4b03      	ldr	r3, [pc, #12]	; (8000c20 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8000c12:	4618      	mov	r0, r3
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	08008514 	.word	0x08008514

08000c24 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	4b03      	ldr	r3, [pc, #12]	; (8000c3c <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8000c2e:	4618      	mov	r0, r3
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	08008528 	.word	0x08008528

08000c40 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff fc84 	bl	8000558 <_ZN3ros3MsgC1Ev>
 8000c50:	4a11      	ldr	r2, [pc, #68]	; (8000c98 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2200      	movs	r2, #0
 8000c5a:	605a      	str	r2, [r3, #4]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2200      	movs	r2, #0
 8000c66:	60da      	str	r2, [r3, #12]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	611a      	str	r2, [r3, #16]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	f04f 0200 	mov.w	r2, #0
 8000c74:	615a      	str	r2, [r3, #20]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2200      	movs	r2, #0
 8000c7a:	619a      	str	r2, [r3, #24]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2200      	movs	r2, #0
 8000c80:	61da      	str	r2, [r3, #28]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2200      	movs	r2, #0
 8000c86:	621a      	str	r2, [r3, #32]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4618      	mov	r0, r3
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	0800865c 	.word	0x0800865c

08000c9c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08a      	sub	sp, #40	; 0x28
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6859      	ldr	r1, [r3, #4]
 8000cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb0:	683a      	ldr	r2, [r7, #0]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	b2ca      	uxtb	r2, r1
 8000cb6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	0a19      	lsrs	r1, r3, #8
 8000cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	683a      	ldr	r2, [r7, #0]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	b2ca      	uxtb	r2, r1
 8000cc8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	0c19      	lsrs	r1, r3, #16
 8000cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd2:	3302      	adds	r3, #2
 8000cd4:	683a      	ldr	r2, [r7, #0]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	b2ca      	uxtb	r2, r1
 8000cda:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	0e19      	lsrs	r1, r3, #24
 8000ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce4:	3303      	adds	r3, #3
 8000ce6:	683a      	ldr	r2, [r7, #0]
 8000ce8:	4413      	add	r3, r2
 8000cea:	b2ca      	uxtb	r2, r1
 8000cec:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8000cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf0:	3304      	adds	r3, #4
 8000cf2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	623b      	str	r3, [r7, #32]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	6a3a      	ldr	r2, [r7, #32]
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	d22b      	bcs.n	8000d5a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	68da      	ldr	r2, [r3, #12]
 8000d06:	6a3b      	ldr	r3, [r7, #32]
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	4413      	add	r3, r2
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8000d10:	6939      	ldr	r1, [r7, #16]
 8000d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d14:	683a      	ldr	r2, [r7, #0]
 8000d16:	4413      	add	r3, r2
 8000d18:	b2ca      	uxtb	r2, r1
 8000d1a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	0a19      	lsrs	r1, r3, #8
 8000d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d22:	3301      	adds	r3, #1
 8000d24:	683a      	ldr	r2, [r7, #0]
 8000d26:	4413      	add	r3, r2
 8000d28:	b2ca      	uxtb	r2, r1
 8000d2a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	0c19      	lsrs	r1, r3, #16
 8000d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d32:	3302      	adds	r3, #2
 8000d34:	683a      	ldr	r2, [r7, #0]
 8000d36:	4413      	add	r3, r2
 8000d38:	b2ca      	uxtb	r2, r1
 8000d3a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8000d3c:	693b      	ldr	r3, [r7, #16]
 8000d3e:	0e19      	lsrs	r1, r3, #24
 8000d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d42:	3303      	adds	r3, #3
 8000d44:	683a      	ldr	r2, [r7, #0]
 8000d46:	4413      	add	r3, r2
 8000d48:	b2ca      	uxtb	r2, r1
 8000d4a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8000d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d4e:	3304      	adds	r3, #4
 8000d50:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000d52:	6a3b      	ldr	r3, [r7, #32]
 8000d54:	3301      	adds	r3, #1
 8000d56:	623b      	str	r3, [r7, #32]
 8000d58:	e7ce      	b.n	8000cf8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6919      	ldr	r1, [r3, #16]
 8000d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d60:	683a      	ldr	r2, [r7, #0]
 8000d62:	4413      	add	r3, r2
 8000d64:	b2ca      	uxtb	r2, r1
 8000d66:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	691b      	ldr	r3, [r3, #16]
 8000d6c:	0a19      	lsrs	r1, r3, #8
 8000d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d70:	3301      	adds	r3, #1
 8000d72:	683a      	ldr	r2, [r7, #0]
 8000d74:	4413      	add	r3, r2
 8000d76:	b2ca      	uxtb	r2, r1
 8000d78:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	691b      	ldr	r3, [r3, #16]
 8000d7e:	0c19      	lsrs	r1, r3, #16
 8000d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d82:	3302      	adds	r3, #2
 8000d84:	683a      	ldr	r2, [r7, #0]
 8000d86:	4413      	add	r3, r2
 8000d88:	b2ca      	uxtb	r2, r1
 8000d8a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	691b      	ldr	r3, [r3, #16]
 8000d90:	0e19      	lsrs	r1, r3, #24
 8000d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d94:	3303      	adds	r3, #3
 8000d96:	683a      	ldr	r2, [r7, #0]
 8000d98:	4413      	add	r3, r2
 8000d9a:	b2ca      	uxtb	r2, r1
 8000d9c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8000d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da0:	3304      	adds	r3, #4
 8000da2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000da4:	2300      	movs	r3, #0
 8000da6:	61fb      	str	r3, [r7, #28]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	691b      	ldr	r3, [r3, #16]
 8000dac:	69fa      	ldr	r2, [r7, #28]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d22b      	bcs.n	8000e0a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	699a      	ldr	r2, [r3, #24]
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	4413      	add	r3, r2
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8000dc0:	68f9      	ldr	r1, [r7, #12]
 8000dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc4:	683a      	ldr	r2, [r7, #0]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	b2ca      	uxtb	r2, r1
 8000dca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	0a19      	lsrs	r1, r3, #8
 8000dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	683a      	ldr	r2, [r7, #0]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	b2ca      	uxtb	r2, r1
 8000dda:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	0c19      	lsrs	r1, r3, #16
 8000de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de2:	3302      	adds	r3, #2
 8000de4:	683a      	ldr	r2, [r7, #0]
 8000de6:	4413      	add	r3, r2
 8000de8:	b2ca      	uxtb	r2, r1
 8000dea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	0e19      	lsrs	r1, r3, #24
 8000df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df2:	3303      	adds	r3, #3
 8000df4:	683a      	ldr	r2, [r7, #0]
 8000df6:	4413      	add	r3, r2
 8000df8:	b2ca      	uxtb	r2, r1
 8000dfa:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8000dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dfe:	3304      	adds	r3, #4
 8000e00:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	3301      	adds	r3, #1
 8000e06:	61fb      	str	r3, [r7, #28]
 8000e08:	e7ce      	b.n	8000da8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	69d9      	ldr	r1, [r3, #28]
 8000e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e10:	683a      	ldr	r2, [r7, #0]
 8000e12:	4413      	add	r3, r2
 8000e14:	b2ca      	uxtb	r2, r1
 8000e16:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	69db      	ldr	r3, [r3, #28]
 8000e1c:	0a19      	lsrs	r1, r3, #8
 8000e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e20:	3301      	adds	r3, #1
 8000e22:	683a      	ldr	r2, [r7, #0]
 8000e24:	4413      	add	r3, r2
 8000e26:	b2ca      	uxtb	r2, r1
 8000e28:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	69db      	ldr	r3, [r3, #28]
 8000e2e:	0c19      	lsrs	r1, r3, #16
 8000e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e32:	3302      	adds	r3, #2
 8000e34:	683a      	ldr	r2, [r7, #0]
 8000e36:	4413      	add	r3, r2
 8000e38:	b2ca      	uxtb	r2, r1
 8000e3a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	69db      	ldr	r3, [r3, #28]
 8000e40:	0e19      	lsrs	r1, r3, #24
 8000e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e44:	3303      	adds	r3, #3
 8000e46:	683a      	ldr	r2, [r7, #0]
 8000e48:	4413      	add	r3, r2
 8000e4a:	b2ca      	uxtb	r2, r1
 8000e4c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8000e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e50:	3304      	adds	r3, #4
 8000e52:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000e54:	2300      	movs	r3, #0
 8000e56:	61bb      	str	r3, [r7, #24]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	69db      	ldr	r3, [r3, #28]
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	d228      	bcs.n	8000eb4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e66:	69bb      	ldr	r3, [r7, #24]
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	4413      	add	r3, r2
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff f9aa 	bl	80001c8 <strlen>
 8000e74:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8000e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e78:	683a      	ldr	r2, [r7, #0]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	6979      	ldr	r1, [r7, #20]
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f001 f981 	bl	8002186 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e86:	3304      	adds	r3, #4
 8000e88:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8000e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e8c:	683a      	ldr	r2, [r7, #0]
 8000e8e:	18d0      	adds	r0, r2, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	4413      	add	r3, r2
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	697a      	ldr	r2, [r7, #20]
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	f007 f958 	bl	8008154 <memcpy>
      offset += length_stringsi;
 8000ea4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000eac:	69bb      	ldr	r3, [r7, #24]
 8000eae:	3301      	adds	r3, #1
 8000eb0:	61bb      	str	r3, [r7, #24]
 8000eb2:	e7d1      	b.n	8000e58 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8000eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3728      	adds	r7, #40	; 0x28
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b08e      	sub	sp, #56	; 0x38
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
 8000ec6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ece:	683a      	ldr	r2, [r7, #0]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ed8:	3301      	adds	r3, #1
 8000eda:	683a      	ldr	r2, [r7, #0]
 8000edc:	4413      	add	r3, r2
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	021b      	lsls	r3, r3, #8
 8000ee2:	6a3a      	ldr	r2, [r7, #32]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000eea:	3302      	adds	r3, #2
 8000eec:	683a      	ldr	r2, [r7, #0]
 8000eee:	4413      	add	r3, r2
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	041b      	lsls	r3, r3, #16
 8000ef4:	6a3a      	ldr	r2, [r7, #32]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000efc:	3303      	adds	r3, #3
 8000efe:	683a      	ldr	r2, [r7, #0]
 8000f00:	4413      	add	r3, r2
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	061b      	lsls	r3, r3, #24
 8000f06:	6a3a      	ldr	r2, [r7, #32]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8000f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f0e:	3304      	adds	r3, #4
 8000f10:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	6a3a      	ldr	r2, [r7, #32]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d90a      	bls.n	8000f32 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	68da      	ldr	r2, [r3, #12]
 8000f20:	6a3b      	ldr	r3, [r7, #32]
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	4619      	mov	r1, r3
 8000f26:	4610      	mov	r0, r2
 8000f28:	f007 f92a 	bl	8008180 <realloc>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6a3a      	ldr	r2, [r7, #32]
 8000f36:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8000f38:	2300      	movs	r3, #0
 8000f3a:	633b      	str	r3, [r7, #48]	; 0x30
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f42:	429a      	cmp	r2, r3
 8000f44:	d236      	bcs.n	8000fb4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000f4e:	6839      	ldr	r1, [r7, #0]
 8000f50:	440a      	add	r2, r1
 8000f52:	7812      	ldrb	r2, [r2, #0]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000f58:	697a      	ldr	r2, [r7, #20]
 8000f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	6839      	ldr	r1, [r7, #0]
 8000f60:	440b      	add	r3, r1
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	021b      	lsls	r3, r3, #8
 8000f66:	4313      	orrs	r3, r2
 8000f68:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000f6a:	697a      	ldr	r2, [r7, #20]
 8000f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f6e:	3302      	adds	r3, #2
 8000f70:	6839      	ldr	r1, [r7, #0]
 8000f72:	440b      	add	r3, r1
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	041b      	lsls	r3, r3, #16
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000f7c:	697a      	ldr	r2, [r7, #20]
 8000f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f80:	3303      	adds	r3, #3
 8000f82:	6839      	ldr	r1, [r7, #0]
 8000f84:	440b      	add	r3, r1
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	061b      	lsls	r3, r3, #24
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8000f8e:	697a      	ldr	r2, [r7, #20]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8000f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f96:	3304      	adds	r3, #4
 8000f98:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	68da      	ldr	r2, [r3, #12]
 8000f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	4413      	add	r3, r2
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	3208      	adds	r2, #8
 8000fa8:	6812      	ldr	r2, [r2, #0]
 8000faa:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8000fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fae:	3301      	adds	r3, #1
 8000fb0:	633b      	str	r3, [r7, #48]	; 0x30
 8000fb2:	e7c3      	b.n	8000f3c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fb6:	683a      	ldr	r2, [r7, #0]
 8000fb8:	4413      	add	r3, r2
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	683a      	ldr	r2, [r7, #0]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	021b      	lsls	r3, r3, #8
 8000fca:	69fa      	ldr	r2, [r7, #28]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fd2:	3302      	adds	r3, #2
 8000fd4:	683a      	ldr	r2, [r7, #0]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	041b      	lsls	r3, r3, #16
 8000fdc:	69fa      	ldr	r2, [r7, #28]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fe4:	3303      	adds	r3, #3
 8000fe6:	683a      	ldr	r2, [r7, #0]
 8000fe8:	4413      	add	r3, r2
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	061b      	lsls	r3, r3, #24
 8000fee:	69fa      	ldr	r2, [r7, #28]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8000ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ff6:	3304      	adds	r3, #4
 8000ff8:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	691b      	ldr	r3, [r3, #16]
 8000ffe:	69fa      	ldr	r2, [r7, #28]
 8001000:	429a      	cmp	r2, r3
 8001002:	d90a      	bls.n	800101a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	699a      	ldr	r2, [r3, #24]
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	4619      	mov	r1, r3
 800100e:	4610      	mov	r0, r2
 8001010:	f007 f8b6 	bl	8008180 <realloc>
 8001014:	4602      	mov	r2, r0
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	69fa      	ldr	r2, [r7, #28]
 800101e:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001020:	2300      	movs	r3, #0
 8001022:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	691b      	ldr	r3, [r3, #16]
 8001028:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800102a:	429a      	cmp	r2, r3
 800102c:	d236      	bcs.n	800109c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001036:	6839      	ldr	r1, [r7, #0]
 8001038:	440a      	add	r2, r1
 800103a:	7812      	ldrb	r2, [r2, #0]
 800103c:	4313      	orrs	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001044:	3301      	adds	r3, #1
 8001046:	6839      	ldr	r1, [r7, #0]
 8001048:	440b      	add	r3, r1
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	021b      	lsls	r3, r3, #8
 800104e:	4313      	orrs	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001056:	3302      	adds	r3, #2
 8001058:	6839      	ldr	r1, [r7, #0]
 800105a:	440b      	add	r3, r1
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	041b      	lsls	r3, r3, #16
 8001060:	4313      	orrs	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001068:	3303      	adds	r3, #3
 800106a:	6839      	ldr	r1, [r7, #0]
 800106c:	440b      	add	r3, r1
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	061b      	lsls	r3, r3, #24
 8001072:	4313      	orrs	r3, r2
 8001074:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 800107c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800107e:	3304      	adds	r3, #4
 8001080:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	699a      	ldr	r2, [r3, #24]
 8001086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	4413      	add	r3, r2
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	3214      	adds	r2, #20
 8001090:	6812      	ldr	r2, [r2, #0]
 8001092:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001096:	3301      	adds	r3, #1
 8001098:	62fb      	str	r3, [r7, #44]	; 0x2c
 800109a:	e7c3      	b.n	8001024 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800109c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800109e:	683a      	ldr	r2, [r7, #0]
 80010a0:	4413      	add	r3, r2
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80010a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010a8:	3301      	adds	r3, #1
 80010aa:	683a      	ldr	r2, [r7, #0]
 80010ac:	4413      	add	r3, r2
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	021b      	lsls	r3, r3, #8
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80010b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010ba:	3302      	adds	r3, #2
 80010bc:	683a      	ldr	r2, [r7, #0]
 80010be:	4413      	add	r3, r2
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	041b      	lsls	r3, r3, #16
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80010ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010cc:	3303      	adds	r3, #3
 80010ce:	683a      	ldr	r2, [r7, #0]
 80010d0:	4413      	add	r3, r2
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	061b      	lsls	r3, r3, #24
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4313      	orrs	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 80010dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010de:	3304      	adds	r3, #4
 80010e0:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	69db      	ldr	r3, [r3, #28]
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d90a      	bls.n	8001102 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	4619      	mov	r1, r3
 80010f6:	4610      	mov	r0, r2
 80010f8:	f007 f842 	bl	8008180 <realloc>
 80010fc:	4602      	mov	r2, r0
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001108:	2300      	movs	r3, #0
 800110a:	62bb      	str	r3, [r7, #40]	; 0x28
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	69db      	ldr	r3, [r3, #28]
 8001110:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001112:	429a      	cmp	r2, r3
 8001114:	d23f      	bcs.n	8001196 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001118:	683a      	ldr	r2, [r7, #0]
 800111a:	441a      	add	r2, r3
 800111c:	f107 030c 	add.w	r3, r7, #12
 8001120:	4611      	mov	r1, r2
 8001122:	4618      	mov	r0, r3
 8001124:	f001 f84d 	bl	80021c2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800112a:	3304      	adds	r3, #4
 800112c:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800112e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
 8001132:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	4413      	add	r3, r2
 8001138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800113a:	429a      	cmp	r2, r3
 800113c:	d20c      	bcs.n	8001158 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 800113e:	683a      	ldr	r2, [r7, #0]
 8001140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001142:	441a      	add	r2, r3
 8001144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001146:	3b01      	subs	r3, #1
 8001148:	6839      	ldr	r1, [r7, #0]
 800114a:	440b      	add	r3, r1
 800114c:	7812      	ldrb	r2, [r2, #0]
 800114e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001152:	3301      	adds	r3, #1
 8001154:	627b      	str	r3, [r7, #36]	; 0x24
 8001156:	e7ec      	b.n	8001132 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001158:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	4413      	add	r3, r2
 800115e:	3b01      	subs	r3, #1
 8001160:	683a      	ldr	r2, [r7, #0]
 8001162:	4413      	add	r3, r2
 8001164:	2200      	movs	r2, #0
 8001166:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800116a:	3b01      	subs	r3, #1
 800116c:	683a      	ldr	r2, [r7, #0]
 800116e:	441a      	add	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001174:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	4413      	add	r3, r2
 800117a:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	4413      	add	r3, r2
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	3220      	adds	r2, #32
 800118a:	6812      	ldr	r2, [r2, #0]
 800118c:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 800118e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001190:	3301      	adds	r3, #1
 8001192:	62bb      	str	r3, [r7, #40]	; 0x28
 8001194:	e7ba      	b.n	800110c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8001196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001198:	4618      	mov	r0, r3
 800119a:	3738      	adds	r7, #56	; 0x38
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	4b03      	ldr	r3, [pc, #12]	; (80011b8 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 80011aa:	4618      	mov	r0, r3
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	080085f8 	.word	0x080085f8

080011bc <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	4b03      	ldr	r3, [pc, #12]	; (80011d4 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 80011c6:	4618      	mov	r0, r3
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	0800854c 	.word	0x0800854c

080011d8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
 80011e4:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	68ba      	ldr	r2, [r7, #8]
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	683a      	ldr	r2, [r7, #0]
 80011f6:	611a      	str	r2, [r3, #16]
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	4618      	mov	r0, r3
 80011fc:	3714      	adds	r7, #20
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8001206:	b580      	push	{r7, lr}
 8001208:	b082      	sub	sp, #8
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
 800120e:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	68d8      	ldr	r0, [r3, #12]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	6891      	ldr	r1, [r2, #8]
 8001220:	683a      	ldr	r2, [r7, #0]
 8001222:	4798      	blx	r3
 8001224:	4603      	mov	r3, r0
  };
 8001226:	4618      	mov	r0, r3
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 800122e:	b480      	push	{r7}
 8001230:	b083      	sub	sp, #12
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	691b      	ldr	r3, [r3, #16]
  }
 800123a:	4618      	mov	r0, r3
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void)
 8001246:	b480      	push	{r7}
 8001248:	b083      	sub	sp, #12
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
    {
    	return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800125c:	f3c3 0308 	ubfx	r3, r3, #0, #9
    }
 8001260:	4618      	mov	r0, r3
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
      huart(&huart4), rind(0), twind(0), tfind(0){
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4a0a      	ldr	r2, [pc, #40]	; (80012a0 <_ZN13STM32HardwareC1Ev+0x34>)
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2200      	movs	r2, #0
 800127e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2200      	movs	r2, #0
 8001286:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2200      	movs	r2, #0
 800128e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4618      	mov	r0, r3
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	200003cc 	.word	0x200003cc

080012a4 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f000 f804 	bl	80012ba <_ZN13STM32Hardware10reset_rbufEv>
    }
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6818      	ldr	r0, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	3304      	adds	r3, #4
 80012ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012ce:	4619      	mov	r1, r3
 80012d0:	f005 fdd6 	bl	8006e80 <HAL_UART_Receive_DMA>
    }
 80012d4:	bf00      	nop
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <_ZN13STM32Hardware4readEv>:

    int read(){
 80012dc:	b590      	push	{r4, r7, lr}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
      int c = -1;
 80012e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012e8:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f7ff ffa8 	bl	8001246 <_ZN13STM32Hardware10getRdmaIndEv>
 80012f6:	4603      	mov	r3, r0
 80012f8:	429c      	cmp	r4, r3
 80012fa:	bf14      	ite	ne
 80012fc:	2301      	movne	r3, #1
 80012fe:	2300      	moveq	r3, #0
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b00      	cmp	r3, #0
 8001304:	d012      	beq.n	800132c <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800130c:	1c59      	adds	r1, r3, #1
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	4413      	add	r3, r2
 8001318:	791b      	ldrb	r3, [r3, #4]
 800131a:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001322:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 800132c:	68fb      	ldr	r3, [r7, #12]
    }
 800132e:	4618      	mov	r0, r3
 8001330:	3714      	adds	r7, #20
 8001332:	46bd      	mov	sp, r7
 8001334:	bd90      	pop	{r4, r7, pc}
	...

08001338 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2b20      	cmp	r3, #32
 800134c:	d108      	bne.n	8001360 <_ZN13STM32Hardware5flushEv+0x28>
 800134e:	4b28      	ldr	r3, [pc, #160]	; (80013f0 <_ZN13STM32Hardware5flushEv+0xb8>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	f083 0301 	eor.w	r3, r3, #1
 8001356:	b2db      	uxtb	r3, r3
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <_ZN13STM32Hardware5flushEv+0x28>
 800135c:	2301      	movs	r3, #1
 800135e:	e000      	b.n	8001362 <_ZN13STM32Hardware5flushEv+0x2a>
 8001360:	2300      	movs	r3, #0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d03f      	beq.n	80013e6 <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 8001366:	4b22      	ldr	r3, [pc, #136]	; (80013f0 <_ZN13STM32Hardware5flushEv+0xb8>)
 8001368:	2201      	movs	r2, #1
 800136a:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001378:	429a      	cmp	r2, r3
 800137a:	d031      	beq.n	80013e0 <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001388:	429a      	cmp	r2, r3
 800138a:	d20a      	bcs.n	80013a2 <_ZN13STM32Hardware5flushEv+0x6a>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001392:	b29a      	uxth	r2, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800139a:	b29b      	uxth	r3, r3
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	b29b      	uxth	r3, r3
 80013a0:	e006      	b.n	80013b0 <_ZN13STM32Hardware5flushEv+0x78>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6818      	ldr	r0, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80013bc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	4413      	add	r3, r2
 80013c4:	89fa      	ldrh	r2, [r7, #14]
 80013c6:	4619      	mov	r1, r3
 80013c8:	f005 fcdc 	bl	8006d84 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80013d2:	89fb      	ldrh	r3, [r7, #14]
 80013d4:	4413      	add	r3, r2
 80013d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 80013e0:	4b03      	ldr	r3, [pc, #12]	; (80013f0 <_ZN13STM32Hardware5flushEv+0xb8>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	701a      	strb	r2, [r3, #0]
      }
    }
 80013e6:	bf00      	nop
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20000090 	.word	0x20000090

080013f4 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
      int n = length;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800140a:	bfa8      	it	ge
 800140c:	f44f 7300 	movge.w	r3, #512	; 0x200
 8001410:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001418:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	4293      	cmp	r3, r2
 8001420:	bf28      	it	cs
 8001422:	4613      	movcs	r3, r2
 8001424:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800142c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001430:	68fa      	ldr	r2, [r7, #12]
 8001432:	4413      	add	r3, r2
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	68b9      	ldr	r1, [r7, #8]
 8001438:	4618      	mov	r0, r3
 800143a:	f006 fe8b 	bl	8008154 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	4413      	add	r3, r2
 8001448:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8001452:	697a      	ldr	r2, [r7, #20]
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	429a      	cmp	r2, r3
 8001458:	d00b      	beq.n	8001472 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	68ba      	ldr	r2, [r7, #8]
 8001464:	18d1      	adds	r1, r2, r3
 8001466:	697a      	ldr	r2, [r7, #20]
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	461a      	mov	r2, r3
 800146e:	f006 fe71 	bl	8008154 <memcpy>
      }

      flush();
 8001472:	68f8      	ldr	r0, [r7, #12]
 8001474:	f7ff ff60 	bl	8001338 <_ZN13STM32Hardware5flushEv>
    }
 8001478:	bf00      	nop
 800147a:	3718      	adds	r7, #24
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	f002 f9fa 	bl	8003880 <HAL_GetTick>
 800148c:	4603      	mov	r3, r0
 800148e:	4618      	mov	r0, r3
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
	...

08001498 <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
      data("")
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff f858 	bl	8000558 <_ZN3ros3MsgC1Ev>
 80014a8:	4a05      	ldr	r2, [pc, #20]	; (80014c0 <_ZN8std_msgs6StringC1Ev+0x28>)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a04      	ldr	r2, [pc, #16]	; (80014c4 <_ZN8std_msgs6StringC1Ev+0x2c>)
 80014b2:	605a      	str	r2, [r3, #4]
    {
    }
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	4618      	mov	r0, r3
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	08008630 	.word	0x08008630
 80014c4:	080084d0 	.word	0x080084d0

080014c8 <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	4618      	mov	r0, r3
 80014dc:	f7fe fe74 	bl	80001c8 <strlen>
 80014e0:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	683a      	ldr	r2, [r7, #0]
 80014e6:	4413      	add	r3, r2
 80014e8:	68b9      	ldr	r1, [r7, #8]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f000 fe4b 	bl	8002186 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	3304      	adds	r3, #4
 80014f4:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	18d0      	adds	r0, r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	68ba      	ldr	r2, [r7, #8]
 8001502:	4619      	mov	r1, r3
 8001504:	f006 fe26 	bl	8008154 <memcpy>
      offset += length_data;
 8001508:	68fa      	ldr	r2, [r7, #12]
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	4413      	add	r3, r2
 800150e:	60fb      	str	r3, [r7, #12]
      return offset;
 8001510:	68fb      	ldr	r3, [r7, #12]
    }
 8001512:	4618      	mov	r0, r3
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800151a:	b580      	push	{r7, lr}
 800151c:	b086      	sub	sp, #24
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
 8001522:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001524:	2300      	movs	r3, #0
 8001526:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	683a      	ldr	r2, [r7, #0]
 800152c:	441a      	add	r2, r3
 800152e:	f107 030c 	add.w	r3, r7, #12
 8001532:	4611      	mov	r1, r2
 8001534:	4618      	mov	r0, r3
 8001536:	f000 fe44 	bl	80021c2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	3304      	adds	r3, #4
 800153e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	617b      	str	r3, [r7, #20]
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	4413      	add	r3, r2
 800154a:	697a      	ldr	r2, [r7, #20]
 800154c:	429a      	cmp	r2, r3
 800154e:	d20c      	bcs.n	800156a <_ZN8std_msgs6String11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 8001550:	683a      	ldr	r2, [r7, #0]
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	441a      	add	r2, r3
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	3b01      	subs	r3, #1
 800155a:	6839      	ldr	r1, [r7, #0]
 800155c:	440b      	add	r3, r1
 800155e:	7812      	ldrb	r2, [r2, #0]
 8001560:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	3301      	adds	r3, #1
 8001566:	617b      	str	r3, [r7, #20]
 8001568:	e7ec      	b.n	8001544 <_ZN8std_msgs6String11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_data-1]=0;
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	4413      	add	r3, r2
 8001570:	3b01      	subs	r3, #1
 8001572:	683a      	ldr	r2, [r7, #0]
 8001574:	4413      	add	r3, r2
 8001576:	2200      	movs	r2, #0
 8001578:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	3b01      	subs	r3, #1
 800157e:	683a      	ldr	r2, [r7, #0]
 8001580:	441a      	add	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	605a      	str	r2, [r3, #4]
      offset += length_data;
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	4413      	add	r3, r2
 800158c:	613b      	str	r3, [r7, #16]
     return offset;
 800158e:	693b      	ldr	r3, [r7, #16]
    }
 8001590:	4618      	mov	r0, r3
 8001592:	3718      	adds	r7, #24
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <_ZN8std_msgs6String7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/String"; };
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	4b03      	ldr	r3, [pc, #12]	; (80015b0 <_ZN8std_msgs6String7getTypeEv+0x18>)
 80015a2:	4618      	mov	r0, r3
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	08008570 	.word	0x08008570

080015b4 <_ZN8std_msgs6String6getMD5Ev>:
    virtual const char * getMD5() override { return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	4b03      	ldr	r3, [pc, #12]	; (80015cc <_ZN8std_msgs6String6getMD5Ev+0x18>)
 80015be:	4618      	mov	r0, r3
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	08008580 	.word	0x08008580

080015d0 <_ZN12EncoderMotorC1EP12GPIO_TypeDefS1_ttP17TIM_HandleTypeDeftS3_tS3_t>:
uint16_t speed_convert(float fval); // float to uint16_t convert

class EncoderMotor
{
public:
	EncoderMotor(GPIO_TypeDef* dir_port, GPIO_TypeDef* ena_port,
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
 80015dc:	807b      	strh	r3, [r7, #2]
				uint16_t dir_pin, uint16_t ena_pin,
				TIM_HandleTypeDef* encoder_timer,uint16_t encoder_timer_chanel1,
				TIM_HandleTypeDef* speed_timer, uint16_t speed_timer_chanel2,
				TIM_HandleTypeDef* pwm_timer,uint16_t pwm_timer_chanel1)
	{
		c_vel = 0;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2200      	movs	r2, #0
 80015e2:	801a      	strh	r2, [r3, #0]
		setted_vel = 0;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2200      	movs	r2, #0
 80015e8:	805a      	strh	r2, [r3, #2]
		DIR = 0;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	2200      	movs	r2, #0
 80015ee:	711a      	strb	r2, [r3, #4]
		ENA = 0;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2200      	movs	r2, #0
 80015f4:	715a      	strb	r2, [r3, #5]
		Pulse = 0;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2200      	movs	r2, #0
 80015fa:	86da      	strh	r2, [r3, #54]	; 0x36
		speed_data_register2 = 0;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2200      	movs	r2, #0
 8001600:	62da      	str	r2, [r3, #44]	; 0x2c

		DIR_Port = dir_port;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	68ba      	ldr	r2, [r7, #8]
 8001606:	609a      	str	r2, [r3, #8]
		DIR_Pin = dir_pin;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	887a      	ldrh	r2, [r7, #2]
 800160c:	819a      	strh	r2, [r3, #12]
		ENA_Port = ena_port;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	611a      	str	r2, [r3, #16]
		ENA1_Pin = ena_pin;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	8b3a      	ldrh	r2, [r7, #24]
 8001618:	829a      	strh	r2, [r3, #20]

		Encoder_Timer = encoder_timer;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	69fa      	ldr	r2, [r7, #28]
 800161e:	619a      	str	r2, [r3, #24]
		Encoder_Timer_Chanel1 = encoder_timer_chanel1;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	8c3a      	ldrh	r2, [r7, #32]
 8001624:	839a      	strh	r2, [r3, #28]

		Speed_Timer = speed_timer;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800162a:	621a      	str	r2, [r3, #32]
		Speed_Timer_Chanel2 = speed_timer_chanel2;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001630:	84da      	strh	r2, [r3, #38]	; 0x26

		Pwm_Timer = pwm_timer;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001636:	631a      	str	r2, [r3, #48]	; 0x30
		Pwm_Timer_Chanel1 = pwm_timer_chanel1;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800163c:	869a      	strh	r2, [r3, #52]	; 0x34
		//------------------for use HAL config function

		//------------------
		//HAL_TIM_IC_Start_DMA(Speed_Timer, Speed_Timer_Chanel1, &speed_data_register1, 1);
		HAL_TIM_IC_Start_DMA(Speed_Timer, Speed_Timer_Chanel2,&speed_data_register2, 1);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	6a18      	ldr	r0, [r3, #32]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001646:	4619      	mov	r1, r3
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800164e:	2301      	movs	r3, #1
 8001650:	f004 f9d4 	bl	80059fc <HAL_TIM_IC_Start_DMA>
	}
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	4618      	mov	r0, r3
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
	...

08001660 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	4a04      	ldr	r2, [pc, #16]	; (800167c <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4618      	mov	r0, r3
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	08008648 	.word	0x08008648

08001680 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff ffe8 	bl	8001660 <_ZN3ros15NodeHandleBase_C1Ev>
 8001690:	4a36      	ldr	r2, [pc, #216]	; (800176c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	3304      	adds	r3, #4
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff fde6 	bl	800126c <_ZN13STM32HardwareC1Ev>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2200      	movs	r2, #0
 80016a4:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2200      	movs	r2, #0
 80016b4:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80016c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016ca:	2100      	movs	r1, #0
 80016cc:	4618      	mov	r0, r3
 80016ce:	f006 fd4f 	bl	8008170 <memset>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80016d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016dc:	2100      	movs	r1, #0
 80016de:	4618      	mov	r0, r3
 80016e0:	f006 fd46 	bl	8008170 <memset>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f603 0324 	addw	r3, r3, #2084	; 0x824
 80016ea:	2264      	movs	r2, #100	; 0x64
 80016ec:	2100      	movs	r1, #0
 80016ee:	4618      	mov	r0, r3
 80016f0:	f006 fd3e 	bl	8008170 <memset>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f603 0388 	addw	r3, r3, #2184	; 0x888
 80016fa:	2264      	movs	r2, #100	; 0x64
 80016fc:	2100      	movs	r1, #0
 80016fe:	4618      	mov	r0, r3
 8001700:	f006 fd36 	bl	8008170 <memset>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f603 1314 	addw	r3, r3, #2324	; 0x914
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff fa70 	bl	8000c40 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4618      	mov	r0, r3
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	0800861c 	.word	0x0800861c

08001770 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b098      	sub	sp, #96	; 0x60
 8001774:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN 1 */

	const char * hello = "Hello World!!";
 8001776:	4b2b      	ldr	r3, [pc, #172]	; (8001824 <main+0xb4>)
 8001778:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800177a:	f002 f81b 	bl	80037b4 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800177e:	f000 f861 	bl	8001844 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001782:	f000 fc6f 	bl	8002064 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8001786:	f000 fc35 	bl	8001ff4 <_ZL11MX_DMA_Initv>
  MX_UART4_Init();
 800178a:	f000 fc05 	bl	8001f98 <_ZL13MX_UART4_Initv>
  MX_RTC_Init();
 800178e:	f000 f935 	bl	80019fc <_ZL11MX_RTC_Initv>
  MX_I2C1_Init();
 8001792:	f000 f8cb 	bl	800192c <_ZL12MX_I2C1_Initv>
  MX_I2C2_Init();
 8001796:	f000 f8fd 	bl	8001994 <_ZL12MX_I2C2_Initv>
  MX_TIM2_Init();
 800179a:	f000 f959 	bl	8001a50 <_ZL12MX_TIM2_Initv>
  MX_TIM5_Init();
 800179e:	f000 faeb 	bl	8001d78 <_ZL12MX_TIM5_Initv>
  MX_TIM12_Init();
 80017a2:	f000 fba9 	bl	8001ef8 <_ZL13MX_TIM12_Initv>
  MX_TIM3_Init();
 80017a6:	f000 f9c3 	bl	8001b30 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 80017aa:	f000 fa53 	bl	8001c54 <_ZL12MX_TIM4_Initv>
  MX_TIM9_Init();
 80017ae:	f000 fb53 	bl	8001e58 <_ZL12MX_TIM9_Initv>
  /* USER CODE BEGIN 2 */

    nh.initNode();
 80017b2:	481d      	ldr	r0, [pc, #116]	; (8001828 <main+0xb8>)
 80017b4:	f000 fd2a 	bl	800220c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
    nh.advertise(chatter);
 80017b8:	491c      	ldr	r1, [pc, #112]	; (800182c <main+0xbc>)
 80017ba:	481b      	ldr	r0, [pc, #108]	; (8001828 <main+0xb8>)
 80017bc:	f000 fd43 	bl	8002246 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>

    EncoderMotor EMotor_L(dir_port_l,ena_port,dir_pin_l,ena_pin,
        			  	  	encoder_timer_l,encoder_timer_chanel1_l,
      					speed_timer_l,speed_timer_chanel2_l,
    						pwm_timer_l, pwm_timer_chanel1_l);
 80017c0:	1d38      	adds	r0, r7, #4
 80017c2:	2300      	movs	r3, #0
 80017c4:	9306      	str	r3, [sp, #24]
 80017c6:	4b1a      	ldr	r3, [pc, #104]	; (8001830 <main+0xc0>)
 80017c8:	9305      	str	r3, [sp, #20]
 80017ca:	2308      	movs	r3, #8
 80017cc:	9304      	str	r3, [sp, #16]
 80017ce:	4b19      	ldr	r3, [pc, #100]	; (8001834 <main+0xc4>)
 80017d0:	9303      	str	r3, [sp, #12]
 80017d2:	2300      	movs	r3, #0
 80017d4:	9302      	str	r3, [sp, #8]
 80017d6:	4b18      	ldr	r3, [pc, #96]	; (8001838 <main+0xc8>)
 80017d8:	9301      	str	r3, [sp, #4]
 80017da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017de:	9300      	str	r3, [sp, #0]
 80017e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017e4:	4a15      	ldr	r2, [pc, #84]	; (800183c <main+0xcc>)
 80017e6:	4915      	ldr	r1, [pc, #84]	; (800183c <main+0xcc>)
 80017e8:	f7ff fef2 	bl	80015d0 <_ZN12EncoderMotorC1EP12GPIO_TypeDefS1_ttP17TIM_HandleTypeDeftS3_tS3_t>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  EMotor_L.update_params(3, 1);
 80017ec:	1d3b      	adds	r3, r7, #4
 80017ee:	2101      	movs	r1, #1
 80017f0:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80017f4:	4618      	mov	r0, r3
 80017f6:	f001 fa11 	bl	8002c1c <_ZN12EncoderMotor13update_paramsEfb>
	  EMotor_L.set_params();
 80017fa:	1d3b      	adds	r3, r7, #4
 80017fc:	4618      	mov	r0, r3
 80017fe:	f001 fa69 	bl	8002cd4 <_ZN12EncoderMotor10set_paramsEv>
	  if (nh.connected())
 8001802:	4809      	ldr	r0, [pc, #36]	; (8001828 <main+0xb8>)
 8001804:	f000 fd4f 	bl	80022a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d006      	beq.n	800181c <main+0xac>
		        {

		                str_msg.data = hello;
 800180e:	4a0c      	ldr	r2, [pc, #48]	; (8001840 <main+0xd0>)
 8001810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001812:	6053      	str	r3, [r2, #4]
		                chatter.publish(&str_msg);
 8001814:	490a      	ldr	r1, [pc, #40]	; (8001840 <main+0xd0>)
 8001816:	4805      	ldr	r0, [pc, #20]	; (800182c <main+0xbc>)
 8001818:	f7ff fcf5 	bl	8001206 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		        }

		  nh.spinOnce();
 800181c:	4802      	ldr	r0, [pc, #8]	; (8001828 <main+0xb8>)
 800181e:	f000 fd4f 	bl	80022c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
	  EMotor_L.update_params(3, 1);
 8001822:	e7e3      	b.n	80017ec <main+0x7c>
 8001824:	080085a4 	.word	0x080085a4
 8001828:	200004d0 	.word	0x200004d0
 800182c:	20000e14 	.word	0x20000e14
 8001830:	2000027c 	.word	0x2000027c
 8001834:	200001a4 	.word	0x200001a4
 8001838:	2000015c 	.word	0x2000015c
 800183c:	40020000 	.word	0x40020000
 8001840:	20000e0c 	.word	0x20000e0c

08001844 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b094      	sub	sp, #80	; 0x50
 8001848:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800184a:	f107 0320 	add.w	r3, r7, #32
 800184e:	2230      	movs	r2, #48	; 0x30
 8001850:	2100      	movs	r1, #0
 8001852:	4618      	mov	r0, r3
 8001854:	f006 fc8c 	bl	8008170 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001858:	f107 030c 	add.w	r3, r7, #12
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001868:	2300      	movs	r3, #0
 800186a:	60bb      	str	r3, [r7, #8]
 800186c:	4b2d      	ldr	r3, [pc, #180]	; (8001924 <_Z18SystemClock_Configv+0xe0>)
 800186e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001870:	4a2c      	ldr	r2, [pc, #176]	; (8001924 <_Z18SystemClock_Configv+0xe0>)
 8001872:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001876:	6413      	str	r3, [r2, #64]	; 0x40
 8001878:	4b2a      	ldr	r3, [pc, #168]	; (8001924 <_Z18SystemClock_Configv+0xe0>)
 800187a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001880:	60bb      	str	r3, [r7, #8]
 8001882:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001884:	2300      	movs	r3, #0
 8001886:	607b      	str	r3, [r7, #4]
 8001888:	4b27      	ldr	r3, [pc, #156]	; (8001928 <_Z18SystemClock_Configv+0xe4>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a26      	ldr	r2, [pc, #152]	; (8001928 <_Z18SystemClock_Configv+0xe4>)
 800188e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001892:	6013      	str	r3, [r2, #0]
 8001894:	4b24      	ldr	r3, [pc, #144]	; (8001928 <_Z18SystemClock_Configv+0xe4>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800189c:	607b      	str	r3, [r7, #4]
 800189e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80018a0:	2309      	movs	r3, #9
 80018a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80018aa:	2301      	movs	r3, #1
 80018ac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018ae:	2302      	movs	r3, #2
 80018b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80018b8:	2308      	movs	r3, #8
 80018ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80018bc:	2364      	movs	r3, #100	; 0x64
 80018be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80018c0:	2304      	movs	r3, #4
 80018c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80018c4:	2307      	movs	r3, #7
 80018c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018c8:	f107 0320 	add.w	r3, r7, #32
 80018cc:	4618      	mov	r0, r3
 80018ce:	f002 fff1 	bl	80048b4 <HAL_RCC_OscConfig>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	bf14      	ite	ne
 80018d8:	2301      	movne	r3, #1
 80018da:	2300      	moveq	r3, #0
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 80018e2:	f000 fc4b 	bl	800217c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018e6:	230f      	movs	r3, #15
 80018e8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018ea:	2302      	movs	r3, #2
 80018ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018ee:	2300      	movs	r3, #0
 80018f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018f2:	2300      	movs	r3, #0
 80018f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80018f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80018fc:	f107 030c 	add.w	r3, r7, #12
 8001900:	2100      	movs	r1, #0
 8001902:	4618      	mov	r0, r3
 8001904:	f003 fa4e 	bl	8004da4 <HAL_RCC_ClockConfig>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	bf14      	ite	ne
 800190e:	2301      	movne	r3, #1
 8001910:	2300      	moveq	r3, #0
 8001912:	b2db      	uxtb	r3, r3
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <_Z18SystemClock_Configv+0xd8>
  {
    Error_Handler();
 8001918:	f000 fc30 	bl	800217c <Error_Handler>
  }
}
 800191c:	bf00      	nop
 800191e:	3750      	adds	r7, #80	; 0x50
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40023800 	.word	0x40023800
 8001928:	40007000 	.word	0x40007000

0800192c <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001930:	4b15      	ldr	r3, [pc, #84]	; (8001988 <_ZL12MX_I2C1_Initv+0x5c>)
 8001932:	4a16      	ldr	r2, [pc, #88]	; (800198c <_ZL12MX_I2C1_Initv+0x60>)
 8001934:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001936:	4b14      	ldr	r3, [pc, #80]	; (8001988 <_ZL12MX_I2C1_Initv+0x5c>)
 8001938:	4a15      	ldr	r2, [pc, #84]	; (8001990 <_ZL12MX_I2C1_Initv+0x64>)
 800193a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800193c:	4b12      	ldr	r3, [pc, #72]	; (8001988 <_ZL12MX_I2C1_Initv+0x5c>)
 800193e:	2200      	movs	r2, #0
 8001940:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001942:	4b11      	ldr	r3, [pc, #68]	; (8001988 <_ZL12MX_I2C1_Initv+0x5c>)
 8001944:	2200      	movs	r2, #0
 8001946:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001948:	4b0f      	ldr	r3, [pc, #60]	; (8001988 <_ZL12MX_I2C1_Initv+0x5c>)
 800194a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800194e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001950:	4b0d      	ldr	r3, [pc, #52]	; (8001988 <_ZL12MX_I2C1_Initv+0x5c>)
 8001952:	2200      	movs	r2, #0
 8001954:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001956:	4b0c      	ldr	r3, [pc, #48]	; (8001988 <_ZL12MX_I2C1_Initv+0x5c>)
 8001958:	2200      	movs	r2, #0
 800195a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800195c:	4b0a      	ldr	r3, [pc, #40]	; (8001988 <_ZL12MX_I2C1_Initv+0x5c>)
 800195e:	2200      	movs	r2, #0
 8001960:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001962:	4b09      	ldr	r3, [pc, #36]	; (8001988 <_ZL12MX_I2C1_Initv+0x5c>)
 8001964:	2200      	movs	r2, #0
 8001966:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001968:	4807      	ldr	r0, [pc, #28]	; (8001988 <_ZL12MX_I2C1_Initv+0x5c>)
 800196a:	f002 fe5f 	bl	800462c <HAL_I2C_Init>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	bf14      	ite	ne
 8001974:	2301      	movne	r3, #1
 8001976:	2300      	moveq	r3, #0
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 800197e:	f000 fbfd 	bl	800217c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20000094 	.word	0x20000094
 800198c:	40005400 	.word	0x40005400
 8001990:	000186a0 	.word	0x000186a0

08001994 <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001998:	4b15      	ldr	r3, [pc, #84]	; (80019f0 <_ZL12MX_I2C2_Initv+0x5c>)
 800199a:	4a16      	ldr	r2, [pc, #88]	; (80019f4 <_ZL12MX_I2C2_Initv+0x60>)
 800199c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800199e:	4b14      	ldr	r3, [pc, #80]	; (80019f0 <_ZL12MX_I2C2_Initv+0x5c>)
 80019a0:	4a15      	ldr	r2, [pc, #84]	; (80019f8 <_ZL12MX_I2C2_Initv+0x64>)
 80019a2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019a4:	4b12      	ldr	r3, [pc, #72]	; (80019f0 <_ZL12MX_I2C2_Initv+0x5c>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80019aa:	4b11      	ldr	r3, [pc, #68]	; (80019f0 <_ZL12MX_I2C2_Initv+0x5c>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019b0:	4b0f      	ldr	r3, [pc, #60]	; (80019f0 <_ZL12MX_I2C2_Initv+0x5c>)
 80019b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019b6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019b8:	4b0d      	ldr	r3, [pc, #52]	; (80019f0 <_ZL12MX_I2C2_Initv+0x5c>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80019be:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <_ZL12MX_I2C2_Initv+0x5c>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019c4:	4b0a      	ldr	r3, [pc, #40]	; (80019f0 <_ZL12MX_I2C2_Initv+0x5c>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019ca:	4b09      	ldr	r3, [pc, #36]	; (80019f0 <_ZL12MX_I2C2_Initv+0x5c>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80019d0:	4807      	ldr	r0, [pc, #28]	; (80019f0 <_ZL12MX_I2C2_Initv+0x5c>)
 80019d2:	f002 fe2b 	bl	800462c <HAL_I2C_Init>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	bf14      	ite	ne
 80019dc:	2301      	movne	r3, #1
 80019de:	2300      	moveq	r3, #0
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <_ZL12MX_I2C2_Initv+0x56>
  {
    Error_Handler();
 80019e6:	f000 fbc9 	bl	800217c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80019ea:	bf00      	nop
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	200000e8 	.word	0x200000e8
 80019f4:	40005800 	.word	0x40005800
 80019f8:	000186a0 	.word	0x000186a0

080019fc <_ZL11MX_RTC_Initv>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001a00:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <_ZL11MX_RTC_Initv+0x4c>)
 8001a02:	4a12      	ldr	r2, [pc, #72]	; (8001a4c <_ZL11MX_RTC_Initv+0x50>)
 8001a04:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001a06:	4b10      	ldr	r3, [pc, #64]	; (8001a48 <_ZL11MX_RTC_Initv+0x4c>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001a0c:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <_ZL11MX_RTC_Initv+0x4c>)
 8001a0e:	227f      	movs	r2, #127	; 0x7f
 8001a10:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001a12:	4b0d      	ldr	r3, [pc, #52]	; (8001a48 <_ZL11MX_RTC_Initv+0x4c>)
 8001a14:	22ff      	movs	r2, #255	; 0xff
 8001a16:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a18:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <_ZL11MX_RTC_Initv+0x4c>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a1e:	4b0a      	ldr	r3, [pc, #40]	; (8001a48 <_ZL11MX_RTC_Initv+0x4c>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a24:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <_ZL11MX_RTC_Initv+0x4c>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a2a:	4807      	ldr	r0, [pc, #28]	; (8001a48 <_ZL11MX_RTC_Initv+0x4c>)
 8001a2c:	f003 fcbc 	bl	80053a8 <HAL_RTC_Init>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	bf14      	ite	ne
 8001a36:	2301      	movne	r3, #1
 8001a38:	2300      	moveq	r3, #0
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <_ZL11MX_RTC_Initv+0x48>
  {
    Error_Handler();
 8001a40:	f000 fb9c 	bl	800217c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001a44:	bf00      	nop
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	2000013c 	.word	0x2000013c
 8001a4c:	40002800 	.word	0x40002800

08001a50 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b088      	sub	sp, #32
 8001a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001a56:	f107 030c 	add.w	r3, r7, #12
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	605a      	str	r2, [r3, #4]
 8001a60:	609a      	str	r2, [r3, #8]
 8001a62:	60da      	str	r2, [r3, #12]
 8001a64:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a66:	1d3b      	adds	r3, r7, #4
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a6e:	4b2e      	ldr	r3, [pc, #184]	; (8001b28 <_ZL12MX_TIM2_Initv+0xd8>)
 8001a70:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a74:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001a76:	4b2c      	ldr	r3, [pc, #176]	; (8001b28 <_ZL12MX_TIM2_Initv+0xd8>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a7c:	4b2a      	ldr	r3, [pc, #168]	; (8001b28 <_ZL12MX_TIM2_Initv+0xd8>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001a82:	4b29      	ldr	r3, [pc, #164]	; (8001b28 <_ZL12MX_TIM2_Initv+0xd8>)
 8001a84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a88:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a8a:	4b27      	ldr	r3, [pc, #156]	; (8001b28 <_ZL12MX_TIM2_Initv+0xd8>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a90:	4b25      	ldr	r3, [pc, #148]	; (8001b28 <_ZL12MX_TIM2_Initv+0xd8>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a96:	4824      	ldr	r0, [pc, #144]	; (8001b28 <_ZL12MX_TIM2_Initv+0xd8>)
 8001a98:	f003 fd80 	bl	800559c <HAL_TIM_Base_Init>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	bf14      	ite	ne
 8001aa2:	2301      	movne	r3, #1
 8001aa4:	2300      	moveq	r3, #0
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <_ZL12MX_TIM2_Initv+0x60>
  {
    Error_Handler();
 8001aac:	f000 fb66 	bl	800217c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8001ab0:	2307      	movs	r3, #7
 8001ab2:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001ab4:	2350      	movs	r3, #80	; 0x50
 8001ab6:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 8001abc:	2300      	movs	r3, #0
 8001abe:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001ac0:	f107 030c 	add.w	r3, r7, #12
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4818      	ldr	r0, [pc, #96]	; (8001b28 <_ZL12MX_TIM2_Initv+0xd8>)
 8001ac8:	f004 faa0 	bl	800600c <HAL_TIM_SlaveConfigSynchro>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	bf14      	ite	ne
 8001ad2:	2301      	movne	r3, #1
 8001ad4:	2300      	moveq	r3, #0
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <_ZL12MX_TIM2_Initv+0x90>
  {
    Error_Handler();
 8001adc:	f000 fb4e 	bl	800217c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 8001ae0:	2340      	movs	r3, #64	; 0x40
 8001ae2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ae8:	1d3b      	adds	r3, r7, #4
 8001aea:	4619      	mov	r1, r3
 8001aec:	480e      	ldr	r0, [pc, #56]	; (8001b28 <_ZL12MX_TIM2_Initv+0xd8>)
 8001aee:	f005 f87f 	bl	8006bf0 <HAL_TIMEx_MasterConfigSynchronization>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	bf14      	ite	ne
 8001af8:	2301      	movne	r3, #1
 8001afa:	2300      	moveq	r3, #0
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <_ZL12MX_TIM2_Initv+0xb6>
  {
    Error_Handler();
 8001b02:	f000 fb3b 	bl	800217c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  htim2.Instance->CNT=Timer_Encoder_init_value; // установка начального значения таймера, чтобы избежать underflow
 8001b06:	4b08      	ldr	r3, [pc, #32]	; (8001b28 <_ZL12MX_TIM2_Initv+0xd8>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a08      	ldr	r2, [pc, #32]	; (8001b2c <_ZL12MX_TIM2_Initv+0xdc>)
 8001b0c:	625a      	str	r2, [r3, #36]	; 0x24
  htim2.Instance->CR1|=  1UL << 0; //enable timer
 8001b0e:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <_ZL12MX_TIM2_Initv+0xd8>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	4b04      	ldr	r3, [pc, #16]	; (8001b28 <_ZL12MX_TIM2_Initv+0xd8>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f042 0201 	orr.w	r2, r2, #1
 8001b1c:	601a      	str	r2, [r3, #0]

  /* USER CODE END TIM2_Init 2 */

}
 8001b1e:	bf00      	nop
 8001b20:	3720      	adds	r7, #32
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	2000015c 	.word	0x2000015c
 8001b2c:	00013880 	.word	0x00013880

08001b30 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b08c      	sub	sp, #48	; 0x30
 8001b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001b36:	f107 031c 	add.w	r3, r7, #28
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	605a      	str	r2, [r3, #4]
 8001b40:	609a      	str	r2, [r3, #8]
 8001b42:	60da      	str	r2, [r3, #12]
 8001b44:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b46:	f107 0314 	add.w	r3, r7, #20
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001b50:	1d3b      	adds	r3, r7, #4
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	605a      	str	r2, [r3, #4]
 8001b58:	609a      	str	r2, [r3, #8]
 8001b5a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b5c:	4b3b      	ldr	r3, [pc, #236]	; (8001c4c <_ZL12MX_TIM3_Initv+0x11c>)
 8001b5e:	4a3c      	ldr	r2, [pc, #240]	; (8001c50 <_ZL12MX_TIM3_Initv+0x120>)
 8001b60:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10;
 8001b62:	4b3a      	ldr	r3, [pc, #232]	; (8001c4c <_ZL12MX_TIM3_Initv+0x11c>)
 8001b64:	220a      	movs	r2, #10
 8001b66:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b68:	4b38      	ldr	r3, [pc, #224]	; (8001c4c <_ZL12MX_TIM3_Initv+0x11c>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001b6e:	4b37      	ldr	r3, [pc, #220]	; (8001c4c <_ZL12MX_TIM3_Initv+0x11c>)
 8001b70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b74:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b76:	4b35      	ldr	r3, [pc, #212]	; (8001c4c <_ZL12MX_TIM3_Initv+0x11c>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b7c:	4b33      	ldr	r3, [pc, #204]	; (8001c4c <_ZL12MX_TIM3_Initv+0x11c>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b82:	4832      	ldr	r0, [pc, #200]	; (8001c4c <_ZL12MX_TIM3_Initv+0x11c>)
 8001b84:	f003 fd0a 	bl	800559c <HAL_TIM_Base_Init>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	bf14      	ite	ne
 8001b8e:	2301      	movne	r3, #1
 8001b90:	2300      	moveq	r3, #0
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <_ZL12MX_TIM3_Initv+0x6c>
  {
    Error_Handler();
 8001b98:	f000 faf0 	bl	800217c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001b9c:	482b      	ldr	r0, [pc, #172]	; (8001c4c <_ZL12MX_TIM3_Initv+0x11c>)
 8001b9e:	f003 fed3 	bl	8005948 <HAL_TIM_IC_Init>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	bf14      	ite	ne
 8001ba8:	2301      	movne	r3, #1
 8001baa:	2300      	moveq	r3, #0
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <_ZL12MX_TIM3_Initv+0x86>
  {
    Error_Handler();
 8001bb2:	f000 fae3 	bl	800217c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001bb6:	2304      	movs	r3, #4
 8001bb8:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 8001bba:	2370      	movs	r3, #112	; 0x70
 8001bbc:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 8;
 8001bc6:	2308      	movs	r3, #8
 8001bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001bca:	f107 031c 	add.w	r3, r7, #28
 8001bce:	4619      	mov	r1, r3
 8001bd0:	481e      	ldr	r0, [pc, #120]	; (8001c4c <_ZL12MX_TIM3_Initv+0x11c>)
 8001bd2:	f004 fa1b 	bl	800600c <HAL_TIM_SlaveConfigSynchro>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	bf14      	ite	ne
 8001bdc:	2301      	movne	r3, #1
 8001bde:	2300      	moveq	r3, #0
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <_ZL12MX_TIM3_Initv+0xba>
  {
    Error_Handler();
 8001be6:	f000 fac9 	bl	800217c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bea:	2300      	movs	r3, #0
 8001bec:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bf2:	f107 0314 	add.w	r3, r7, #20
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4814      	ldr	r0, [pc, #80]	; (8001c4c <_ZL12MX_TIM3_Initv+0x11c>)
 8001bfa:	f004 fff9 	bl	8006bf0 <HAL_TIMEx_MasterConfigSynchronization>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	bf14      	ite	ne
 8001c04:	2301      	movne	r3, #1
 8001c06:	2300      	moveq	r3, #0
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <_ZL12MX_TIM3_Initv+0xe2>
  {
    Error_Handler();
 8001c0e:	f000 fab5 	bl	800217c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001c12:	2302      	movs	r3, #2
 8001c14:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001c16:	2301      	movs	r3, #1
 8001c18:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 8;
 8001c1e:	2308      	movs	r3, #8
 8001c20:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001c22:	1d3b      	adds	r3, r7, #4
 8001c24:	2208      	movs	r2, #8
 8001c26:	4619      	mov	r1, r3
 8001c28:	4808      	ldr	r0, [pc, #32]	; (8001c4c <_ZL12MX_TIM3_Initv+0x11c>)
 8001c2a:	f004 f891 	bl	8005d50 <HAL_TIM_IC_ConfigChannel>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	bf14      	ite	ne
 8001c34:	2301      	movne	r3, #1
 8001c36:	2300      	moveq	r3, #0
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <_ZL12MX_TIM3_Initv+0x112>
  {
    Error_Handler();
 8001c3e:	f000 fa9d 	bl	800217c <Error_Handler>
  //htim3.Instance->CR1|=  1UL << 0; //enable timer
  //htim3.Instance->CCER|= 1UL << 0; //enable capture

  /* USER CODE END TIM3_Init 2 */

}
 8001c42:	bf00      	nop
 8001c44:	3730      	adds	r7, #48	; 0x30
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	200001a4 	.word	0x200001a4
 8001c50:	40000400 	.word	0x40000400

08001c54 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b08c      	sub	sp, #48	; 0x30
 8001c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001c5a:	f107 031c 	add.w	r3, r7, #28
 8001c5e:	2200      	movs	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	605a      	str	r2, [r3, #4]
 8001c64:	609a      	str	r2, [r3, #8]
 8001c66:	60da      	str	r2, [r3, #12]
 8001c68:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c6a:	f107 0314 	add.w	r3, r7, #20
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001c74:	1d3b      	adds	r3, r7, #4
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	605a      	str	r2, [r3, #4]
 8001c7c:	609a      	str	r2, [r3, #8]
 8001c7e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c80:	4b3b      	ldr	r3, [pc, #236]	; (8001d70 <_ZL12MX_TIM4_Initv+0x11c>)
 8001c82:	4a3c      	ldr	r2, [pc, #240]	; (8001d74 <_ZL12MX_TIM4_Initv+0x120>)
 8001c84:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10;
 8001c86:	4b3a      	ldr	r3, [pc, #232]	; (8001d70 <_ZL12MX_TIM4_Initv+0x11c>)
 8001c88:	220a      	movs	r2, #10
 8001c8a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c8c:	4b38      	ldr	r3, [pc, #224]	; (8001d70 <_ZL12MX_TIM4_Initv+0x11c>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001c92:	4b37      	ldr	r3, [pc, #220]	; (8001d70 <_ZL12MX_TIM4_Initv+0x11c>)
 8001c94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c98:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c9a:	4b35      	ldr	r3, [pc, #212]	; (8001d70 <_ZL12MX_TIM4_Initv+0x11c>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ca0:	4b33      	ldr	r3, [pc, #204]	; (8001d70 <_ZL12MX_TIM4_Initv+0x11c>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001ca6:	4832      	ldr	r0, [pc, #200]	; (8001d70 <_ZL12MX_TIM4_Initv+0x11c>)
 8001ca8:	f003 fc78 	bl	800559c <HAL_TIM_Base_Init>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	bf14      	ite	ne
 8001cb2:	2301      	movne	r3, #1
 8001cb4:	2300      	moveq	r3, #0
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <_ZL12MX_TIM4_Initv+0x6c>
  {
    Error_Handler();
 8001cbc:	f000 fa5e 	bl	800217c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001cc0:	482b      	ldr	r0, [pc, #172]	; (8001d70 <_ZL12MX_TIM4_Initv+0x11c>)
 8001cc2:	f003 fe41 	bl	8005948 <HAL_TIM_IC_Init>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	bf14      	ite	ne
 8001ccc:	2301      	movne	r3, #1
 8001cce:	2300      	moveq	r3, #0
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <_ZL12MX_TIM4_Initv+0x86>
  {
    Error_Handler();
 8001cd6:	f000 fa51 	bl	800217c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001cda:	2304      	movs	r3, #4
 8001cdc:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 8001cde:	2370      	movs	r3, #112	; 0x70
 8001ce0:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 8;
 8001cea:	2308      	movs	r3, #8
 8001cec:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8001cee:	f107 031c 	add.w	r3, r7, #28
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	481e      	ldr	r0, [pc, #120]	; (8001d70 <_ZL12MX_TIM4_Initv+0x11c>)
 8001cf6:	f004 f989 	bl	800600c <HAL_TIM_SlaveConfigSynchro>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	bf14      	ite	ne
 8001d00:	2301      	movne	r3, #1
 8001d02:	2300      	moveq	r3, #0
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <_ZL12MX_TIM4_Initv+0xba>
  {
    Error_Handler();
 8001d0a:	f000 fa37 	bl	800217c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d12:	2300      	movs	r3, #0
 8001d14:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d16:	f107 0314 	add.w	r3, r7, #20
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4814      	ldr	r0, [pc, #80]	; (8001d70 <_ZL12MX_TIM4_Initv+0x11c>)
 8001d1e:	f004 ff67 	bl	8006bf0 <HAL_TIMEx_MasterConfigSynchronization>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	bf14      	ite	ne
 8001d28:	2301      	movne	r3, #1
 8001d2a:	2300      	moveq	r3, #0
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <_ZL12MX_TIM4_Initv+0xe2>
  {
    Error_Handler();
 8001d32:	f000 fa23 	bl	800217c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001d36:	2302      	movs	r3, #2
 8001d38:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 8;
 8001d42:	2308      	movs	r3, #8
 8001d44:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001d46:	1d3b      	adds	r3, r7, #4
 8001d48:	2200      	movs	r2, #0
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4808      	ldr	r0, [pc, #32]	; (8001d70 <_ZL12MX_TIM4_Initv+0x11c>)
 8001d4e:	f003 ffff 	bl	8005d50 <HAL_TIM_IC_ConfigChannel>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	bf14      	ite	ne
 8001d58:	2301      	movne	r3, #1
 8001d5a:	2300      	moveq	r3, #0
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <_ZL12MX_TIM4_Initv+0x112>
  {
    Error_Handler();
 8001d62:	f000 fa0b 	bl	800217c <Error_Handler>
  //htim4.Instance->CR1|=  1UL << 0; //enable timer
  //htim4.Instance->CCER|= 1UL << 0; //enable capture

  /* USER CODE END TIM4_Init 2 */

}
 8001d66:	bf00      	nop
 8001d68:	3730      	adds	r7, #48	; 0x30
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	200001ec 	.word	0x200001ec
 8001d74:	40000800 	.word	0x40000800

08001d78 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b088      	sub	sp, #32
 8001d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001d7e:	f107 030c 	add.w	r3, r7, #12
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	605a      	str	r2, [r3, #4]
 8001d88:	609a      	str	r2, [r3, #8]
 8001d8a:	60da      	str	r2, [r3, #12]
 8001d8c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d8e:	1d3b      	adds	r3, r7, #4
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001d96:	4b2d      	ldr	r3, [pc, #180]	; (8001e4c <_ZL12MX_TIM5_Initv+0xd4>)
 8001d98:	4a2d      	ldr	r2, [pc, #180]	; (8001e50 <_ZL12MX_TIM5_Initv+0xd8>)
 8001d9a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001d9c:	4b2b      	ldr	r3, [pc, #172]	; (8001e4c <_ZL12MX_TIM5_Initv+0xd4>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001da2:	4b2a      	ldr	r3, [pc, #168]	; (8001e4c <_ZL12MX_TIM5_Initv+0xd4>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001da8:	4b28      	ldr	r3, [pc, #160]	; (8001e4c <_ZL12MX_TIM5_Initv+0xd4>)
 8001daa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001dae:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001db0:	4b26      	ldr	r3, [pc, #152]	; (8001e4c <_ZL12MX_TIM5_Initv+0xd4>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001db6:	4b25      	ldr	r3, [pc, #148]	; (8001e4c <_ZL12MX_TIM5_Initv+0xd4>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001dbc:	4823      	ldr	r0, [pc, #140]	; (8001e4c <_ZL12MX_TIM5_Initv+0xd4>)
 8001dbe:	f003 fbed 	bl	800559c <HAL_TIM_Base_Init>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	bf14      	ite	ne
 8001dc8:	2301      	movne	r3, #1
 8001dca:	2300      	moveq	r3, #0
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <_ZL12MX_TIM5_Initv+0x5e>
  {
    Error_Handler();
 8001dd2:	f000 f9d3 	bl	800217c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8001dd6:	2307      	movs	r3, #7
 8001dd8:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001dda:	2350      	movs	r3, #80	; 0x50
 8001ddc:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8001dde:	2300      	movs	r3, #0
 8001de0:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 8001de2:	2300      	movs	r3, #0
 8001de4:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8001de6:	f107 030c 	add.w	r3, r7, #12
 8001dea:	4619      	mov	r1, r3
 8001dec:	4817      	ldr	r0, [pc, #92]	; (8001e4c <_ZL12MX_TIM5_Initv+0xd4>)
 8001dee:	f004 f90d 	bl	800600c <HAL_TIM_SlaveConfigSynchro>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	bf14      	ite	ne
 8001df8:	2301      	movne	r3, #1
 8001dfa:	2300      	moveq	r3, #0
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <_ZL12MX_TIM5_Initv+0x8e>
  {
    Error_Handler();
 8001e02:	f000 f9bb 	bl	800217c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e06:	2300      	movs	r3, #0
 8001e08:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001e0e:	1d3b      	adds	r3, r7, #4
 8001e10:	4619      	mov	r1, r3
 8001e12:	480e      	ldr	r0, [pc, #56]	; (8001e4c <_ZL12MX_TIM5_Initv+0xd4>)
 8001e14:	f004 feec 	bl	8006bf0 <HAL_TIMEx_MasterConfigSynchronization>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	bf14      	ite	ne
 8001e1e:	2301      	movne	r3, #1
 8001e20:	2300      	moveq	r3, #0
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <_ZL12MX_TIM5_Initv+0xb4>
  {
    Error_Handler();
 8001e28:	f000 f9a8 	bl	800217c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  htim5.Instance->CNT=Timer_Encoder_init_value; // установка начального значения таймера, чтобы избежать underflow
 8001e2c:	4b07      	ldr	r3, [pc, #28]	; (8001e4c <_ZL12MX_TIM5_Initv+0xd4>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a08      	ldr	r2, [pc, #32]	; (8001e54 <_ZL12MX_TIM5_Initv+0xdc>)
 8001e32:	625a      	str	r2, [r3, #36]	; 0x24
  htim5.Instance->CR1|=  1UL << 0; //enable timer
 8001e34:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <_ZL12MX_TIM5_Initv+0xd4>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	4b04      	ldr	r3, [pc, #16]	; (8001e4c <_ZL12MX_TIM5_Initv+0xd4>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f042 0201 	orr.w	r2, r2, #1
 8001e42:	601a      	str	r2, [r3, #0]

  /* USER CODE END TIM5_Init 2 */

}
 8001e44:	bf00      	nop
 8001e46:	3720      	adds	r7, #32
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	20000234 	.word	0x20000234
 8001e50:	40000c00 	.word	0x40000c00
 8001e54:	00013880 	.word	0x00013880

08001e58 <_ZL12MX_TIM9_Initv>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b088      	sub	sp, #32
 8001e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e5e:	1d3b      	adds	r3, r7, #4
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	60da      	str	r2, [r3, #12]
 8001e6a:	611a      	str	r2, [r3, #16]
 8001e6c:	615a      	str	r2, [r3, #20]
 8001e6e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001e70:	4b1f      	ldr	r3, [pc, #124]	; (8001ef0 <_ZL12MX_TIM9_Initv+0x98>)
 8001e72:	4a20      	ldr	r2, [pc, #128]	; (8001ef4 <_ZL12MX_TIM9_Initv+0x9c>)
 8001e74:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8001e76:	4b1e      	ldr	r3, [pc, #120]	; (8001ef0 <_ZL12MX_TIM9_Initv+0x98>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e7c:	4b1c      	ldr	r3, [pc, #112]	; (8001ef0 <_ZL12MX_TIM9_Initv+0x98>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 3000;
 8001e82:	4b1b      	ldr	r3, [pc, #108]	; (8001ef0 <_ZL12MX_TIM9_Initv+0x98>)
 8001e84:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001e88:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e8a:	4b19      	ldr	r3, [pc, #100]	; (8001ef0 <_ZL12MX_TIM9_Initv+0x98>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e90:	4b17      	ldr	r3, [pc, #92]	; (8001ef0 <_ZL12MX_TIM9_Initv+0x98>)
 8001e92:	2280      	movs	r2, #128	; 0x80
 8001e94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001e96:	4816      	ldr	r0, [pc, #88]	; (8001ef0 <_ZL12MX_TIM9_Initv+0x98>)
 8001e98:	f003 fbcf 	bl	800563a <HAL_TIM_PWM_Init>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	bf14      	ite	ne
 8001ea2:	2301      	movne	r3, #1
 8001ea4:	2300      	moveq	r3, #0
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <_ZL12MX_TIM9_Initv+0x58>
  {
    Error_Handler();
 8001eac:	f000 f966 	bl	800217c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001eb0:	2370      	movs	r3, #112	; 0x70
 8001eb2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ec0:	1d3b      	adds	r3, r7, #4
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	480a      	ldr	r0, [pc, #40]	; (8001ef0 <_ZL12MX_TIM9_Initv+0x98>)
 8001ec8:	f003 ffde 	bl	8005e88 <HAL_TIM_PWM_ConfigChannel>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	bf14      	ite	ne
 8001ed2:	2301      	movne	r3, #1
 8001ed4:	2300      	moveq	r3, #0
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <_ZL12MX_TIM9_Initv+0x88>
  {
    Error_Handler();
 8001edc:	f000 f94e 	bl	800217c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001ee0:	4803      	ldr	r0, [pc, #12]	; (8001ef0 <_ZL12MX_TIM9_Initv+0x98>)
 8001ee2:	f001 fa3d 	bl	8003360 <HAL_TIM_MspPostInit>

}
 8001ee6:	bf00      	nop
 8001ee8:	3720      	adds	r7, #32
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	2000027c 	.word	0x2000027c
 8001ef4:	40014000 	.word	0x40014000

08001ef8 <_ZL13MX_TIM12_Initv>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b088      	sub	sp, #32
 8001efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001efe:	1d3b      	adds	r3, r7, #4
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	605a      	str	r2, [r3, #4]
 8001f06:	609a      	str	r2, [r3, #8]
 8001f08:	60da      	str	r2, [r3, #12]
 8001f0a:	611a      	str	r2, [r3, #16]
 8001f0c:	615a      	str	r2, [r3, #20]
 8001f0e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001f10:	4b1f      	ldr	r3, [pc, #124]	; (8001f90 <_ZL13MX_TIM12_Initv+0x98>)
 8001f12:	4a20      	ldr	r2, [pc, #128]	; (8001f94 <_ZL13MX_TIM12_Initv+0x9c>)
 8001f14:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001f16:	4b1e      	ldr	r3, [pc, #120]	; (8001f90 <_ZL13MX_TIM12_Initv+0x98>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f1c:	4b1c      	ldr	r3, [pc, #112]	; (8001f90 <_ZL13MX_TIM12_Initv+0x98>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 3000;
 8001f22:	4b1b      	ldr	r3, [pc, #108]	; (8001f90 <_ZL13MX_TIM12_Initv+0x98>)
 8001f24:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001f28:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f2a:	4b19      	ldr	r3, [pc, #100]	; (8001f90 <_ZL13MX_TIM12_Initv+0x98>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f30:	4b17      	ldr	r3, [pc, #92]	; (8001f90 <_ZL13MX_TIM12_Initv+0x98>)
 8001f32:	2280      	movs	r2, #128	; 0x80
 8001f34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001f36:	4816      	ldr	r0, [pc, #88]	; (8001f90 <_ZL13MX_TIM12_Initv+0x98>)
 8001f38:	f003 fb7f 	bl	800563a <HAL_TIM_PWM_Init>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	bf14      	ite	ne
 8001f42:	2301      	movne	r3, #1
 8001f44:	2300      	moveq	r3, #0
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <_ZL13MX_TIM12_Initv+0x58>
  {
    Error_Handler();
 8001f4c:	f000 f916 	bl	800217c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001f50:	2370      	movs	r3, #112	; 0x70
 8001f52:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f54:	2300      	movs	r3, #0
 8001f56:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f60:	1d3b      	adds	r3, r7, #4
 8001f62:	2200      	movs	r2, #0
 8001f64:	4619      	mov	r1, r3
 8001f66:	480a      	ldr	r0, [pc, #40]	; (8001f90 <_ZL13MX_TIM12_Initv+0x98>)
 8001f68:	f003 ff8e 	bl	8005e88 <HAL_TIM_PWM_ConfigChannel>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	bf14      	ite	ne
 8001f72:	2301      	movne	r3, #1
 8001f74:	2300      	moveq	r3, #0
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <_ZL13MX_TIM12_Initv+0x88>
  {
    Error_Handler();
 8001f7c:	f000 f8fe 	bl	800217c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001f80:	4803      	ldr	r0, [pc, #12]	; (8001f90 <_ZL13MX_TIM12_Initv+0x98>)
 8001f82:	f001 f9ed 	bl	8003360 <HAL_TIM_MspPostInit>

}
 8001f86:	bf00      	nop
 8001f88:	3720      	adds	r7, #32
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	200002c4 	.word	0x200002c4
 8001f94:	40001800 	.word	0x40001800

08001f98 <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001f9c:	4b13      	ldr	r3, [pc, #76]	; (8001fec <_ZL13MX_UART4_Initv+0x54>)
 8001f9e:	4a14      	ldr	r2, [pc, #80]	; (8001ff0 <_ZL13MX_UART4_Initv+0x58>)
 8001fa0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001fa2:	4b12      	ldr	r3, [pc, #72]	; (8001fec <_ZL13MX_UART4_Initv+0x54>)
 8001fa4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fa8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001faa:	4b10      	ldr	r3, [pc, #64]	; (8001fec <_ZL13MX_UART4_Initv+0x54>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001fb0:	4b0e      	ldr	r3, [pc, #56]	; (8001fec <_ZL13MX_UART4_Initv+0x54>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001fb6:	4b0d      	ldr	r3, [pc, #52]	; (8001fec <_ZL13MX_UART4_Initv+0x54>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001fbc:	4b0b      	ldr	r3, [pc, #44]	; (8001fec <_ZL13MX_UART4_Initv+0x54>)
 8001fbe:	220c      	movs	r2, #12
 8001fc0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fc2:	4b0a      	ldr	r3, [pc, #40]	; (8001fec <_ZL13MX_UART4_Initv+0x54>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fc8:	4b08      	ldr	r3, [pc, #32]	; (8001fec <_ZL13MX_UART4_Initv+0x54>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001fce:	4807      	ldr	r0, [pc, #28]	; (8001fec <_ZL13MX_UART4_Initv+0x54>)
 8001fd0:	f004 fe8a 	bl	8006ce8 <HAL_UART_Init>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	bf14      	ite	ne
 8001fda:	2301      	movne	r3, #1
 8001fdc:	2300      	moveq	r3, #0
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <_ZL13MX_UART4_Initv+0x50>
  {
    Error_Handler();
 8001fe4:	f000 f8ca 	bl	800217c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001fe8:	bf00      	nop
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	200003cc 	.word	0x200003cc
 8001ff0:	40004c00 	.word	0x40004c00

08001ff4 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	607b      	str	r3, [r7, #4]
 8001ffe:	4b18      	ldr	r3, [pc, #96]	; (8002060 <_ZL11MX_DMA_Initv+0x6c>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	4a17      	ldr	r2, [pc, #92]	; (8002060 <_ZL11MX_DMA_Initv+0x6c>)
 8002004:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002008:	6313      	str	r3, [r2, #48]	; 0x30
 800200a:	4b15      	ldr	r3, [pc, #84]	; (8002060 <_ZL11MX_DMA_Initv+0x6c>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002012:	607b      	str	r3, [r7, #4]
 8002014:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002016:	2200      	movs	r2, #0
 8002018:	2100      	movs	r1, #0
 800201a:	200b      	movs	r0, #11
 800201c:	f001 fd17 	bl	8003a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002020:	200b      	movs	r0, #11
 8002022:	f001 fd30 	bl	8003a86 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002026:	2200      	movs	r2, #0
 8002028:	2100      	movs	r1, #0
 800202a:	200d      	movs	r0, #13
 800202c:	f001 fd0f 	bl	8003a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002030:	200d      	movs	r0, #13
 8002032:	f001 fd28 	bl	8003a86 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002036:	2200      	movs	r2, #0
 8002038:	2100      	movs	r1, #0
 800203a:	200f      	movs	r0, #15
 800203c:	f001 fd07 	bl	8003a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002040:	200f      	movs	r0, #15
 8002042:	f001 fd20 	bl	8003a86 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8002046:	2200      	movs	r2, #0
 8002048:	2100      	movs	r1, #0
 800204a:	202f      	movs	r0, #47	; 0x2f
 800204c:	f001 fcff 	bl	8003a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8002050:	202f      	movs	r0, #47	; 0x2f
 8002052:	f001 fd18 	bl	8003a86 <HAL_NVIC_EnableIRQ>

}
 8002056:	bf00      	nop
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40023800 	.word	0x40023800

08002064 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b08c      	sub	sp, #48	; 0x30
 8002068:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800206a:	f107 031c 	add.w	r3, r7, #28
 800206e:	2200      	movs	r2, #0
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	605a      	str	r2, [r3, #4]
 8002074:	609a      	str	r2, [r3, #8]
 8002076:	60da      	str	r2, [r3, #12]
 8002078:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	61bb      	str	r3, [r7, #24]
 800207e:	4b3d      	ldr	r3, [pc, #244]	; (8002174 <_ZL12MX_GPIO_Initv+0x110>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	4a3c      	ldr	r2, [pc, #240]	; (8002174 <_ZL12MX_GPIO_Initv+0x110>)
 8002084:	f043 0310 	orr.w	r3, r3, #16
 8002088:	6313      	str	r3, [r2, #48]	; 0x30
 800208a:	4b3a      	ldr	r3, [pc, #232]	; (8002174 <_ZL12MX_GPIO_Initv+0x110>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	f003 0310 	and.w	r3, r3, #16
 8002092:	61bb      	str	r3, [r7, #24]
 8002094:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	617b      	str	r3, [r7, #20]
 800209a:	4b36      	ldr	r3, [pc, #216]	; (8002174 <_ZL12MX_GPIO_Initv+0x110>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	4a35      	ldr	r2, [pc, #212]	; (8002174 <_ZL12MX_GPIO_Initv+0x110>)
 80020a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020a4:	6313      	str	r3, [r2, #48]	; 0x30
 80020a6:	4b33      	ldr	r3, [pc, #204]	; (8002174 <_ZL12MX_GPIO_Initv+0x110>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ae:	617b      	str	r3, [r7, #20]
 80020b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	613b      	str	r3, [r7, #16]
 80020b6:	4b2f      	ldr	r3, [pc, #188]	; (8002174 <_ZL12MX_GPIO_Initv+0x110>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	4a2e      	ldr	r2, [pc, #184]	; (8002174 <_ZL12MX_GPIO_Initv+0x110>)
 80020bc:	f043 0301 	orr.w	r3, r3, #1
 80020c0:	6313      	str	r3, [r2, #48]	; 0x30
 80020c2:	4b2c      	ldr	r3, [pc, #176]	; (8002174 <_ZL12MX_GPIO_Initv+0x110>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	613b      	str	r3, [r7, #16]
 80020cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	60fb      	str	r3, [r7, #12]
 80020d2:	4b28      	ldr	r3, [pc, #160]	; (8002174 <_ZL12MX_GPIO_Initv+0x110>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d6:	4a27      	ldr	r2, [pc, #156]	; (8002174 <_ZL12MX_GPIO_Initv+0x110>)
 80020d8:	f043 0302 	orr.w	r3, r3, #2
 80020dc:	6313      	str	r3, [r2, #48]	; 0x30
 80020de:	4b25      	ldr	r3, [pc, #148]	; (8002174 <_ZL12MX_GPIO_Initv+0x110>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	60bb      	str	r3, [r7, #8]
 80020ee:	4b21      	ldr	r3, [pc, #132]	; (8002174 <_ZL12MX_GPIO_Initv+0x110>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	4a20      	ldr	r2, [pc, #128]	; (8002174 <_ZL12MX_GPIO_Initv+0x110>)
 80020f4:	f043 0308 	orr.w	r3, r3, #8
 80020f8:	6313      	str	r3, [r2, #48]	; 0x30
 80020fa:	4b1e      	ldr	r3, [pc, #120]	; (8002174 <_ZL12MX_GPIO_Initv+0x110>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	f003 0308 	and.w	r3, r3, #8
 8002102:	60bb      	str	r3, [r7, #8]
 8002104:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	607b      	str	r3, [r7, #4]
 800210a:	4b1a      	ldr	r3, [pc, #104]	; (8002174 <_ZL12MX_GPIO_Initv+0x110>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	4a19      	ldr	r2, [pc, #100]	; (8002174 <_ZL12MX_GPIO_Initv+0x110>)
 8002110:	f043 0304 	orr.w	r3, r3, #4
 8002114:	6313      	str	r3, [r2, #48]	; 0x30
 8002116:	4b17      	ldr	r3, [pc, #92]	; (8002174 <_ZL12MX_GPIO_Initv+0x110>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	f003 0304 	and.w	r3, r3, #4
 800211e:	607b      	str	r3, [r7, #4]
 8002120:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIR_L_Pin|DIR_R_Pin|ENA_Pin, GPIO_PIN_RESET);
 8002122:	2200      	movs	r2, #0
 8002124:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8002128:	4813      	ldr	r0, [pc, #76]	; (8002178 <_ZL12MX_GPIO_Initv+0x114>)
 800212a:	f002 fa65 	bl	80045f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIR_L_Pin DIR_R_Pin */
  GPIO_InitStruct.Pin = DIR_L_Pin|DIR_R_Pin;
 800212e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002132:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002134:	2301      	movs	r3, #1
 8002136:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002138:	2302      	movs	r3, #2
 800213a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800213c:	2300      	movs	r3, #0
 800213e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002140:	f107 031c 	add.w	r3, r7, #28
 8002144:	4619      	mov	r1, r3
 8002146:	480c      	ldr	r0, [pc, #48]	; (8002178 <_ZL12MX_GPIO_Initv+0x114>)
 8002148:	f002 f8ba 	bl	80042c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENA_Pin */
  GPIO_InitStruct.Pin = ENA_Pin;
 800214c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002150:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002152:	2301      	movs	r3, #1
 8002154:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002156:	2300      	movs	r3, #0
 8002158:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215a:	2300      	movs	r3, #0
 800215c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(ENA_GPIO_Port, &GPIO_InitStruct);
 800215e:	f107 031c 	add.w	r3, r7, #28
 8002162:	4619      	mov	r1, r3
 8002164:	4804      	ldr	r0, [pc, #16]	; (8002178 <_ZL12MX_GPIO_Initv+0x114>)
 8002166:	f002 f8ab 	bl	80042c0 <HAL_GPIO_Init>

}
 800216a:	bf00      	nop
 800216c:	3730      	adds	r7, #48	; 0x30
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	40023800 	.word	0x40023800
 8002178:	40020000 	.word	0x40020000

0800217c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002180:	b672      	cpsid	i
}
 8002182:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002184:	e7fe      	b.n	8002184 <Error_Handler+0x8>

08002186 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8002186:	b480      	push	{r7}
 8002188:	b085      	sub	sp, #20
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
 800218e:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8002190:	2300      	movs	r3, #0
 8002192:	60fb      	str	r3, [r7, #12]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2b03      	cmp	r3, #3
 8002198:	d80d      	bhi.n	80021b6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	fa22 f103 	lsr.w	r1, r2, r3
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	4413      	add	r3, r2
 80021aa:	b2ca      	uxtb	r2, r1
 80021ac:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	3301      	adds	r3, #1
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	e7ee      	b.n	8002194 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 80021b6:	bf00      	nop
 80021b8:	3714      	adds	r7, #20
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr

080021c2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80021c2:	b480      	push	{r7}
 80021c4:	b085      	sub	sp, #20
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
 80021ca:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80021d2:	2300      	movs	r3, #0
 80021d4:	60fb      	str	r3, [r7, #12]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2b03      	cmp	r3, #3
 80021da:	d811      	bhi.n	8002200 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	6839      	ldr	r1, [r7, #0]
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	440a      	add	r2, r1
 80021e6:	7812      	ldrb	r2, [r2, #0]
 80021e8:	4611      	mov	r1, r2
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	00d2      	lsls	r2, r2, #3
 80021ee:	fa01 f202 	lsl.w	r2, r1, r2
 80021f2:	431a      	orrs	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	3301      	adds	r3, #1
 80021fc:	60fb      	str	r3, [r7, #12]
 80021fe:	e7ea      	b.n	80021d6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8002200:	bf00      	nop
 8002202:	3714      	adds	r7, #20
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	3304      	adds	r3, #4
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff f843 	bl	80012a4 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 800223e:	bf00      	nop
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8002246:	b480      	push	{r7}
 8002248:	b085      	sub	sp, #20
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
 800224e:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8002250:	2300      	movs	r3, #0
 8002252:	60fb      	str	r3, [r7, #12]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2b18      	cmp	r3, #24
 8002258:	dc1e      	bgt.n	8002298 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
    {
      if (publishers[i] == 0) // empty slot
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	4413      	add	r3, r2
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d111      	bne.n	8002290 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
      {
        publishers[i] = &p;
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	4413      	add	r3, r2
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	60da      	str	r2, [r3, #12]
        return true;
 800228c:	2301      	movs	r3, #1
 800228e:	e004      	b.n	800229a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	3301      	adds	r3, #1
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	e7dd      	b.n	8002254 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 8002298:	2300      	movs	r3, #0
  }
 800229a:	4618      	mov	r0, r3
 800229c:	3714      	adds	r7, #20
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 80022a6:	b480      	push	{r7}
 80022a8:	b083      	sub	sp, #12
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
    return configured_;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 80022b4:	4618      	mov	r0, r3
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	3304      	adds	r3, #4
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff f8d7 	bl	8001480 <_ZN13STM32Hardware4timeEv>
 80022d2:	6138      	str	r0, [r7, #16]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d903      	bls.n	80022ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d009      	beq.n	800230c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	429a      	cmp	r2, r3
 8002302:	d903      	bls.n	800230c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bool tx_stop_requested = false;
 800230c:	2300      	movs	r3, #0
 800230e:	75fb      	strb	r3, [r7, #23]
    bool saw_time_msg = false;
 8002310:	2300      	movs	r3, #0
 8002312:	75bb      	strb	r3, [r7, #22]
      if (spin_timeout_ > 0)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800231a:	2b00      	cmp	r3, #0
 800231c:	d014      	beq.n	8002348 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x88>
        if ((hardware_.time() - c_time) > spin_timeout_)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	3304      	adds	r3, #4
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff f8ac 	bl	8001480 <_ZN13STM32Hardware4timeEv>
 8002328:	4602      	mov	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad2      	subs	r2, r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8002334:	429a      	cmp	r2, r3
 8002336:	bf8c      	ite	hi
 8002338:	2301      	movhi	r3, #1
 800233a:	2300      	movls	r3, #0
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d002      	beq.n	8002348 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x88>
          return SPIN_TIMEOUT;
 8002342:	f06f 0301 	mvn.w	r3, #1
 8002346:	e1a5      	b.n	8002694 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3d4>
      int data = hardware_.read();
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	3304      	adds	r3, #4
 800234c:	4618      	mov	r0, r3
 800234e:	f7fe ffc5 	bl	80012dc <_ZN13STM32Hardware4readEv>
 8002352:	60f8      	str	r0, [r7, #12]
      if (data < 0)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2b00      	cmp	r3, #0
 8002358:	f2c0 8178 	blt.w	800264c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x38c>
      checksum_ += data;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	441a      	add	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002372:	2b07      	cmp	r3, #7
 8002374:	d11e      	bne.n	80023b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xf4>
        message_in[index_++] = data;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 800237c:	1c59      	adds	r1, r3, #1
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8002384:	68fa      	ldr	r2, [r7, #12]
 8002386:	b2d1      	uxtb	r1, r2
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	4413      	add	r3, r2
 800238c:	460a      	mov	r2, r1
 800238e:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8002398:	1e5a      	subs	r2, r3, #1
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1b4      	bne.n	8002314 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
          mode_ = MODE_MSG_CHECKSUM;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2208      	movs	r2, #8
 80023ae:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80023b2:	e7af      	b.n	8002314 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
      else if (mode_ == MODE_FIRST_FF)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d128      	bne.n	8002410 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x150>
        if (data == 0xff)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2bff      	cmp	r3, #255	; 0xff
 80023c2:	d10d      	bne.n	80023e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x120>
          mode_++;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80023ca:	1c5a      	adds	r2, r3, #1
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	f103 0214 	add.w	r2, r3, #20
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 80023de:	e799      	b.n	8002314 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	3304      	adds	r3, #4
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff f84b 	bl	8001480 <_ZN13STM32Hardware4timeEv>
 80023ea:	4602      	mov	r2, r0
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f4:	4293      	cmp	r3, r2
 80023f6:	bf8c      	ite	hi
 80023f8:	2301      	movhi	r3, #1
 80023fa:	2300      	movls	r3, #0
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d088      	beq.n	8002314 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
          configured_ = false;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 800240a:	f06f 0301 	mvn.w	r3, #1
 800240e:	e141      	b.n	8002694 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3d4>
      else if (mode_ == MODE_PROTOCOL_VER)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002416:	2b01      	cmp	r3, #1
 8002418:	d118      	bne.n	800244c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x18c>
        if (data == PROTOCOL_VER)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2bfe      	cmp	r3, #254	; 0xfe
 800241e:	d107      	bne.n	8002430 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x170>
          mode_++;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002426:	1c5a      	adds	r2, r3, #1
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800242e:	e771      	b.n	8002314 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
          mode_ = MODE_FIRST_FF;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 800243e:	2b00      	cmp	r3, #0
 8002440:	f47f af68 	bne.w	8002314 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f000 f929 	bl	800269c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 800244a:	e763      	b.n	8002314 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002452:	2b02      	cmp	r3, #2
 8002454:	d113      	bne.n	800247e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1be>
        bytes_ = data;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800246c:	1c5a      	adds	r2, r3, #1
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 800247c:	e74a      	b.n	8002314 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002484:	2b03      	cmp	r3, #3
 8002486:	d110      	bne.n	80024aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1ea>
        bytes_ += data << 8;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	021b      	lsls	r3, r3, #8
 8002492:	441a      	add	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80024a0:	1c5a      	adds	r2, r3, #1
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80024a8:	e734      	b.n	8002314 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80024b0:	2b04      	cmp	r3, #4
 80024b2:	d116      	bne.n	80024e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x222>
        if ((checksum_ % 256) == 255)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80024ba:	425a      	negs	r2, r3
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	b2d2      	uxtb	r2, r2
 80024c0:	bf58      	it	pl
 80024c2:	4253      	negpl	r3, r2
 80024c4:	2bff      	cmp	r3, #255	; 0xff
 80024c6:	d107      	bne.n	80024d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x218>
          mode_++;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80024ce:	1c5a      	adds	r2, r3, #1
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80024d6:	e71d      	b.n	8002314 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80024e0:	e718      	b.n	8002314 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80024e8:	2b05      	cmp	r3, #5
 80024ea:	d10f      	bne.n	800250c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x24c>
        topic_ = data;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80024fa:	1c5a      	adds	r2, r3, #1
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 800250a:	e703      	b.n	8002314 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002512:	2b06      	cmp	r3, #6
 8002514:	d117      	bne.n	8002546 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x286>
        topic_ += data << 8;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	021b      	lsls	r3, r3, #8
 8002520:	441a      	add	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2207      	movs	r2, #7
 800252c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8002536:	2b00      	cmp	r3, #0
 8002538:	f47f aeec 	bne.w	8002314 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
          mode_ = MODE_MSG_CHECKSUM;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2208      	movs	r2, #8
 8002540:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8002544:	e6e6      	b.n	8002314 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800254c:	2b08      	cmp	r3, #8
 800254e:	f47f aee1 	bne.w	8002314 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
        mode_ = MODE_FIRST_FF;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8002560:	425a      	negs	r2, r3
 8002562:	b2db      	uxtb	r3, r3
 8002564:	b2d2      	uxtb	r2, r2
 8002566:	bf58      	it	pl
 8002568:	4253      	negpl	r3, r2
 800256a:	2bff      	cmp	r3, #255	; 0xff
 800256c:	f47f aed2 	bne.w	8002314 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8002576:	2b00      	cmp	r3, #0
 8002578:	d110      	bne.n	800259c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2dc>
            requestSyncTime();
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 f88e 	bl	800269c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 f8a9 	bl	80026d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 8002596:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800259a:	e07b      	b.n	8002694 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3d4>
          else if (topic_ == TopicInfo::ID_TIME)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80025a2:	2b0a      	cmp	r3, #10
 80025a4:	d109      	bne.n	80025ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2fa>
            saw_time_msg = true;
 80025a6:	2301      	movs	r3, #1
 80025a8:	75bb      	strb	r3, [r7, #22]
            syncTime(message_in);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80025b0:	4619      	mov	r1, r3
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 f970 	bl	8002898 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 80025b8:	e6ac      	b.n	8002314 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80025c0:	2b06      	cmp	r3, #6
 80025c2:	d10e      	bne.n	80025e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x322>
            req_param_resp.deserialize(message_in);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f603 1214 	addw	r2, r3, #2324	; 0x914
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80025d0:	4619      	mov	r1, r3
 80025d2:	4610      	mov	r0, r2
 80025d4:	f7fe fc73 	bl	8000ebe <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 80025e0:	e698      	b.n	8002314 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80025e8:	2b0b      	cmp	r3, #11
 80025ea:	d106      	bne.n	80025fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x33a>
            configured_ = false;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
            tx_stop_requested = true;
 80025f4:	2301      	movs	r3, #1
 80025f6:	75fb      	strb	r3, [r7, #23]
 80025f8:	e68c      	b.n	8002314 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
            if (subscribers[topic_ - 100])
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8002600:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f202 2222 	addw	r2, r2, #546	; 0x222
 800260a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800260e:	2b00      	cmp	r3, #0
 8002610:	f43f ae80 	beq.w	8002314 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
              subscribers[topic_ - 100]->callback(message_in);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800261a:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002624:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800262e:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8002646:	4611      	mov	r1, r2
 8002648:	4798      	blx	r3
    while (true)
 800264a:	e663      	b.n	8002314 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
        break;
 800264c:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8002654:	2b00      	cmp	r3, #0
 8002656:	d00f      	beq.n	8002678 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b8>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8002666:	4293      	cmp	r3, r2
 8002668:	d906      	bls.n	8002678 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b8>
      requestSyncTime();
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 f816 	bl	800269c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return saw_time_msg ? SPIN_TIME_RECV : (tx_stop_requested ? SPIN_TX_STOP_REQUESTED : SPIN_OK);
 8002678:	7dbb      	ldrb	r3, [r7, #22]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d002      	beq.n	8002684 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3c4>
 800267e:	f06f 0303 	mvn.w	r3, #3
 8002682:	e006      	b.n	8002692 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3d2>
 8002684:	7dfb      	ldrb	r3, [r7, #23]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d002      	beq.n	8002690 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3d0>
 800268a:	f06f 0302 	mvn.w	r3, #2
 800268e:	e000      	b.n	8002692 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3d2>
 8002690:	2300      	movs	r3, #0
 8002692:	bf00      	nop
  }
 8002694:	4618      	mov	r0, r3
 8002696:	3718      	adds	r7, #24
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80026a4:	f107 030c 	add.w	r3, r7, #12
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7fd ff65 	bl	8000578 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f107 020c 	add.w	r2, r7, #12
 80026b8:	210a      	movs	r1, #10
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	4798      	blx	r3
    rt_time = hardware_.time();
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	3304      	adds	r3, #4
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7fe fedc 	bl	8001480 <_ZN13STM32Hardware4timeEv>
 80026c8:	4602      	mov	r2, r0
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 80026d0:	bf00      	nop
 80026d2:	3718      	adds	r7, #24
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 80026d8:	b590      	push	{r4, r7, lr}
 80026da:	b08b      	sub	sp, #44	; 0x2c
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 80026e0:	f107 030c 	add.w	r3, r7, #12
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7fe f837 	bl	8000758 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80026ea:	2300      	movs	r3, #0
 80026ec:	627b      	str	r3, [r7, #36]	; 0x24
 80026ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f0:	2b18      	cmp	r3, #24
 80026f2:	dc63      	bgt.n	80027bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	4413      	add	r3, r2
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d056      	beq.n	80027b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	4413      	add	r3, r2
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	b29b      	uxth	r3, r3
 8002718:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	4413      	add	r3, r2
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002730:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	4413      	add	r3, r2
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	6859      	ldr	r1, [r3, #4]
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	4413      	add	r3, r2
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	3308      	adds	r3, #8
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4608      	mov	r0, r1
 8002754:	4798      	blx	r3
 8002756:	4603      	mov	r3, r0
 8002758:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4413      	add	r3, r2
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	6859      	ldr	r1, [r3, #4]
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4413      	add	r3, r2
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	330c      	adds	r3, #12
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4608      	mov	r0, r1
 8002782:	4798      	blx	r3
 8002784:	4603      	mov	r3, r0
 8002786:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8002788:	f44f 7300 	mov.w	r3, #512	; 0x200
 800278c:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681c      	ldr	r4, [r3, #0]
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002798:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	4413      	add	r3, r2
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7fe fd43 	bl	800122e <_ZN3ros9Publisher15getEndpointTypeEv>
 80027a8:	4601      	mov	r1, r0
 80027aa:	f107 030c 	add.w	r3, r7, #12
 80027ae:	461a      	mov	r2, r3
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80027b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b6:	3301      	adds	r3, #1
 80027b8:	627b      	str	r3, [r7, #36]	; 0x24
 80027ba:	e798      	b.n	80026ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80027bc:	2300      	movs	r3, #0
 80027be:	627b      	str	r3, [r7, #36]	; 0x24
 80027c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c2:	2b18      	cmp	r3, #24
 80027c4:	dc5f      	bgt.n	8002886 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ca:	f202 2222 	addw	r2, r2, #546	; 0x222
 80027ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d053      	beq.n	800287e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027da:	f202 2222 	addw	r2, r2, #546	; 0x222
 80027de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ec:	f202 2222 	addw	r2, r2, #546	; 0x222
 80027f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027fc:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002800:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002808:	f202 2222 	addw	r2, r2, #546	; 0x222
 800280c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	3308      	adds	r3, #8
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4608      	mov	r0, r1
 8002818:	4798      	blx	r3
 800281a:	4603      	mov	r3, r0
 800281c:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002822:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002826:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800282e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002832:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	330c      	adds	r3, #12
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4608      	mov	r0, r1
 800283e:	4798      	blx	r3
 8002840:	4603      	mov	r3, r0
 8002842:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8002844:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002848:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681c      	ldr	r4, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002854:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002858:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002860:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	3304      	adds	r3, #4
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4608      	mov	r0, r1
 8002870:	4798      	blx	r3
 8002872:	4601      	mov	r1, r0
 8002874:	f107 030c 	add.w	r3, r7, #12
 8002878:	461a      	mov	r2, r3
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	3301      	adds	r3, #1
 8002882:	627b      	str	r3, [r7, #36]	; 0x24
 8002884:	e79c      	b.n	80027c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2201      	movs	r2, #1
 800288a:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 800288e:	bf00      	nop
 8002890:	372c      	adds	r7, #44	; 0x2c
 8002892:	46bd      	mov	sp, r7
 8002894:	bd90      	pop	{r4, r7, pc}
	...

08002898 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80028a2:	f107 0308 	add.w	r3, r7, #8
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7fd fe66 	bl	8000578 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	3304      	adds	r3, #4
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7fe fde5 	bl	8001480 <_ZN13STM32Hardware4timeEv>
 80028b6:	4602      	mov	r2, r0
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 80028c2:	f107 0308 	add.w	r3, r7, #8
 80028c6:	6839      	ldr	r1, [r7, #0]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7fd fec5 	bl	8000658 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	4915      	ldr	r1, [pc, #84]	; (8002928 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80028d4:	fba1 1303 	umull	r1, r3, r1, r3
 80028d8:	099b      	lsrs	r3, r3, #6
 80028da:	4413      	add	r3, r2
 80028dc:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 80028de:	6939      	ldr	r1, [r7, #16]
 80028e0:	697a      	ldr	r2, [r7, #20]
 80028e2:	4b11      	ldr	r3, [pc, #68]	; (8002928 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80028e4:	fba3 0302 	umull	r0, r3, r3, r2
 80028e8:	099b      	lsrs	r3, r3, #6
 80028ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028ee:	fb00 f303 	mul.w	r3, r0, r3
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	4a0d      	ldr	r2, [pc, #52]	; (800292c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 80028f6:	fb02 f303 	mul.w	r3, r2, r3
 80028fa:	440b      	add	r3, r1
 80028fc:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 80028fe:	f107 0308 	add.w	r3, r7, #8
 8002902:	3304      	adds	r3, #4
 8002904:	4619      	mov	r1, r3
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 f8a6 	bl	8002a58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	3304      	adds	r3, #4
 8002910:	4618      	mov	r0, r3
 8002912:	f7fe fdb5 	bl	8001480 <_ZN13STM32Hardware4timeEv>
 8002916:	4602      	mov	r2, r0
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 800291e:	bf00      	nop
 8002920:	3718      	adds	r7, #24
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	10624dd3 	.word	0x10624dd3
 800292c:	000f4240 	.word	0x000f4240

08002930 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8002930:	b580      	push	{r7, lr}
 8002932:	b088      	sub	sp, #32
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	2b63      	cmp	r3, #99	; 0x63
 8002940:	dd09      	ble.n	8002956 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8002948:	f083 0301 	eor.w	r3, r3, #1
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8002952:	2300      	movs	r3, #0
 8002954:	e079      	b.n	8002a4a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8002962:	3207      	adds	r2, #7
 8002964:	4611      	mov	r1, r2
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	4798      	blx	r3
 800296a:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	22ff      	movs	r2, #255	; 0xff
 8002970:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	22fe      	movs	r2, #254	; 0xfe
 8002978:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	b2da      	uxtb	r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	b29b      	uxth	r3, r3
 800298a:	0a1b      	lsrs	r3, r3, #8
 800298c:	b29b      	uxth	r3, r3
 800298e:	b2da      	uxtb	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 80029a2:	4413      	add	r3, r2
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	43db      	mvns	r3, r3
 80029a8:	b2da      	uxtb	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	b2da      	uxtb	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	b21b      	sxth	r3, r3
 80029be:	121b      	asrs	r3, r3, #8
 80029c0:	b21b      	sxth	r3, r3
 80029c2:	b2da      	uxtb	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 80029ca:	2300      	movs	r3, #0
 80029cc:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80029ce:	2305      	movs	r3, #5
 80029d0:	61bb      	str	r3, [r7, #24]
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	3306      	adds	r3, #6
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	429a      	cmp	r2, r3
 80029da:	dc0d      	bgt.n	80029f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 80029dc:	68fa      	ldr	r2, [r7, #12]
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	4413      	add	r3, r2
 80029e2:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	461a      	mov	r2, r3
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	4413      	add	r3, r2
 80029ee:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	3301      	adds	r3, #1
 80029f4:	61bb      	str	r3, [r7, #24]
 80029f6:	e7ec      	b.n	80029d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	3307      	adds	r3, #7
 80029fc:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	425a      	negs	r2, r3
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	b2d2      	uxtb	r2, r2
 8002a06:	bf58      	it	pl
 8002a08:	4253      	negpl	r3, r2
 8002a0a:	b2da      	uxtb	r2, r3
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	1c59      	adds	r1, r3, #1
 8002a10:	6179      	str	r1, [r7, #20]
 8002a12:	43d2      	mvns	r2, r2
 8002a14:	b2d1      	uxtb	r1, r2
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	4413      	add	r3, r2
 8002a1a:	460a      	mov	r2, r1
 8002a1c:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a26:	dc0a      	bgt.n	8002a3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	1d18      	adds	r0, r3, #4
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	4619      	mov	r1, r3
 8002a36:	f7fe fcdd 	bl	80013f4 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	e005      	b.n	8002a4a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8002a3e:	4905      	ldr	r1, [pc, #20]	; (8002a54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	f000 f849 	bl	8002ad8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8002a46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3720      	adds	r7, #32
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	080085b4 	.word	0x080085b4

08002a58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	3304      	adds	r3, #4
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7fe fd0a 	bl	8001480 <_ZN13STM32Hardware4timeEv>
 8002a6c:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	4915      	ldr	r1, [pc, #84]	; (8002acc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8002a76:	fba1 1303 	umull	r1, r3, r1, r3
 8002a7a:	099b      	lsrs	r3, r3, #6
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	1e5a      	subs	r2, r3, #1
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	6859      	ldr	r1, [r3, #4]
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	4b0f      	ldr	r3, [pc, #60]	; (8002acc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8002a8e:	fba3 0302 	umull	r0, r3, r3, r2
 8002a92:	099b      	lsrs	r3, r3, #6
 8002a94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a98:	fb00 f303 	mul.w	r3, r0, r3
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	4a0c      	ldr	r2, [pc, #48]	; (8002ad0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 8002aa0:	fb02 f303 	mul.w	r3, r2, r3
 8002aa4:	1aca      	subs	r2, r1, r3
 8002aa6:	4b0b      	ldr	r3, [pc, #44]	; (8002ad4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 8002aa8:	4413      	add	r3, r2
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8002abc:	4619      	mov	r1, r3
 8002abe:	4610      	mov	r0, r2
 8002ac0:	f7fd fd0c 	bl	80004dc <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8002ac4:	bf00      	nop
 8002ac6:	3710      	adds	r7, #16
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	10624dd3 	.word	0x10624dd3
 8002ad0:	000f4240 	.word	0x000f4240
 8002ad4:	3b9aca00 	.word	0x3b9aca00

08002ad8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8002ae2:	683a      	ldr	r2, [r7, #0]
 8002ae4:	2103      	movs	r1, #3
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 f804 	bl	8002af4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8002aec:	bf00      	nop
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b088      	sub	sp, #32
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	460b      	mov	r3, r1
 8002afe:	607a      	str	r2, [r7, #4]
 8002b00:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8002b02:	f107 0314 	add.w	r3, r7, #20
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7fd ffea 	bl	8000ae0 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8002b0c:	7afb      	ldrb	r3, [r7, #11]
 8002b0e:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f107 0214 	add.w	r2, r7, #20
 8002b1e:	2107      	movs	r1, #7
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	4798      	blx	r3
  }
 8002b24:	bf00      	nop
 8002b26:	3720      	adds	r7, #32
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d110      	bne.n	8002b5e <_Z41__static_initialization_and_destruction_0ii+0x32>
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d10b      	bne.n	8002b5e <_Z41__static_initialization_and_destruction_0ii+0x32>
ros::NodeHandle nh;
 8002b46:	4808      	ldr	r0, [pc, #32]	; (8002b68 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8002b48:	f7fe fd9a 	bl	8001680 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::String str_msg;
 8002b4c:	4807      	ldr	r0, [pc, #28]	; (8002b6c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002b4e:	f7fe fca3 	bl	8001498 <_ZN8std_msgs6StringC1Ev>
ros::Publisher chatter("chatter", &str_msg);
 8002b52:	2300      	movs	r3, #0
 8002b54:	4a05      	ldr	r2, [pc, #20]	; (8002b6c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002b56:	4906      	ldr	r1, [pc, #24]	; (8002b70 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8002b58:	4806      	ldr	r0, [pc, #24]	; (8002b74 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8002b5a:	f7fe fb3d 	bl	80011d8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8002b5e:	bf00      	nop
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	200004d0 	.word	0x200004d0
 8002b6c:	20000e0c 	.word	0x20000e0c
 8002b70:	080085f0 	.word	0x080085f0
 8002b74:	20000e14 	.word	0x20000e14

08002b78 <_GLOBAL__sub_I_hi2c1>:
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002b80:	2001      	movs	r0, #1
 8002b82:	f7ff ffd3 	bl	8002b2c <_Z41__static_initialization_and_destruction_0ii>
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <_Z13speed_convertf>:
 *      Author: Valery_Danilov
 */
#include "motors.h"

uint16_t speed_convert(float fval) // float to uint16_t convert
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	ed87 0a01 	vstr	s0, [r7, #4]
    if (fval > MAX_EMotor_Speed || fval < -MAX_EMotor_Speed) return(UINT16_MAX);
 8002b92:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b96:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8002b9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ba2:	dc08      	bgt.n	8002bb6 <_Z13speed_convertf+0x2e>
 8002ba4:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ba8:	eeb9 7a08 	vmov.f32	s14, #152	; 0xc0c00000 -6.0
 8002bac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bb4:	d502      	bpl.n	8002bbc <_Z13speed_convertf+0x34>
 8002bb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bba:	e027      	b.n	8002c0c <_Z13speed_convertf+0x84>
    if (fval >= 0 )
 8002bbc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002bc0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bc8:	db0f      	blt.n	8002bea <_Z13speed_convertf+0x62>
    {
        return((uint16_t)((fval) / (MAX_EMotor_Speed) * UINT16_MAX));
 8002bca:	ed97 7a01 	vldr	s14, [r7, #4]
 8002bce:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8002bd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bd6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002c18 <_Z13speed_convertf+0x90>
 8002bda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002be2:	ee17 3a90 	vmov	r3, s15
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	e010      	b.n	8002c0c <_Z13speed_convertf+0x84>
    }else
    {
        return((uint16_t)((-fval) / (MAX_EMotor_Speed) * UINT16_MAX));
 8002bea:	edd7 7a01 	vldr	s15, [r7, #4]
 8002bee:	eeb1 7a67 	vneg.f32	s14, s15
 8002bf2:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8002bf6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bfa:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002c18 <_Z13speed_convertf+0x90>
 8002bfe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c06:	ee17 3a90 	vmov	r3, s15
 8002c0a:	b29b      	uxth	r3, r3
    }
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr
 8002c18:	477fff00 	.word	0x477fff00

08002c1c <_ZN12EncoderMotor13update_paramsEfb>:

void EncoderMotor::update_params(float w, bool ena)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	ed87 0a02 	vstr	s0, [r7, #8]
 8002c28:	460b      	mov	r3, r1
 8002c2a:	71fb      	strb	r3, [r7, #7]
	if ( w > 0 && ena)
 8002c2c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c38:	dd16      	ble.n	8002c68 <_ZN12EncoderMotor13update_paramsEfb+0x4c>
 8002c3a:	79fb      	ldrb	r3, [r7, #7]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d013      	beq.n	8002c68 <_ZN12EncoderMotor13update_paramsEfb+0x4c>
	{
		ENA = 1;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2201      	movs	r2, #1
 8002c44:	715a      	strb	r2, [r3, #5]
		DIR = 0;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	711a      	strb	r2, [r3, #4]
		setted_vel = speed_convert(w);
 8002c4c:	ed97 0a02 	vldr	s0, [r7, #8]
 8002c50:	f7ff ff9a 	bl	8002b88 <_Z13speed_convertf>
 8002c54:	4603      	mov	r3, r0
 8002c56:	461a      	mov	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	805a      	strh	r2, [r3, #2]
		c_vel = speed_data_register2;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c60:	b29a      	uxth	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	801a      	strh	r2, [r3, #0]
		ENA = 0;
		setted_vel = 0;
		Speed_Timer->Instance->EGR|= 1UL << 0; // reset speed_timer
		Speed_Timer->Instance->SR&= ~(1UL << 0); //reset interrupt flag
	}
}
 8002c66:	e030      	b.n	8002cca <_ZN12EncoderMotor13update_paramsEfb+0xae>
	}else if (ena)
 8002c68:	79fb      	ldrb	r3, [r7, #7]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d013      	beq.n	8002c96 <_ZN12EncoderMotor13update_paramsEfb+0x7a>
		ENA = 1;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2201      	movs	r2, #1
 8002c72:	715a      	strb	r2, [r3, #5]
		DIR = 1;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2201      	movs	r2, #1
 8002c78:	711a      	strb	r2, [r3, #4]
		setted_vel = speed_convert(w);
 8002c7a:	ed97 0a02 	vldr	s0, [r7, #8]
 8002c7e:	f7ff ff83 	bl	8002b88 <_Z13speed_convertf>
 8002c82:	4603      	mov	r3, r0
 8002c84:	461a      	mov	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	805a      	strh	r2, [r3, #2]
		c_vel = speed_data_register2;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	801a      	strh	r2, [r3, #0]
}
 8002c94:	e019      	b.n	8002cca <_ZN12EncoderMotor13update_paramsEfb+0xae>
		ENA = 0;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	715a      	strb	r2, [r3, #5]
		setted_vel = 0;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	805a      	strh	r2, [r3, #2]
		Speed_Timer->Instance->EGR|= 1UL << 0; // reset speed_timer
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6a1b      	ldr	r3, [r3, #32]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	695a      	ldr	r2, [r3, #20]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6a1b      	ldr	r3, [r3, #32]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f042 0201 	orr.w	r2, r2, #1
 8002cb4:	615a      	str	r2, [r3, #20]
		Speed_Timer->Instance->SR&= ~(1UL << 0); //reset interrupt flag
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	691a      	ldr	r2, [r3, #16]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f022 0201 	bic.w	r2, r2, #1
 8002cc8:	611a      	str	r2, [r3, #16]
}
 8002cca:	bf00      	nop
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
	...

08002cd4 <_ZN12EncoderMotor10set_paramsEv>:
void EncoderMotor::set_params()
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
	if (ENA)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	795b      	ldrb	r3, [r3, #5]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d07d      	beq.n	8002de0 <_ZN12EncoderMotor10set_paramsEv+0x10c>
	{
		if (DIR){
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	791b      	ldrb	r3, [r3, #4]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d012      	beq.n	8002d12 <_ZN12EncoderMotor10set_paramsEv+0x3e>
			HAL_GPIO_WritePin(DIR_Port, DIR_Pin, GPIO_PIN_SET);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6898      	ldr	r0, [r3, #8]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	899b      	ldrh	r3, [r3, #12]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	f001 fc7e 	bl	80045f8 <HAL_GPIO_WritePin>
			Encoder_Timer->Instance->CR1|= (1UL << 4); 			//set DIR counting down in Encoder timer
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f042 0210 	orr.w	r2, r2, #16
 8002d0e:	601a      	str	r2, [r3, #0]
 8002d10:	e011      	b.n	8002d36 <_ZN12EncoderMotor10set_paramsEv+0x62>
		}else
		{
			HAL_GPIO_WritePin(DIR_Port, DIR_Pin, GPIO_PIN_RESET);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6898      	ldr	r0, [r3, #8]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	899b      	ldrh	r3, [r3, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	f001 fc6b 	bl	80045f8 <HAL_GPIO_WritePin>
			Encoder_Timer->Instance->CR1&= ~(1UL << 4);			//set DIR counting up in Encoder timer
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f022 0210 	bic.w	r2, r2, #16
 8002d34:	601a      	str	r2, [r3, #0]
		}
		//---set PWM----
		Pulse = (setted_vel* Pwm_Timer->Instance->ARR/0xFFFF);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	885b      	ldrh	r3, [r3, #2]
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d44:	fb02 f303 	mul.w	r3, r2, r3
 8002d48:	4a36      	ldr	r2, [pc, #216]	; (8002e24 <_ZN12EncoderMotor10set_paramsEv+0x150>)
 8002d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d4e:	0bdb      	lsrs	r3, r3, #15
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	86da      	strh	r2, [r3, #54]	; 0x36
		__HAL_TIM_SET_COMPARE(Pwm_Timer, Pwm_Timer_Chanel1, Pulse);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d106      	bne.n	8002d6c <_ZN12EncoderMotor10set_paramsEv+0x98>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	635a      	str	r2, [r3, #52]	; 0x34
 8002d6a:	e01b      	b.n	8002da4 <_ZN12EncoderMotor10set_paramsEv+0xd0>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8002d70:	2b04      	cmp	r3, #4
 8002d72:	d106      	bne.n	8002d82 <_ZN12EncoderMotor10set_paramsEv+0xae>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	639a      	str	r2, [r3, #56]	; 0x38
 8002d80:	e010      	b.n	8002da4 <_ZN12EncoderMotor10set_paramsEv+0xd0>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8002d86:	2b08      	cmp	r3, #8
 8002d88:	d106      	bne.n	8002d98 <_ZN12EncoderMotor10set_paramsEv+0xc4>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	63da      	str	r2, [r3, #60]	; 0x3c
 8002d96:	e005      	b.n	8002da4 <_ZN12EncoderMotor10set_paramsEv+0xd0>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	641a      	str	r2, [r3, #64]	; 0x40

		if (!(Pwm_Timer->Instance->CR1 & (1<<0)))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0301 	and.w	r3, r3, #1
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	bf0c      	ite	eq
 8002db4:	2301      	moveq	r3, #1
 8002db6:	2300      	movne	r3, #0
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d007      	beq.n	8002dce <_ZN12EncoderMotor10set_paramsEv+0xfa>
		{
			HAL_TIM_PWM_Start(Pwm_Timer, Pwm_Timer_Chanel1);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	4610      	mov	r0, r2
 8002dca:	f002 fc85 	bl	80056d8 <HAL_TIM_PWM_Start>
		}
		//--------------

		HAL_GPIO_WritePin(ENA_Port, ENA1_Pin, GPIO_PIN_SET);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6918      	ldr	r0, [r3, #16]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	8a9b      	ldrh	r3, [r3, #20]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	4619      	mov	r1, r3
 8002dda:	f001 fc0d 	bl	80045f8 <HAL_GPIO_WritePin>

		speed_data_register2=0;
		c_vel = 0;

	}
}
 8002dde:	e01d      	b.n	8002e1c <_ZN12EncoderMotor10set_paramsEv+0x148>
		HAL_GPIO_WritePin(ENA_Port, ENA1_Pin, GPIO_PIN_RESET);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6918      	ldr	r0, [r3, #16]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	8a9b      	ldrh	r3, [r3, #20]
 8002de8:	2200      	movs	r2, #0
 8002dea:	4619      	mov	r1, r3
 8002dec:	f001 fc04 	bl	80045f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIR_Port, DIR_Pin, GPIO_PIN_RESET);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6898      	ldr	r0, [r3, #8]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	899b      	ldrh	r3, [r3, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	f001 fbfc 	bl	80045f8 <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Stop(Pwm_Timer, Pwm_Timer_Chanel1);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8002e08:	4619      	mov	r1, r3
 8002e0a:	4610      	mov	r0, r2
 8002e0c:	f002 fd2c 	bl	8005868 <HAL_TIM_PWM_Stop>
		speed_data_register2=0;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	62da      	str	r2, [r3, #44]	; 0x2c
		c_vel = 0;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	801a      	strh	r2, [r3, #0]
}
 8002e1c:	bf00      	nop
 8002e1e:	3708      	adds	r7, #8
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	80008001 	.word	0x80008001

08002e28 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e2e:	2300      	movs	r3, #0
 8002e30:	607b      	str	r3, [r7, #4]
 8002e32:	4b10      	ldr	r3, [pc, #64]	; (8002e74 <HAL_MspInit+0x4c>)
 8002e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e36:	4a0f      	ldr	r2, [pc, #60]	; (8002e74 <HAL_MspInit+0x4c>)
 8002e38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e3c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e3e:	4b0d      	ldr	r3, [pc, #52]	; (8002e74 <HAL_MspInit+0x4c>)
 8002e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e46:	607b      	str	r3, [r7, #4]
 8002e48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	603b      	str	r3, [r7, #0]
 8002e4e:	4b09      	ldr	r3, [pc, #36]	; (8002e74 <HAL_MspInit+0x4c>)
 8002e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e52:	4a08      	ldr	r2, [pc, #32]	; (8002e74 <HAL_MspInit+0x4c>)
 8002e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e58:	6413      	str	r3, [r2, #64]	; 0x40
 8002e5a:	4b06      	ldr	r3, [pc, #24]	; (8002e74 <HAL_MspInit+0x4c>)
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e62:	603b      	str	r3, [r7, #0]
 8002e64:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002e66:	2007      	movs	r0, #7
 8002e68:	f000 fde6 	bl	8003a38 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e6c:	bf00      	nop
 8002e6e:	3708      	adds	r7, #8
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	40023800 	.word	0x40023800

08002e78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b08c      	sub	sp, #48	; 0x30
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e80:	f107 031c 	add.w	r3, r7, #28
 8002e84:	2200      	movs	r2, #0
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	605a      	str	r2, [r3, #4]
 8002e8a:	609a      	str	r2, [r3, #8]
 8002e8c:	60da      	str	r2, [r3, #12]
 8002e8e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a32      	ldr	r2, [pc, #200]	; (8002f60 <HAL_I2C_MspInit+0xe8>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d12c      	bne.n	8002ef4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	61bb      	str	r3, [r7, #24]
 8002e9e:	4b31      	ldr	r3, [pc, #196]	; (8002f64 <HAL_I2C_MspInit+0xec>)
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea2:	4a30      	ldr	r2, [pc, #192]	; (8002f64 <HAL_I2C_MspInit+0xec>)
 8002ea4:	f043 0302 	orr.w	r3, r3, #2
 8002ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eaa:	4b2e      	ldr	r3, [pc, #184]	; (8002f64 <HAL_I2C_MspInit+0xec>)
 8002eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	61bb      	str	r3, [r7, #24]
 8002eb4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002eb6:	23c0      	movs	r3, #192	; 0xc0
 8002eb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002eba:	2312      	movs	r3, #18
 8002ebc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ec6:	2304      	movs	r3, #4
 8002ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eca:	f107 031c 	add.w	r3, r7, #28
 8002ece:	4619      	mov	r1, r3
 8002ed0:	4825      	ldr	r0, [pc, #148]	; (8002f68 <HAL_I2C_MspInit+0xf0>)
 8002ed2:	f001 f9f5 	bl	80042c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	617b      	str	r3, [r7, #20]
 8002eda:	4b22      	ldr	r3, [pc, #136]	; (8002f64 <HAL_I2C_MspInit+0xec>)
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	4a21      	ldr	r2, [pc, #132]	; (8002f64 <HAL_I2C_MspInit+0xec>)
 8002ee0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ee6:	4b1f      	ldr	r3, [pc, #124]	; (8002f64 <HAL_I2C_MspInit+0xec>)
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eee:	617b      	str	r3, [r7, #20]
 8002ef0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002ef2:	e031      	b.n	8002f58 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a1c      	ldr	r2, [pc, #112]	; (8002f6c <HAL_I2C_MspInit+0xf4>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d12c      	bne.n	8002f58 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002efe:	2300      	movs	r3, #0
 8002f00:	613b      	str	r3, [r7, #16]
 8002f02:	4b18      	ldr	r3, [pc, #96]	; (8002f64 <HAL_I2C_MspInit+0xec>)
 8002f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f06:	4a17      	ldr	r2, [pc, #92]	; (8002f64 <HAL_I2C_MspInit+0xec>)
 8002f08:	f043 0302 	orr.w	r3, r3, #2
 8002f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f0e:	4b15      	ldr	r3, [pc, #84]	; (8002f64 <HAL_I2C_MspInit+0xec>)
 8002f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	613b      	str	r3, [r7, #16]
 8002f18:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002f1a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002f1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f20:	2312      	movs	r3, #18
 8002f22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f24:	2300      	movs	r3, #0
 8002f26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002f2c:	2304      	movs	r3, #4
 8002f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f30:	f107 031c 	add.w	r3, r7, #28
 8002f34:	4619      	mov	r1, r3
 8002f36:	480c      	ldr	r0, [pc, #48]	; (8002f68 <HAL_I2C_MspInit+0xf0>)
 8002f38:	f001 f9c2 	bl	80042c0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	60fb      	str	r3, [r7, #12]
 8002f40:	4b08      	ldr	r3, [pc, #32]	; (8002f64 <HAL_I2C_MspInit+0xec>)
 8002f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f44:	4a07      	ldr	r2, [pc, #28]	; (8002f64 <HAL_I2C_MspInit+0xec>)
 8002f46:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f4a:	6413      	str	r3, [r2, #64]	; 0x40
 8002f4c:	4b05      	ldr	r3, [pc, #20]	; (8002f64 <HAL_I2C_MspInit+0xec>)
 8002f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f54:	60fb      	str	r3, [r7, #12]
 8002f56:	68fb      	ldr	r3, [r7, #12]
}
 8002f58:	bf00      	nop
 8002f5a:	3730      	adds	r7, #48	; 0x30
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	40005400 	.word	0x40005400
 8002f64:	40023800 	.word	0x40023800
 8002f68:	40020400 	.word	0x40020400
 8002f6c:	40005800 	.word	0x40005800

08002f70 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b086      	sub	sp, #24
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f78:	f107 0308 	add.w	r3, r7, #8
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]
 8002f80:	605a      	str	r2, [r3, #4]
 8002f82:	609a      	str	r2, [r3, #8]
 8002f84:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a0c      	ldr	r2, [pc, #48]	; (8002fbc <HAL_RTC_MspInit+0x4c>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d111      	bne.n	8002fb4 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002f90:	2302      	movs	r3, #2
 8002f92:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002f94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f98:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f9a:	f107 0308 	add.w	r3, r7, #8
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f002 f920 	bl	80051e4 <HAL_RCCEx_PeriphCLKConfig>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002faa:	f7ff f8e7 	bl	800217c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002fae:	4b04      	ldr	r3, [pc, #16]	; (8002fc0 <HAL_RTC_MspInit+0x50>)
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002fb4:	bf00      	nop
 8002fb6:	3718      	adds	r7, #24
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	40002800 	.word	0x40002800
 8002fc0:	42470e3c 	.word	0x42470e3c

08002fc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b092      	sub	sp, #72	; 0x48
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fcc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	601a      	str	r2, [r3, #0]
 8002fd4:	605a      	str	r2, [r3, #4]
 8002fd6:	609a      	str	r2, [r3, #8]
 8002fd8:	60da      	str	r2, [r3, #12]
 8002fda:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fe4:	d12c      	bne.n	8003040 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	633b      	str	r3, [r7, #48]	; 0x30
 8002fea:	4b98      	ldr	r3, [pc, #608]	; (800324c <HAL_TIM_Base_MspInit+0x288>)
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	4a97      	ldr	r2, [pc, #604]	; (800324c <HAL_TIM_Base_MspInit+0x288>)
 8002ff0:	f043 0301 	orr.w	r3, r3, #1
 8002ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ff6:	4b95      	ldr	r3, [pc, #596]	; (800324c <HAL_TIM_Base_MspInit+0x288>)
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	633b      	str	r3, [r7, #48]	; 0x30
 8003000:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003002:	2300      	movs	r3, #0
 8003004:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003006:	4b91      	ldr	r3, [pc, #580]	; (800324c <HAL_TIM_Base_MspInit+0x288>)
 8003008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300a:	4a90      	ldr	r2, [pc, #576]	; (800324c <HAL_TIM_Base_MspInit+0x288>)
 800300c:	f043 0301 	orr.w	r3, r3, #1
 8003010:	6313      	str	r3, [r2, #48]	; 0x30
 8003012:	4b8e      	ldr	r3, [pc, #568]	; (800324c <HAL_TIM_Base_MspInit+0x288>)
 8003014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800301c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800301e:	2320      	movs	r3, #32
 8003020:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003022:	2302      	movs	r3, #2
 8003024:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003026:	2300      	movs	r3, #0
 8003028:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800302a:	2300      	movs	r3, #0
 800302c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800302e:	2301      	movs	r3, #1
 8003030:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003032:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003036:	4619      	mov	r1, r3
 8003038:	4885      	ldr	r0, [pc, #532]	; (8003250 <HAL_TIM_Base_MspInit+0x28c>)
 800303a:	f001 f941 	bl	80042c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800303e:	e14c      	b.n	80032da <HAL_TIM_Base_MspInit+0x316>
  else if(htim_base->Instance==TIM3)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a83      	ldr	r2, [pc, #524]	; (8003254 <HAL_TIM_Base_MspInit+0x290>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d17c      	bne.n	8003144 <HAL_TIM_Base_MspInit+0x180>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800304a:	2300      	movs	r3, #0
 800304c:	62bb      	str	r3, [r7, #40]	; 0x28
 800304e:	4b7f      	ldr	r3, [pc, #508]	; (800324c <HAL_TIM_Base_MspInit+0x288>)
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003052:	4a7e      	ldr	r2, [pc, #504]	; (800324c <HAL_TIM_Base_MspInit+0x288>)
 8003054:	f043 0302 	orr.w	r3, r3, #2
 8003058:	6413      	str	r3, [r2, #64]	; 0x40
 800305a:	4b7c      	ldr	r3, [pc, #496]	; (800324c <HAL_TIM_Base_MspInit+0x288>)
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	62bb      	str	r3, [r7, #40]	; 0x28
 8003064:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003066:	2300      	movs	r3, #0
 8003068:	627b      	str	r3, [r7, #36]	; 0x24
 800306a:	4b78      	ldr	r3, [pc, #480]	; (800324c <HAL_TIM_Base_MspInit+0x288>)
 800306c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306e:	4a77      	ldr	r2, [pc, #476]	; (800324c <HAL_TIM_Base_MspInit+0x288>)
 8003070:	f043 0302 	orr.w	r3, r3, #2
 8003074:	6313      	str	r3, [r2, #48]	; 0x30
 8003076:	4b75      	ldr	r3, [pc, #468]	; (800324c <HAL_TIM_Base_MspInit+0x288>)
 8003078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	627b      	str	r3, [r7, #36]	; 0x24
 8003080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003082:	2300      	movs	r3, #0
 8003084:	623b      	str	r3, [r7, #32]
 8003086:	4b71      	ldr	r3, [pc, #452]	; (800324c <HAL_TIM_Base_MspInit+0x288>)
 8003088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308a:	4a70      	ldr	r2, [pc, #448]	; (800324c <HAL_TIM_Base_MspInit+0x288>)
 800308c:	f043 0308 	orr.w	r3, r3, #8
 8003090:	6313      	str	r3, [r2, #48]	; 0x30
 8003092:	4b6e      	ldr	r3, [pc, #440]	; (800324c <HAL_TIM_Base_MspInit+0x288>)
 8003094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003096:	f003 0308 	and.w	r3, r3, #8
 800309a:	623b      	str	r3, [r7, #32]
 800309c:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800309e:	2301      	movs	r3, #1
 80030a0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030a2:	2302      	movs	r3, #2
 80030a4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a6:	2300      	movs	r3, #0
 80030a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030aa:	2300      	movs	r3, #0
 80030ac:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80030ae:	2302      	movs	r3, #2
 80030b0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80030b6:	4619      	mov	r1, r3
 80030b8:	4867      	ldr	r0, [pc, #412]	; (8003258 <HAL_TIM_Base_MspInit+0x294>)
 80030ba:	f001 f901 	bl	80042c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80030be:	2304      	movs	r3, #4
 80030c0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030c2:	2302      	movs	r3, #2
 80030c4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c6:	2300      	movs	r3, #0
 80030c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ca:	2300      	movs	r3, #0
 80030cc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80030ce:	2302      	movs	r3, #2
 80030d0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030d2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80030d6:	4619      	mov	r1, r3
 80030d8:	4860      	ldr	r0, [pc, #384]	; (800325c <HAL_TIM_Base_MspInit+0x298>)
 80030da:	f001 f8f1 	bl	80042c0 <HAL_GPIO_Init>
    hdma_tim3_ch3.Instance = DMA1_Stream7;
 80030de:	4b60      	ldr	r3, [pc, #384]	; (8003260 <HAL_TIM_Base_MspInit+0x29c>)
 80030e0:	4a60      	ldr	r2, [pc, #384]	; (8003264 <HAL_TIM_Base_MspInit+0x2a0>)
 80030e2:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch3.Init.Channel = DMA_CHANNEL_5;
 80030e4:	4b5e      	ldr	r3, [pc, #376]	; (8003260 <HAL_TIM_Base_MspInit+0x29c>)
 80030e6:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80030ea:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030ec:	4b5c      	ldr	r3, [pc, #368]	; (8003260 <HAL_TIM_Base_MspInit+0x29c>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80030f2:	4b5b      	ldr	r3, [pc, #364]	; (8003260 <HAL_TIM_Base_MspInit+0x29c>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80030f8:	4b59      	ldr	r3, [pc, #356]	; (8003260 <HAL_TIM_Base_MspInit+0x29c>)
 80030fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030fe:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003100:	4b57      	ldr	r3, [pc, #348]	; (8003260 <HAL_TIM_Base_MspInit+0x29c>)
 8003102:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003106:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003108:	4b55      	ldr	r3, [pc, #340]	; (8003260 <HAL_TIM_Base_MspInit+0x29c>)
 800310a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800310e:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch3.Init.Mode = DMA_CIRCULAR;
 8003110:	4b53      	ldr	r3, [pc, #332]	; (8003260 <HAL_TIM_Base_MspInit+0x29c>)
 8003112:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003116:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 8003118:	4b51      	ldr	r3, [pc, #324]	; (8003260 <HAL_TIM_Base_MspInit+0x29c>)
 800311a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800311e:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003120:	4b4f      	ldr	r3, [pc, #316]	; (8003260 <HAL_TIM_Base_MspInit+0x29c>)
 8003122:	2200      	movs	r2, #0
 8003124:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch3) != HAL_OK)
 8003126:	484e      	ldr	r0, [pc, #312]	; (8003260 <HAL_TIM_Base_MspInit+0x29c>)
 8003128:	f000 fcc8 	bl	8003abc <HAL_DMA_Init>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <HAL_TIM_Base_MspInit+0x172>
      Error_Handler();
 8003132:	f7ff f823 	bl	800217c <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim3_ch3);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a49      	ldr	r2, [pc, #292]	; (8003260 <HAL_TIM_Base_MspInit+0x29c>)
 800313a:	62da      	str	r2, [r3, #44]	; 0x2c
 800313c:	4a48      	ldr	r2, [pc, #288]	; (8003260 <HAL_TIM_Base_MspInit+0x29c>)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003142:	e0ca      	b.n	80032da <HAL_TIM_Base_MspInit+0x316>
  else if(htim_base->Instance==TIM4)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a47      	ldr	r2, [pc, #284]	; (8003268 <HAL_TIM_Base_MspInit+0x2a4>)
 800314a:	4293      	cmp	r3, r2
 800314c:	f040 8094 	bne.w	8003278 <HAL_TIM_Base_MspInit+0x2b4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003150:	2300      	movs	r3, #0
 8003152:	61fb      	str	r3, [r7, #28]
 8003154:	4b3d      	ldr	r3, [pc, #244]	; (800324c <HAL_TIM_Base_MspInit+0x288>)
 8003156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003158:	4a3c      	ldr	r2, [pc, #240]	; (800324c <HAL_TIM_Base_MspInit+0x288>)
 800315a:	f043 0304 	orr.w	r3, r3, #4
 800315e:	6413      	str	r3, [r2, #64]	; 0x40
 8003160:	4b3a      	ldr	r3, [pc, #232]	; (800324c <HAL_TIM_Base_MspInit+0x288>)
 8003162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003164:	f003 0304 	and.w	r3, r3, #4
 8003168:	61fb      	str	r3, [r7, #28]
 800316a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800316c:	2300      	movs	r3, #0
 800316e:	61bb      	str	r3, [r7, #24]
 8003170:	4b36      	ldr	r3, [pc, #216]	; (800324c <HAL_TIM_Base_MspInit+0x288>)
 8003172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003174:	4a35      	ldr	r2, [pc, #212]	; (800324c <HAL_TIM_Base_MspInit+0x288>)
 8003176:	f043 0308 	orr.w	r3, r3, #8
 800317a:	6313      	str	r3, [r2, #48]	; 0x30
 800317c:	4b33      	ldr	r3, [pc, #204]	; (800324c <HAL_TIM_Base_MspInit+0x288>)
 800317e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003180:	f003 0308 	and.w	r3, r3, #8
 8003184:	61bb      	str	r3, [r7, #24]
 8003186:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003188:	2300      	movs	r3, #0
 800318a:	617b      	str	r3, [r7, #20]
 800318c:	4b2f      	ldr	r3, [pc, #188]	; (800324c <HAL_TIM_Base_MspInit+0x288>)
 800318e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003190:	4a2e      	ldr	r2, [pc, #184]	; (800324c <HAL_TIM_Base_MspInit+0x288>)
 8003192:	f043 0310 	orr.w	r3, r3, #16
 8003196:	6313      	str	r3, [r2, #48]	; 0x30
 8003198:	4b2c      	ldr	r3, [pc, #176]	; (800324c <HAL_TIM_Base_MspInit+0x288>)
 800319a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319c:	f003 0310 	and.w	r3, r3, #16
 80031a0:	617b      	str	r3, [r7, #20]
 80031a2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80031a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031a8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031aa:	2302      	movs	r3, #2
 80031ac:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ae:	2300      	movs	r3, #0
 80031b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031b2:	2300      	movs	r3, #0
 80031b4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80031b6:	2302      	movs	r3, #2
 80031b8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031ba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80031be:	4619      	mov	r1, r3
 80031c0:	4826      	ldr	r0, [pc, #152]	; (800325c <HAL_TIM_Base_MspInit+0x298>)
 80031c2:	f001 f87d 	bl	80042c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80031c6:	2301      	movs	r3, #1
 80031c8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ca:	2302      	movs	r3, #2
 80031cc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ce:	2300      	movs	r3, #0
 80031d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031d2:	2300      	movs	r3, #0
 80031d4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80031d6:	2302      	movs	r3, #2
 80031d8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80031da:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80031de:	4619      	mov	r1, r3
 80031e0:	4822      	ldr	r0, [pc, #136]	; (800326c <HAL_TIM_Base_MspInit+0x2a8>)
 80031e2:	f001 f86d 	bl	80042c0 <HAL_GPIO_Init>
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 80031e6:	4b22      	ldr	r3, [pc, #136]	; (8003270 <HAL_TIM_Base_MspInit+0x2ac>)
 80031e8:	4a22      	ldr	r2, [pc, #136]	; (8003274 <HAL_TIM_Base_MspInit+0x2b0>)
 80031ea:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 80031ec:	4b20      	ldr	r3, [pc, #128]	; (8003270 <HAL_TIM_Base_MspInit+0x2ac>)
 80031ee:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80031f2:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031f4:	4b1e      	ldr	r3, [pc, #120]	; (8003270 <HAL_TIM_Base_MspInit+0x2ac>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80031fa:	4b1d      	ldr	r3, [pc, #116]	; (8003270 <HAL_TIM_Base_MspInit+0x2ac>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003200:	4b1b      	ldr	r3, [pc, #108]	; (8003270 <HAL_TIM_Base_MspInit+0x2ac>)
 8003202:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003206:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003208:	4b19      	ldr	r3, [pc, #100]	; (8003270 <HAL_TIM_Base_MspInit+0x2ac>)
 800320a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800320e:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003210:	4b17      	ldr	r3, [pc, #92]	; (8003270 <HAL_TIM_Base_MspInit+0x2ac>)
 8003212:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003216:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_CIRCULAR;
 8003218:	4b15      	ldr	r3, [pc, #84]	; (8003270 <HAL_TIM_Base_MspInit+0x2ac>)
 800321a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800321e:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8003220:	4b13      	ldr	r3, [pc, #76]	; (8003270 <HAL_TIM_Base_MspInit+0x2ac>)
 8003222:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003226:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003228:	4b11      	ldr	r3, [pc, #68]	; (8003270 <HAL_TIM_Base_MspInit+0x2ac>)
 800322a:	2200      	movs	r2, #0
 800322c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 800322e:	4810      	ldr	r0, [pc, #64]	; (8003270 <HAL_TIM_Base_MspInit+0x2ac>)
 8003230:	f000 fc44 	bl	8003abc <HAL_DMA_Init>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <HAL_TIM_Base_MspInit+0x27a>
      Error_Handler();
 800323a:	f7fe ff9f 	bl	800217c <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a0b      	ldr	r2, [pc, #44]	; (8003270 <HAL_TIM_Base_MspInit+0x2ac>)
 8003242:	625a      	str	r2, [r3, #36]	; 0x24
 8003244:	4a0a      	ldr	r2, [pc, #40]	; (8003270 <HAL_TIM_Base_MspInit+0x2ac>)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6393      	str	r3, [r2, #56]	; 0x38
}
 800324a:	e046      	b.n	80032da <HAL_TIM_Base_MspInit+0x316>
 800324c:	40023800 	.word	0x40023800
 8003250:	40020000 	.word	0x40020000
 8003254:	40000400 	.word	0x40000400
 8003258:	40020400 	.word	0x40020400
 800325c:	40020c00 	.word	0x40020c00
 8003260:	2000030c 	.word	0x2000030c
 8003264:	400260b8 	.word	0x400260b8
 8003268:	40000800 	.word	0x40000800
 800326c:	40021000 	.word	0x40021000
 8003270:	2000036c 	.word	0x2000036c
 8003274:	40026010 	.word	0x40026010
  else if(htim_base->Instance==TIM5)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a19      	ldr	r2, [pc, #100]	; (80032e4 <HAL_TIM_Base_MspInit+0x320>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d12b      	bne.n	80032da <HAL_TIM_Base_MspInit+0x316>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003282:	2300      	movs	r3, #0
 8003284:	613b      	str	r3, [r7, #16]
 8003286:	4b18      	ldr	r3, [pc, #96]	; (80032e8 <HAL_TIM_Base_MspInit+0x324>)
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	4a17      	ldr	r2, [pc, #92]	; (80032e8 <HAL_TIM_Base_MspInit+0x324>)
 800328c:	f043 0308 	orr.w	r3, r3, #8
 8003290:	6413      	str	r3, [r2, #64]	; 0x40
 8003292:	4b15      	ldr	r3, [pc, #84]	; (80032e8 <HAL_TIM_Base_MspInit+0x324>)
 8003294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003296:	f003 0308 	and.w	r3, r3, #8
 800329a:	613b      	str	r3, [r7, #16]
 800329c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800329e:	2300      	movs	r3, #0
 80032a0:	60fb      	str	r3, [r7, #12]
 80032a2:	4b11      	ldr	r3, [pc, #68]	; (80032e8 <HAL_TIM_Base_MspInit+0x324>)
 80032a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a6:	4a10      	ldr	r2, [pc, #64]	; (80032e8 <HAL_TIM_Base_MspInit+0x324>)
 80032a8:	f043 0301 	orr.w	r3, r3, #1
 80032ac:	6313      	str	r3, [r2, #48]	; 0x30
 80032ae:	4b0e      	ldr	r3, [pc, #56]	; (80032e8 <HAL_TIM_Base_MspInit+0x324>)
 80032b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	60fb      	str	r3, [r7, #12]
 80032b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80032ba:	2301      	movs	r3, #1
 80032bc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032be:	2302      	movs	r3, #2
 80032c0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c2:	2300      	movs	r3, #0
 80032c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032c6:	2300      	movs	r3, #0
 80032c8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80032ca:	2302      	movs	r3, #2
 80032cc:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80032d2:	4619      	mov	r1, r3
 80032d4:	4805      	ldr	r0, [pc, #20]	; (80032ec <HAL_TIM_Base_MspInit+0x328>)
 80032d6:	f000 fff3 	bl	80042c0 <HAL_GPIO_Init>
}
 80032da:	bf00      	nop
 80032dc:	3748      	adds	r7, #72	; 0x48
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	40000c00 	.word	0x40000c00
 80032e8:	40023800 	.word	0x40023800
 80032ec:	40020000 	.word	0x40020000

080032f0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b085      	sub	sp, #20
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM9)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a15      	ldr	r2, [pc, #84]	; (8003354 <HAL_TIM_PWM_MspInit+0x64>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d10e      	bne.n	8003320 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8003302:	2300      	movs	r3, #0
 8003304:	60fb      	str	r3, [r7, #12]
 8003306:	4b14      	ldr	r3, [pc, #80]	; (8003358 <HAL_TIM_PWM_MspInit+0x68>)
 8003308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330a:	4a13      	ldr	r2, [pc, #76]	; (8003358 <HAL_TIM_PWM_MspInit+0x68>)
 800330c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003310:	6453      	str	r3, [r2, #68]	; 0x44
 8003312:	4b11      	ldr	r3, [pc, #68]	; (8003358 <HAL_TIM_PWM_MspInit+0x68>)
 8003314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003316:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800331a:	60fb      	str	r3, [r7, #12]
 800331c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800331e:	e012      	b.n	8003346 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM12)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a0d      	ldr	r2, [pc, #52]	; (800335c <HAL_TIM_PWM_MspInit+0x6c>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d10d      	bne.n	8003346 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800332a:	2300      	movs	r3, #0
 800332c:	60bb      	str	r3, [r7, #8]
 800332e:	4b0a      	ldr	r3, [pc, #40]	; (8003358 <HAL_TIM_PWM_MspInit+0x68>)
 8003330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003332:	4a09      	ldr	r2, [pc, #36]	; (8003358 <HAL_TIM_PWM_MspInit+0x68>)
 8003334:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003338:	6413      	str	r3, [r2, #64]	; 0x40
 800333a:	4b07      	ldr	r3, [pc, #28]	; (8003358 <HAL_TIM_PWM_MspInit+0x68>)
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003342:	60bb      	str	r3, [r7, #8]
 8003344:	68bb      	ldr	r3, [r7, #8]
}
 8003346:	bf00      	nop
 8003348:	3714      	adds	r7, #20
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	40014000 	.word	0x40014000
 8003358:	40023800 	.word	0x40023800
 800335c:	40001800 	.word	0x40001800

08003360 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b08a      	sub	sp, #40	; 0x28
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003368:	f107 0314 	add.w	r3, r7, #20
 800336c:	2200      	movs	r2, #0
 800336e:	601a      	str	r2, [r3, #0]
 8003370:	605a      	str	r2, [r3, #4]
 8003372:	609a      	str	r2, [r3, #8]
 8003374:	60da      	str	r2, [r3, #12]
 8003376:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM9)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a24      	ldr	r2, [pc, #144]	; (8003410 <HAL_TIM_MspPostInit+0xb0>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d11e      	bne.n	80033c0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003382:	2300      	movs	r3, #0
 8003384:	613b      	str	r3, [r7, #16]
 8003386:	4b23      	ldr	r3, [pc, #140]	; (8003414 <HAL_TIM_MspPostInit+0xb4>)
 8003388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338a:	4a22      	ldr	r2, [pc, #136]	; (8003414 <HAL_TIM_MspPostInit+0xb4>)
 800338c:	f043 0310 	orr.w	r3, r3, #16
 8003390:	6313      	str	r3, [r2, #48]	; 0x30
 8003392:	4b20      	ldr	r3, [pc, #128]	; (8003414 <HAL_TIM_MspPostInit+0xb4>)
 8003394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003396:	f003 0310 	and.w	r3, r3, #16
 800339a:	613b      	str	r3, [r7, #16]
 800339c:	693b      	ldr	r3, [r7, #16]
    /**TIM9 GPIO Configuration
    PE5     ------> TIM9_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800339e:	2320      	movs	r3, #32
 80033a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033a2:	2302      	movs	r3, #2
 80033a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a6:	2300      	movs	r3, #0
 80033a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033aa:	2300      	movs	r3, #0
 80033ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80033ae:	2303      	movs	r3, #3
 80033b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80033b2:	f107 0314 	add.w	r3, r7, #20
 80033b6:	4619      	mov	r1, r3
 80033b8:	4817      	ldr	r0, [pc, #92]	; (8003418 <HAL_TIM_MspPostInit+0xb8>)
 80033ba:	f000 ff81 	bl	80042c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80033be:	e023      	b.n	8003408 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM12)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a15      	ldr	r2, [pc, #84]	; (800341c <HAL_TIM_MspPostInit+0xbc>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d11e      	bne.n	8003408 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033ca:	2300      	movs	r3, #0
 80033cc:	60fb      	str	r3, [r7, #12]
 80033ce:	4b11      	ldr	r3, [pc, #68]	; (8003414 <HAL_TIM_MspPostInit+0xb4>)
 80033d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d2:	4a10      	ldr	r2, [pc, #64]	; (8003414 <HAL_TIM_MspPostInit+0xb4>)
 80033d4:	f043 0302 	orr.w	r3, r3, #2
 80033d8:	6313      	str	r3, [r2, #48]	; 0x30
 80033da:	4b0e      	ldr	r3, [pc, #56]	; (8003414 <HAL_TIM_MspPostInit+0xb4>)
 80033dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	60fb      	str	r3, [r7, #12]
 80033e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80033e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80033ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ec:	2302      	movs	r3, #2
 80033ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f0:	2300      	movs	r3, #0
 80033f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033f4:	2300      	movs	r3, #0
 80033f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80033f8:	2309      	movs	r3, #9
 80033fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033fc:	f107 0314 	add.w	r3, r7, #20
 8003400:	4619      	mov	r1, r3
 8003402:	4807      	ldr	r0, [pc, #28]	; (8003420 <HAL_TIM_MspPostInit+0xc0>)
 8003404:	f000 ff5c 	bl	80042c0 <HAL_GPIO_Init>
}
 8003408:	bf00      	nop
 800340a:	3728      	adds	r7, #40	; 0x28
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	40014000 	.word	0x40014000
 8003414:	40023800 	.word	0x40023800
 8003418:	40021000 	.word	0x40021000
 800341c:	40001800 	.word	0x40001800
 8003420:	40020400 	.word	0x40020400

08003424 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b08a      	sub	sp, #40	; 0x28
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800342c:	f107 0314 	add.w	r3, r7, #20
 8003430:	2200      	movs	r2, #0
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	605a      	str	r2, [r3, #4]
 8003436:	609a      	str	r2, [r3, #8]
 8003438:	60da      	str	r2, [r3, #12]
 800343a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a5c      	ldr	r2, [pc, #368]	; (80035b4 <HAL_UART_MspInit+0x190>)
 8003442:	4293      	cmp	r3, r2
 8003444:	f040 80b1 	bne.w	80035aa <HAL_UART_MspInit+0x186>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003448:	2300      	movs	r3, #0
 800344a:	613b      	str	r3, [r7, #16]
 800344c:	4b5a      	ldr	r3, [pc, #360]	; (80035b8 <HAL_UART_MspInit+0x194>)
 800344e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003450:	4a59      	ldr	r2, [pc, #356]	; (80035b8 <HAL_UART_MspInit+0x194>)
 8003452:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003456:	6413      	str	r3, [r2, #64]	; 0x40
 8003458:	4b57      	ldr	r3, [pc, #348]	; (80035b8 <HAL_UART_MspInit+0x194>)
 800345a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003460:	613b      	str	r3, [r7, #16]
 8003462:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003464:	2300      	movs	r3, #0
 8003466:	60fb      	str	r3, [r7, #12]
 8003468:	4b53      	ldr	r3, [pc, #332]	; (80035b8 <HAL_UART_MspInit+0x194>)
 800346a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346c:	4a52      	ldr	r2, [pc, #328]	; (80035b8 <HAL_UART_MspInit+0x194>)
 800346e:	f043 0301 	orr.w	r3, r3, #1
 8003472:	6313      	str	r3, [r2, #48]	; 0x30
 8003474:	4b50      	ldr	r3, [pc, #320]	; (80035b8 <HAL_UART_MspInit+0x194>)
 8003476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	60fb      	str	r3, [r7, #12]
 800347e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003480:	2300      	movs	r3, #0
 8003482:	60bb      	str	r3, [r7, #8]
 8003484:	4b4c      	ldr	r3, [pc, #304]	; (80035b8 <HAL_UART_MspInit+0x194>)
 8003486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003488:	4a4b      	ldr	r2, [pc, #300]	; (80035b8 <HAL_UART_MspInit+0x194>)
 800348a:	f043 0304 	orr.w	r3, r3, #4
 800348e:	6313      	str	r3, [r2, #48]	; 0x30
 8003490:	4b49      	ldr	r3, [pc, #292]	; (80035b8 <HAL_UART_MspInit+0x194>)
 8003492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003494:	f003 0304 	and.w	r3, r3, #4
 8003498:	60bb      	str	r3, [r7, #8]
 800349a:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA1     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800349c:	2302      	movs	r3, #2
 800349e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a0:	2302      	movs	r3, #2
 80034a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a4:	2300      	movs	r3, #0
 80034a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034a8:	2303      	movs	r3, #3
 80034aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80034ac:	2308      	movs	r3, #8
 80034ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034b0:	f107 0314 	add.w	r3, r7, #20
 80034b4:	4619      	mov	r1, r3
 80034b6:	4841      	ldr	r0, [pc, #260]	; (80035bc <HAL_UART_MspInit+0x198>)
 80034b8:	f000 ff02 	bl	80042c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80034bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c2:	2302      	movs	r3, #2
 80034c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c6:	2300      	movs	r3, #0
 80034c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034ca:	2303      	movs	r3, #3
 80034cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80034ce:	2308      	movs	r3, #8
 80034d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034d2:	f107 0314 	add.w	r3, r7, #20
 80034d6:	4619      	mov	r1, r3
 80034d8:	4839      	ldr	r0, [pc, #228]	; (80035c0 <HAL_UART_MspInit+0x19c>)
 80034da:	f000 fef1 	bl	80042c0 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80034de:	4b39      	ldr	r3, [pc, #228]	; (80035c4 <HAL_UART_MspInit+0x1a0>)
 80034e0:	4a39      	ldr	r2, [pc, #228]	; (80035c8 <HAL_UART_MspInit+0x1a4>)
 80034e2:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80034e4:	4b37      	ldr	r3, [pc, #220]	; (80035c4 <HAL_UART_MspInit+0x1a0>)
 80034e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80034ea:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034ec:	4b35      	ldr	r3, [pc, #212]	; (80035c4 <HAL_UART_MspInit+0x1a0>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034f2:	4b34      	ldr	r3, [pc, #208]	; (80035c4 <HAL_UART_MspInit+0x1a0>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80034f8:	4b32      	ldr	r3, [pc, #200]	; (80035c4 <HAL_UART_MspInit+0x1a0>)
 80034fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034fe:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003500:	4b30      	ldr	r3, [pc, #192]	; (80035c4 <HAL_UART_MspInit+0x1a0>)
 8003502:	2200      	movs	r2, #0
 8003504:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003506:	4b2f      	ldr	r3, [pc, #188]	; (80035c4 <HAL_UART_MspInit+0x1a0>)
 8003508:	2200      	movs	r2, #0
 800350a:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 800350c:	4b2d      	ldr	r3, [pc, #180]	; (80035c4 <HAL_UART_MspInit+0x1a0>)
 800350e:	2200      	movs	r2, #0
 8003510:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003512:	4b2c      	ldr	r3, [pc, #176]	; (80035c4 <HAL_UART_MspInit+0x1a0>)
 8003514:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003518:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800351a:	4b2a      	ldr	r3, [pc, #168]	; (80035c4 <HAL_UART_MspInit+0x1a0>)
 800351c:	2200      	movs	r2, #0
 800351e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8003520:	4828      	ldr	r0, [pc, #160]	; (80035c4 <HAL_UART_MspInit+0x1a0>)
 8003522:	f000 facb 	bl	8003abc <HAL_DMA_Init>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d001      	beq.n	8003530 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 800352c:	f7fe fe26 	bl	800217c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a24      	ldr	r2, [pc, #144]	; (80035c4 <HAL_UART_MspInit+0x1a0>)
 8003534:	639a      	str	r2, [r3, #56]	; 0x38
 8003536:	4a23      	ldr	r2, [pc, #140]	; (80035c4 <HAL_UART_MspInit+0x1a0>)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800353c:	4b23      	ldr	r3, [pc, #140]	; (80035cc <HAL_UART_MspInit+0x1a8>)
 800353e:	4a24      	ldr	r2, [pc, #144]	; (80035d0 <HAL_UART_MspInit+0x1ac>)
 8003540:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8003542:	4b22      	ldr	r3, [pc, #136]	; (80035cc <HAL_UART_MspInit+0x1a8>)
 8003544:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003548:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800354a:	4b20      	ldr	r3, [pc, #128]	; (80035cc <HAL_UART_MspInit+0x1a8>)
 800354c:	2240      	movs	r2, #64	; 0x40
 800354e:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003550:	4b1e      	ldr	r3, [pc, #120]	; (80035cc <HAL_UART_MspInit+0x1a8>)
 8003552:	2200      	movs	r2, #0
 8003554:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003556:	4b1d      	ldr	r3, [pc, #116]	; (80035cc <HAL_UART_MspInit+0x1a8>)
 8003558:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800355c:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800355e:	4b1b      	ldr	r3, [pc, #108]	; (80035cc <HAL_UART_MspInit+0x1a8>)
 8003560:	2200      	movs	r2, #0
 8003562:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003564:	4b19      	ldr	r3, [pc, #100]	; (80035cc <HAL_UART_MspInit+0x1a8>)
 8003566:	2200      	movs	r2, #0
 8003568:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800356a:	4b18      	ldr	r3, [pc, #96]	; (80035cc <HAL_UART_MspInit+0x1a8>)
 800356c:	2200      	movs	r2, #0
 800356e:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8003570:	4b16      	ldr	r3, [pc, #88]	; (80035cc <HAL_UART_MspInit+0x1a8>)
 8003572:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003576:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003578:	4b14      	ldr	r3, [pc, #80]	; (80035cc <HAL_UART_MspInit+0x1a8>)
 800357a:	2200      	movs	r2, #0
 800357c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800357e:	4813      	ldr	r0, [pc, #76]	; (80035cc <HAL_UART_MspInit+0x1a8>)
 8003580:	f000 fa9c 	bl	8003abc <HAL_DMA_Init>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 800358a:	f7fe fdf7 	bl	800217c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a0e      	ldr	r2, [pc, #56]	; (80035cc <HAL_UART_MspInit+0x1a8>)
 8003592:	635a      	str	r2, [r3, #52]	; 0x34
 8003594:	4a0d      	ldr	r2, [pc, #52]	; (80035cc <HAL_UART_MspInit+0x1a8>)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800359a:	2200      	movs	r2, #0
 800359c:	2100      	movs	r1, #0
 800359e:	2034      	movs	r0, #52	; 0x34
 80035a0:	f000 fa55 	bl	8003a4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80035a4:	2034      	movs	r0, #52	; 0x34
 80035a6:	f000 fa6e 	bl	8003a86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80035aa:	bf00      	nop
 80035ac:	3728      	adds	r7, #40	; 0x28
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	40004c00 	.word	0x40004c00
 80035b8:	40023800 	.word	0x40023800
 80035bc:	40020000 	.word	0x40020000
 80035c0:	40020800 	.word	0x40020800
 80035c4:	20000410 	.word	0x20000410
 80035c8:	40026040 	.word	0x40026040
 80035cc:	20000470 	.word	0x20000470
 80035d0:	40026070 	.word	0x40026070

080035d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035d4:	b480      	push	{r7}
 80035d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80035d8:	e7fe      	b.n	80035d8 <NMI_Handler+0x4>

080035da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035da:	b480      	push	{r7}
 80035dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035de:	e7fe      	b.n	80035de <HardFault_Handler+0x4>

080035e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035e4:	e7fe      	b.n	80035e4 <MemManage_Handler+0x4>

080035e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035e6:	b480      	push	{r7}
 80035e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035ea:	e7fe      	b.n	80035ea <BusFault_Handler+0x4>

080035ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035ec:	b480      	push	{r7}
 80035ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035f0:	e7fe      	b.n	80035f0 <UsageFault_Handler+0x4>

080035f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80035f2:	b480      	push	{r7}
 80035f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80035f6:	bf00      	nop
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003600:	b480      	push	{r7}
 8003602:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003604:	bf00      	nop
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr

0800360e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800360e:	b480      	push	{r7}
 8003610:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003612:	bf00      	nop
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003620:	f000 f91a 	bl	8003858 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003624:	bf00      	nop
 8003626:	bd80      	pop	{r7, pc}

08003628 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 800362c:	4802      	ldr	r0, [pc, #8]	; (8003638 <DMA1_Stream0_IRQHandler+0x10>)
 800362e:	f000 fbdd 	bl	8003dec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003632:	bf00      	nop
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	2000036c 	.word	0x2000036c

0800363c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8003640:	4802      	ldr	r0, [pc, #8]	; (800364c <DMA1_Stream2_IRQHandler+0x10>)
 8003642:	f000 fbd3 	bl	8003dec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003646:	bf00      	nop
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	20000410 	.word	0x20000410

08003650 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8003654:	4802      	ldr	r0, [pc, #8]	; (8003660 <DMA1_Stream4_IRQHandler+0x10>)
 8003656:	f000 fbc9 	bl	8003dec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800365a:	bf00      	nop
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	20000470 	.word	0x20000470

08003664 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch3);
 8003668:	4802      	ldr	r0, [pc, #8]	; (8003674 <DMA1_Stream7_IRQHandler+0x10>)
 800366a:	f000 fbbf 	bl	8003dec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800366e:	bf00      	nop
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	2000030c 	.word	0x2000030c

08003678 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800367c:	4802      	ldr	r0, [pc, #8]	; (8003688 <UART4_IRQHandler+0x10>)
 800367e:	f003 fc2f 	bl	8006ee0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003682:	bf00      	nop
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	200003cc 	.word	0x200003cc

0800368c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800368c:	b480      	push	{r7}
 800368e:	af00      	add	r7, sp, #0
	return 1;
 8003690:	2301      	movs	r3, #1
}
 8003692:	4618      	mov	r0, r3
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <_kill>:

int _kill(int pid, int sig)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80036a6:	f004 fd2b 	bl	8008100 <__errno>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2216      	movs	r2, #22
 80036ae:	601a      	str	r2, [r3, #0]
	return -1;
 80036b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3708      	adds	r7, #8
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <_exit>:

void _exit (int status)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80036c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f7ff ffe7 	bl	800369c <_kill>
	while (1) {}		/* Make sure we hang here */
 80036ce:	e7fe      	b.n	80036ce <_exit+0x12>

080036d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036d8:	4a14      	ldr	r2, [pc, #80]	; (800372c <_sbrk+0x5c>)
 80036da:	4b15      	ldr	r3, [pc, #84]	; (8003730 <_sbrk+0x60>)
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036e4:	4b13      	ldr	r3, [pc, #76]	; (8003734 <_sbrk+0x64>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d102      	bne.n	80036f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80036ec:	4b11      	ldr	r3, [pc, #68]	; (8003734 <_sbrk+0x64>)
 80036ee:	4a12      	ldr	r2, [pc, #72]	; (8003738 <_sbrk+0x68>)
 80036f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036f2:	4b10      	ldr	r3, [pc, #64]	; (8003734 <_sbrk+0x64>)
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4413      	add	r3, r2
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d207      	bcs.n	8003710 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003700:	f004 fcfe 	bl	8008100 <__errno>
 8003704:	4603      	mov	r3, r0
 8003706:	220c      	movs	r2, #12
 8003708:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800370a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800370e:	e009      	b.n	8003724 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003710:	4b08      	ldr	r3, [pc, #32]	; (8003734 <_sbrk+0x64>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003716:	4b07      	ldr	r3, [pc, #28]	; (8003734 <_sbrk+0x64>)
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4413      	add	r3, r2
 800371e:	4a05      	ldr	r2, [pc, #20]	; (8003734 <_sbrk+0x64>)
 8003720:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003722:	68fb      	ldr	r3, [r7, #12]
}
 8003724:	4618      	mov	r0, r3
 8003726:	3718      	adds	r7, #24
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	20020000 	.word	0x20020000
 8003730:	00000400 	.word	0x00000400
 8003734:	20000e28 	.word	0x20000e28
 8003738:	20000e40 	.word	0x20000e40

0800373c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800373c:	b480      	push	{r7}
 800373e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003740:	4b06      	ldr	r3, [pc, #24]	; (800375c <SystemInit+0x20>)
 8003742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003746:	4a05      	ldr	r2, [pc, #20]	; (800375c <SystemInit+0x20>)
 8003748:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800374c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003750:	bf00      	nop
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	e000ed00 	.word	0xe000ed00

08003760 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003760:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003798 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003764:	480d      	ldr	r0, [pc, #52]	; (800379c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003766:	490e      	ldr	r1, [pc, #56]	; (80037a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003768:	4a0e      	ldr	r2, [pc, #56]	; (80037a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800376a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800376c:	e002      	b.n	8003774 <LoopCopyDataInit>

0800376e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800376e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003770:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003772:	3304      	adds	r3, #4

08003774 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003774:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003776:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003778:	d3f9      	bcc.n	800376e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800377a:	4a0b      	ldr	r2, [pc, #44]	; (80037a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800377c:	4c0b      	ldr	r4, [pc, #44]	; (80037ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800377e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003780:	e001      	b.n	8003786 <LoopFillZerobss>

08003782 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003782:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003784:	3204      	adds	r2, #4

08003786 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003786:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003788:	d3fb      	bcc.n	8003782 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800378a:	f7ff ffd7 	bl	800373c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800378e:	f004 fcbd 	bl	800810c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003792:	f7fd ffed 	bl	8001770 <main>
  bx  lr    
 8003796:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003798:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800379c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037a0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80037a4:	08008700 	.word	0x08008700
  ldr r2, =_sbss
 80037a8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80037ac:	20000e40 	.word	0x20000e40

080037b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037b0:	e7fe      	b.n	80037b0 <ADC_IRQHandler>
	...

080037b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80037b8:	4b0e      	ldr	r3, [pc, #56]	; (80037f4 <HAL_Init+0x40>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a0d      	ldr	r2, [pc, #52]	; (80037f4 <HAL_Init+0x40>)
 80037be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80037c4:	4b0b      	ldr	r3, [pc, #44]	; (80037f4 <HAL_Init+0x40>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a0a      	ldr	r2, [pc, #40]	; (80037f4 <HAL_Init+0x40>)
 80037ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037d0:	4b08      	ldr	r3, [pc, #32]	; (80037f4 <HAL_Init+0x40>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a07      	ldr	r2, [pc, #28]	; (80037f4 <HAL_Init+0x40>)
 80037d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037dc:	2003      	movs	r0, #3
 80037de:	f000 f92b 	bl	8003a38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037e2:	2000      	movs	r0, #0
 80037e4:	f000 f808 	bl	80037f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037e8:	f7ff fb1e 	bl	8002e28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	40023c00 	.word	0x40023c00

080037f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003800:	4b12      	ldr	r3, [pc, #72]	; (800384c <HAL_InitTick+0x54>)
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	4b12      	ldr	r3, [pc, #72]	; (8003850 <HAL_InitTick+0x58>)
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	4619      	mov	r1, r3
 800380a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800380e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003812:	fbb2 f3f3 	udiv	r3, r2, r3
 8003816:	4618      	mov	r0, r3
 8003818:	f000 f943 	bl	8003aa2 <HAL_SYSTICK_Config>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e00e      	b.n	8003844 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2b0f      	cmp	r3, #15
 800382a:	d80a      	bhi.n	8003842 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800382c:	2200      	movs	r2, #0
 800382e:	6879      	ldr	r1, [r7, #4]
 8003830:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003834:	f000 f90b 	bl	8003a4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003838:	4a06      	ldr	r2, [pc, #24]	; (8003854 <HAL_InitTick+0x5c>)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800383e:	2300      	movs	r3, #0
 8003840:	e000      	b.n	8003844 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
}
 8003844:	4618      	mov	r0, r3
 8003846:	3708      	adds	r7, #8
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	20000000 	.word	0x20000000
 8003850:	20000008 	.word	0x20000008
 8003854:	20000004 	.word	0x20000004

08003858 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003858:	b480      	push	{r7}
 800385a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800385c:	4b06      	ldr	r3, [pc, #24]	; (8003878 <HAL_IncTick+0x20>)
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	461a      	mov	r2, r3
 8003862:	4b06      	ldr	r3, [pc, #24]	; (800387c <HAL_IncTick+0x24>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4413      	add	r3, r2
 8003868:	4a04      	ldr	r2, [pc, #16]	; (800387c <HAL_IncTick+0x24>)
 800386a:	6013      	str	r3, [r2, #0]
}
 800386c:	bf00      	nop
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	20000008 	.word	0x20000008
 800387c:	20000e2c 	.word	0x20000e2c

08003880 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003880:	b480      	push	{r7}
 8003882:	af00      	add	r7, sp, #0
  return uwTick;
 8003884:	4b03      	ldr	r3, [pc, #12]	; (8003894 <HAL_GetTick+0x14>)
 8003886:	681b      	ldr	r3, [r3, #0]
}
 8003888:	4618      	mov	r0, r3
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	20000e2c 	.word	0x20000e2c

08003898 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003898:	b480      	push	{r7}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f003 0307 	and.w	r3, r3, #7
 80038a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038a8:	4b0c      	ldr	r3, [pc, #48]	; (80038dc <__NVIC_SetPriorityGrouping+0x44>)
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038ae:	68ba      	ldr	r2, [r7, #8]
 80038b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038b4:	4013      	ands	r3, r2
 80038b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038ca:	4a04      	ldr	r2, [pc, #16]	; (80038dc <__NVIC_SetPriorityGrouping+0x44>)
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	60d3      	str	r3, [r2, #12]
}
 80038d0:	bf00      	nop
 80038d2:	3714      	adds	r7, #20
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr
 80038dc:	e000ed00 	.word	0xe000ed00

080038e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038e0:	b480      	push	{r7}
 80038e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038e4:	4b04      	ldr	r3, [pc, #16]	; (80038f8 <__NVIC_GetPriorityGrouping+0x18>)
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	0a1b      	lsrs	r3, r3, #8
 80038ea:	f003 0307 	and.w	r3, r3, #7
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr
 80038f8:	e000ed00 	.word	0xe000ed00

080038fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	4603      	mov	r3, r0
 8003904:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800390a:	2b00      	cmp	r3, #0
 800390c:	db0b      	blt.n	8003926 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800390e:	79fb      	ldrb	r3, [r7, #7]
 8003910:	f003 021f 	and.w	r2, r3, #31
 8003914:	4907      	ldr	r1, [pc, #28]	; (8003934 <__NVIC_EnableIRQ+0x38>)
 8003916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800391a:	095b      	lsrs	r3, r3, #5
 800391c:	2001      	movs	r0, #1
 800391e:	fa00 f202 	lsl.w	r2, r0, r2
 8003922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003926:	bf00      	nop
 8003928:	370c      	adds	r7, #12
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	e000e100 	.word	0xe000e100

08003938 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	4603      	mov	r3, r0
 8003940:	6039      	str	r1, [r7, #0]
 8003942:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003948:	2b00      	cmp	r3, #0
 800394a:	db0a      	blt.n	8003962 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	b2da      	uxtb	r2, r3
 8003950:	490c      	ldr	r1, [pc, #48]	; (8003984 <__NVIC_SetPriority+0x4c>)
 8003952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003956:	0112      	lsls	r2, r2, #4
 8003958:	b2d2      	uxtb	r2, r2
 800395a:	440b      	add	r3, r1
 800395c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003960:	e00a      	b.n	8003978 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	b2da      	uxtb	r2, r3
 8003966:	4908      	ldr	r1, [pc, #32]	; (8003988 <__NVIC_SetPriority+0x50>)
 8003968:	79fb      	ldrb	r3, [r7, #7]
 800396a:	f003 030f 	and.w	r3, r3, #15
 800396e:	3b04      	subs	r3, #4
 8003970:	0112      	lsls	r2, r2, #4
 8003972:	b2d2      	uxtb	r2, r2
 8003974:	440b      	add	r3, r1
 8003976:	761a      	strb	r2, [r3, #24]
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr
 8003984:	e000e100 	.word	0xe000e100
 8003988:	e000ed00 	.word	0xe000ed00

0800398c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800398c:	b480      	push	{r7}
 800398e:	b089      	sub	sp, #36	; 0x24
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f003 0307 	and.w	r3, r3, #7
 800399e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	f1c3 0307 	rsb	r3, r3, #7
 80039a6:	2b04      	cmp	r3, #4
 80039a8:	bf28      	it	cs
 80039aa:	2304      	movcs	r3, #4
 80039ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	3304      	adds	r3, #4
 80039b2:	2b06      	cmp	r3, #6
 80039b4:	d902      	bls.n	80039bc <NVIC_EncodePriority+0x30>
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	3b03      	subs	r3, #3
 80039ba:	e000      	b.n	80039be <NVIC_EncodePriority+0x32>
 80039bc:	2300      	movs	r3, #0
 80039be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ca:	43da      	mvns	r2, r3
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	401a      	ands	r2, r3
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	fa01 f303 	lsl.w	r3, r1, r3
 80039de:	43d9      	mvns	r1, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039e4:	4313      	orrs	r3, r2
         );
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3724      	adds	r7, #36	; 0x24
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
	...

080039f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	3b01      	subs	r3, #1
 8003a00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a04:	d301      	bcc.n	8003a0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a06:	2301      	movs	r3, #1
 8003a08:	e00f      	b.n	8003a2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a0a:	4a0a      	ldr	r2, [pc, #40]	; (8003a34 <SysTick_Config+0x40>)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a12:	210f      	movs	r1, #15
 8003a14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a18:	f7ff ff8e 	bl	8003938 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a1c:	4b05      	ldr	r3, [pc, #20]	; (8003a34 <SysTick_Config+0x40>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a22:	4b04      	ldr	r3, [pc, #16]	; (8003a34 <SysTick_Config+0x40>)
 8003a24:	2207      	movs	r2, #7
 8003a26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	e000e010 	.word	0xe000e010

08003a38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f7ff ff29 	bl	8003898 <__NVIC_SetPriorityGrouping>
}
 8003a46:	bf00      	nop
 8003a48:	3708      	adds	r7, #8
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b086      	sub	sp, #24
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	4603      	mov	r3, r0
 8003a56:	60b9      	str	r1, [r7, #8]
 8003a58:	607a      	str	r2, [r7, #4]
 8003a5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a60:	f7ff ff3e 	bl	80038e0 <__NVIC_GetPriorityGrouping>
 8003a64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	68b9      	ldr	r1, [r7, #8]
 8003a6a:	6978      	ldr	r0, [r7, #20]
 8003a6c:	f7ff ff8e 	bl	800398c <NVIC_EncodePriority>
 8003a70:	4602      	mov	r2, r0
 8003a72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a76:	4611      	mov	r1, r2
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7ff ff5d 	bl	8003938 <__NVIC_SetPriority>
}
 8003a7e:	bf00      	nop
 8003a80:	3718      	adds	r7, #24
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b082      	sub	sp, #8
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7ff ff31 	bl	80038fc <__NVIC_EnableIRQ>
}
 8003a9a:	bf00      	nop
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}

08003aa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	b082      	sub	sp, #8
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f7ff ffa2 	bl	80039f4 <SysTick_Config>
 8003ab0:	4603      	mov	r3, r0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3708      	adds	r7, #8
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
	...

08003abc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003ac8:	f7ff feda 	bl	8003880 <HAL_GetTick>
 8003acc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d101      	bne.n	8003ad8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e099      	b.n	8003c0c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2202      	movs	r2, #2
 8003adc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f022 0201 	bic.w	r2, r2, #1
 8003af6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003af8:	e00f      	b.n	8003b1a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003afa:	f7ff fec1 	bl	8003880 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b05      	cmp	r3, #5
 8003b06:	d908      	bls.n	8003b1a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2220      	movs	r2, #32
 8003b0c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2203      	movs	r2, #3
 8003b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e078      	b.n	8003c0c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1e8      	bne.n	8003afa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b30:	697a      	ldr	r2, [r7, #20]
 8003b32:	4b38      	ldr	r3, [pc, #224]	; (8003c14 <HAL_DMA_Init+0x158>)
 8003b34:	4013      	ands	r3, r2
 8003b36:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685a      	ldr	r2, [r3, #4]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b46:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a1b      	ldr	r3, [r3, #32]
 8003b64:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b70:	2b04      	cmp	r3, #4
 8003b72:	d107      	bne.n	8003b84 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	697a      	ldr	r2, [r7, #20]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	697a      	ldr	r2, [r7, #20]
 8003b8a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	f023 0307 	bic.w	r3, r3, #7
 8003b9a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003baa:	2b04      	cmp	r3, #4
 8003bac:	d117      	bne.n	8003bde <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00e      	beq.n	8003bde <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 fb01 	bl	80041c8 <DMA_CheckFifoParam>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d008      	beq.n	8003bde <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2240      	movs	r2, #64	; 0x40
 8003bd0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e016      	b.n	8003c0c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 fab8 	bl	800415c <DMA_CalcBaseAndBitshift>
 8003bec:	4603      	mov	r3, r0
 8003bee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bf4:	223f      	movs	r2, #63	; 0x3f
 8003bf6:	409a      	lsls	r2, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3718      	adds	r7, #24
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	f010803f 	.word	0xf010803f

08003c18 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
 8003c24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c26:	2300      	movs	r3, #0
 8003c28:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c2e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d101      	bne.n	8003c3e <HAL_DMA_Start_IT+0x26>
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	e040      	b.n	8003cc0 <HAL_DMA_Start_IT+0xa8>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d12f      	bne.n	8003cb2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2202      	movs	r2, #2
 8003c56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	68b9      	ldr	r1, [r7, #8]
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	f000 fa4a 	bl	8004100 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c70:	223f      	movs	r2, #63	; 0x3f
 8003c72:	409a      	lsls	r2, r3
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f042 0216 	orr.w	r2, r2, #22
 8003c86:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d007      	beq.n	8003ca0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f042 0208 	orr.w	r2, r2, #8
 8003c9e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f042 0201 	orr.w	r2, r2, #1
 8003cae:	601a      	str	r2, [r3, #0]
 8003cb0:	e005      	b.n	8003cbe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003cba:	2302      	movs	r3, #2
 8003cbc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003cbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3718      	adds	r7, #24
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003cd6:	f7ff fdd3 	bl	8003880 <HAL_GetTick>
 8003cda:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d008      	beq.n	8003cfa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2280      	movs	r2, #128	; 0x80
 8003cec:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e052      	b.n	8003da0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f022 0216 	bic.w	r2, r2, #22
 8003d08:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	695a      	ldr	r2, [r3, #20]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d18:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d103      	bne.n	8003d2a <HAL_DMA_Abort+0x62>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d007      	beq.n	8003d3a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f022 0208 	bic.w	r2, r2, #8
 8003d38:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f022 0201 	bic.w	r2, r2, #1
 8003d48:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d4a:	e013      	b.n	8003d74 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d4c:	f7ff fd98 	bl	8003880 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	2b05      	cmp	r3, #5
 8003d58:	d90c      	bls.n	8003d74 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2220      	movs	r2, #32
 8003d5e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2203      	movs	r2, #3
 8003d64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e015      	b.n	8003da0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0301 	and.w	r3, r3, #1
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1e4      	bne.n	8003d4c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d86:	223f      	movs	r2, #63	; 0x3f
 8003d88:	409a      	lsls	r2, r3
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d004      	beq.n	8003dc6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2280      	movs	r2, #128	; 0x80
 8003dc0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e00c      	b.n	8003de0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2205      	movs	r2, #5
 8003dca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f022 0201 	bic.w	r2, r2, #1
 8003ddc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b086      	sub	sp, #24
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003df4:	2300      	movs	r3, #0
 8003df6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003df8:	4b8e      	ldr	r3, [pc, #568]	; (8004034 <HAL_DMA_IRQHandler+0x248>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a8e      	ldr	r2, [pc, #568]	; (8004038 <HAL_DMA_IRQHandler+0x24c>)
 8003dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8003e02:	0a9b      	lsrs	r3, r3, #10
 8003e04:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e0a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e16:	2208      	movs	r2, #8
 8003e18:	409a      	lsls	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d01a      	beq.n	8003e58 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0304 	and.w	r3, r3, #4
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d013      	beq.n	8003e58 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f022 0204 	bic.w	r2, r2, #4
 8003e3e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e44:	2208      	movs	r2, #8
 8003e46:	409a      	lsls	r2, r3
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e50:	f043 0201 	orr.w	r2, r3, #1
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	409a      	lsls	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	4013      	ands	r3, r2
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d012      	beq.n	8003e8e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00b      	beq.n	8003e8e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	409a      	lsls	r2, r3
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e86:	f043 0202 	orr.w	r2, r3, #2
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e92:	2204      	movs	r2, #4
 8003e94:	409a      	lsls	r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	4013      	ands	r3, r2
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d012      	beq.n	8003ec4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0302 	and.w	r3, r3, #2
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d00b      	beq.n	8003ec4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eb0:	2204      	movs	r2, #4
 8003eb2:	409a      	lsls	r2, r3
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ebc:	f043 0204 	orr.w	r2, r3, #4
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ec8:	2210      	movs	r2, #16
 8003eca:	409a      	lsls	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	4013      	ands	r3, r2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d043      	beq.n	8003f5c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0308 	and.w	r3, r3, #8
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d03c      	beq.n	8003f5c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee6:	2210      	movs	r2, #16
 8003ee8:	409a      	lsls	r2, r3
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d018      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d108      	bne.n	8003f1c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d024      	beq.n	8003f5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	4798      	blx	r3
 8003f1a:	e01f      	b.n	8003f5c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d01b      	beq.n	8003f5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	4798      	blx	r3
 8003f2c:	e016      	b.n	8003f5c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d107      	bne.n	8003f4c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f022 0208 	bic.w	r2, r2, #8
 8003f4a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d003      	beq.n	8003f5c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f60:	2220      	movs	r2, #32
 8003f62:	409a      	lsls	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	4013      	ands	r3, r2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f000 808f 	beq.w	800408c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0310 	and.w	r3, r3, #16
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	f000 8087 	beq.w	800408c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f82:	2220      	movs	r2, #32
 8003f84:	409a      	lsls	r2, r3
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b05      	cmp	r3, #5
 8003f94:	d136      	bne.n	8004004 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f022 0216 	bic.w	r2, r2, #22
 8003fa4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	695a      	ldr	r2, [r3, #20]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fb4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d103      	bne.n	8003fc6 <HAL_DMA_IRQHandler+0x1da>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d007      	beq.n	8003fd6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f022 0208 	bic.w	r2, r2, #8
 8003fd4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fda:	223f      	movs	r2, #63	; 0x3f
 8003fdc:	409a      	lsls	r2, r3
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d07e      	beq.n	80040f8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	4798      	blx	r3
        }
        return;
 8004002:	e079      	b.n	80040f8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d01d      	beq.n	800404e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d10d      	bne.n	800403c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004024:	2b00      	cmp	r3, #0
 8004026:	d031      	beq.n	800408c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	4798      	blx	r3
 8004030:	e02c      	b.n	800408c <HAL_DMA_IRQHandler+0x2a0>
 8004032:	bf00      	nop
 8004034:	20000000 	.word	0x20000000
 8004038:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004040:	2b00      	cmp	r3, #0
 8004042:	d023      	beq.n	800408c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	4798      	blx	r3
 800404c:	e01e      	b.n	800408c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004058:	2b00      	cmp	r3, #0
 800405a:	d10f      	bne.n	800407c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f022 0210 	bic.w	r2, r2, #16
 800406a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004080:	2b00      	cmp	r3, #0
 8004082:	d003      	beq.n	800408c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004090:	2b00      	cmp	r3, #0
 8004092:	d032      	beq.n	80040fa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004098:	f003 0301 	and.w	r3, r3, #1
 800409c:	2b00      	cmp	r3, #0
 800409e:	d022      	beq.n	80040e6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2205      	movs	r2, #5
 80040a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f022 0201 	bic.w	r2, r2, #1
 80040b6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	3301      	adds	r3, #1
 80040bc:	60bb      	str	r3, [r7, #8]
 80040be:	697a      	ldr	r2, [r7, #20]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d307      	bcc.n	80040d4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0301 	and.w	r3, r3, #1
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1f2      	bne.n	80040b8 <HAL_DMA_IRQHandler+0x2cc>
 80040d2:	e000      	b.n	80040d6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80040d4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d005      	beq.n	80040fa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	4798      	blx	r3
 80040f6:	e000      	b.n	80040fa <HAL_DMA_IRQHandler+0x30e>
        return;
 80040f8:	bf00      	nop
    }
  }
}
 80040fa:	3718      	adds	r7, #24
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004100:	b480      	push	{r7}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	607a      	str	r2, [r7, #4]
 800410c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800411c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	683a      	ldr	r2, [r7, #0]
 8004124:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	2b40      	cmp	r3, #64	; 0x40
 800412c:	d108      	bne.n	8004140 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68ba      	ldr	r2, [r7, #8]
 800413c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800413e:	e007      	b.n	8004150 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68ba      	ldr	r2, [r7, #8]
 8004146:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	60da      	str	r2, [r3, #12]
}
 8004150:	bf00      	nop
 8004152:	3714      	adds	r7, #20
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800415c:	b480      	push	{r7}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	b2db      	uxtb	r3, r3
 800416a:	3b10      	subs	r3, #16
 800416c:	4a14      	ldr	r2, [pc, #80]	; (80041c0 <DMA_CalcBaseAndBitshift+0x64>)
 800416e:	fba2 2303 	umull	r2, r3, r2, r3
 8004172:	091b      	lsrs	r3, r3, #4
 8004174:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004176:	4a13      	ldr	r2, [pc, #76]	; (80041c4 <DMA_CalcBaseAndBitshift+0x68>)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	4413      	add	r3, r2
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	461a      	mov	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2b03      	cmp	r3, #3
 8004188:	d909      	bls.n	800419e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004192:	f023 0303 	bic.w	r3, r3, #3
 8004196:	1d1a      	adds	r2, r3, #4
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	659a      	str	r2, [r3, #88]	; 0x58
 800419c:	e007      	b.n	80041ae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80041a6:	f023 0303 	bic.w	r3, r3, #3
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3714      	adds	r7, #20
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop
 80041c0:	aaaaaaab 	.word	0xaaaaaaab
 80041c4:	080086e4 	.word	0x080086e4

080041c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b085      	sub	sp, #20
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041d0:	2300      	movs	r3, #0
 80041d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d11f      	bne.n	8004222 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	2b03      	cmp	r3, #3
 80041e6:	d856      	bhi.n	8004296 <DMA_CheckFifoParam+0xce>
 80041e8:	a201      	add	r2, pc, #4	; (adr r2, 80041f0 <DMA_CheckFifoParam+0x28>)
 80041ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ee:	bf00      	nop
 80041f0:	08004201 	.word	0x08004201
 80041f4:	08004213 	.word	0x08004213
 80041f8:	08004201 	.word	0x08004201
 80041fc:	08004297 	.word	0x08004297
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004204:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d046      	beq.n	800429a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004210:	e043      	b.n	800429a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004216:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800421a:	d140      	bne.n	800429e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004220:	e03d      	b.n	800429e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800422a:	d121      	bne.n	8004270 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	2b03      	cmp	r3, #3
 8004230:	d837      	bhi.n	80042a2 <DMA_CheckFifoParam+0xda>
 8004232:	a201      	add	r2, pc, #4	; (adr r2, 8004238 <DMA_CheckFifoParam+0x70>)
 8004234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004238:	08004249 	.word	0x08004249
 800423c:	0800424f 	.word	0x0800424f
 8004240:	08004249 	.word	0x08004249
 8004244:	08004261 	.word	0x08004261
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	73fb      	strb	r3, [r7, #15]
      break;
 800424c:	e030      	b.n	80042b0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004252:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d025      	beq.n	80042a6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800425e:	e022      	b.n	80042a6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004264:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004268:	d11f      	bne.n	80042aa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800426e:	e01c      	b.n	80042aa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	2b02      	cmp	r3, #2
 8004274:	d903      	bls.n	800427e <DMA_CheckFifoParam+0xb6>
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	2b03      	cmp	r3, #3
 800427a:	d003      	beq.n	8004284 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800427c:	e018      	b.n	80042b0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	73fb      	strb	r3, [r7, #15]
      break;
 8004282:	e015      	b.n	80042b0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004288:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d00e      	beq.n	80042ae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	73fb      	strb	r3, [r7, #15]
      break;
 8004294:	e00b      	b.n	80042ae <DMA_CheckFifoParam+0xe6>
      break;
 8004296:	bf00      	nop
 8004298:	e00a      	b.n	80042b0 <DMA_CheckFifoParam+0xe8>
      break;
 800429a:	bf00      	nop
 800429c:	e008      	b.n	80042b0 <DMA_CheckFifoParam+0xe8>
      break;
 800429e:	bf00      	nop
 80042a0:	e006      	b.n	80042b0 <DMA_CheckFifoParam+0xe8>
      break;
 80042a2:	bf00      	nop
 80042a4:	e004      	b.n	80042b0 <DMA_CheckFifoParam+0xe8>
      break;
 80042a6:	bf00      	nop
 80042a8:	e002      	b.n	80042b0 <DMA_CheckFifoParam+0xe8>
      break;   
 80042aa:	bf00      	nop
 80042ac:	e000      	b.n	80042b0 <DMA_CheckFifoParam+0xe8>
      break;
 80042ae:	bf00      	nop
    }
  } 
  
  return status; 
 80042b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3714      	adds	r7, #20
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop

080042c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b089      	sub	sp, #36	; 0x24
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80042ca:	2300      	movs	r3, #0
 80042cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80042ce:	2300      	movs	r3, #0
 80042d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80042d2:	2300      	movs	r3, #0
 80042d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042d6:	2300      	movs	r3, #0
 80042d8:	61fb      	str	r3, [r7, #28]
 80042da:	e16b      	b.n	80045b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80042dc:	2201      	movs	r2, #1
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	fa02 f303 	lsl.w	r3, r2, r3
 80042e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	4013      	ands	r3, r2
 80042ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80042f0:	693a      	ldr	r2, [r7, #16]
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	f040 815a 	bne.w	80045ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f003 0303 	and.w	r3, r3, #3
 8004302:	2b01      	cmp	r3, #1
 8004304:	d005      	beq.n	8004312 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800430e:	2b02      	cmp	r3, #2
 8004310:	d130      	bne.n	8004374 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	005b      	lsls	r3, r3, #1
 800431c:	2203      	movs	r2, #3
 800431e:	fa02 f303 	lsl.w	r3, r2, r3
 8004322:	43db      	mvns	r3, r3
 8004324:	69ba      	ldr	r2, [r7, #24]
 8004326:	4013      	ands	r3, r2
 8004328:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	68da      	ldr	r2, [r3, #12]
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	005b      	lsls	r3, r3, #1
 8004332:	fa02 f303 	lsl.w	r3, r2, r3
 8004336:	69ba      	ldr	r2, [r7, #24]
 8004338:	4313      	orrs	r3, r2
 800433a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	69ba      	ldr	r2, [r7, #24]
 8004340:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004348:	2201      	movs	r2, #1
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	fa02 f303 	lsl.w	r3, r2, r3
 8004350:	43db      	mvns	r3, r3
 8004352:	69ba      	ldr	r2, [r7, #24]
 8004354:	4013      	ands	r3, r2
 8004356:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	091b      	lsrs	r3, r3, #4
 800435e:	f003 0201 	and.w	r2, r3, #1
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	fa02 f303 	lsl.w	r3, r2, r3
 8004368:	69ba      	ldr	r2, [r7, #24]
 800436a:	4313      	orrs	r3, r2
 800436c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	69ba      	ldr	r2, [r7, #24]
 8004372:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f003 0303 	and.w	r3, r3, #3
 800437c:	2b03      	cmp	r3, #3
 800437e:	d017      	beq.n	80043b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	005b      	lsls	r3, r3, #1
 800438a:	2203      	movs	r2, #3
 800438c:	fa02 f303 	lsl.w	r3, r2, r3
 8004390:	43db      	mvns	r3, r3
 8004392:	69ba      	ldr	r2, [r7, #24]
 8004394:	4013      	ands	r3, r2
 8004396:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	689a      	ldr	r2, [r3, #8]
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	005b      	lsls	r3, r3, #1
 80043a0:	fa02 f303 	lsl.w	r3, r2, r3
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	69ba      	ldr	r2, [r7, #24]
 80043ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f003 0303 	and.w	r3, r3, #3
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d123      	bne.n	8004404 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	08da      	lsrs	r2, r3, #3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	3208      	adds	r2, #8
 80043c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	f003 0307 	and.w	r3, r3, #7
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	220f      	movs	r2, #15
 80043d4:	fa02 f303 	lsl.w	r3, r2, r3
 80043d8:	43db      	mvns	r3, r3
 80043da:	69ba      	ldr	r2, [r7, #24]
 80043dc:	4013      	ands	r3, r2
 80043de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	691a      	ldr	r2, [r3, #16]
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	f003 0307 	and.w	r3, r3, #7
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	fa02 f303 	lsl.w	r3, r2, r3
 80043f0:	69ba      	ldr	r2, [r7, #24]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	08da      	lsrs	r2, r3, #3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	3208      	adds	r2, #8
 80043fe:	69b9      	ldr	r1, [r7, #24]
 8004400:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	005b      	lsls	r3, r3, #1
 800440e:	2203      	movs	r2, #3
 8004410:	fa02 f303 	lsl.w	r3, r2, r3
 8004414:	43db      	mvns	r3, r3
 8004416:	69ba      	ldr	r2, [r7, #24]
 8004418:	4013      	ands	r3, r2
 800441a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f003 0203 	and.w	r2, r3, #3
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	005b      	lsls	r3, r3, #1
 8004428:	fa02 f303 	lsl.w	r3, r2, r3
 800442c:	69ba      	ldr	r2, [r7, #24]
 800442e:	4313      	orrs	r3, r2
 8004430:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	69ba      	ldr	r2, [r7, #24]
 8004436:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004440:	2b00      	cmp	r3, #0
 8004442:	f000 80b4 	beq.w	80045ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004446:	2300      	movs	r3, #0
 8004448:	60fb      	str	r3, [r7, #12]
 800444a:	4b60      	ldr	r3, [pc, #384]	; (80045cc <HAL_GPIO_Init+0x30c>)
 800444c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800444e:	4a5f      	ldr	r2, [pc, #380]	; (80045cc <HAL_GPIO_Init+0x30c>)
 8004450:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004454:	6453      	str	r3, [r2, #68]	; 0x44
 8004456:	4b5d      	ldr	r3, [pc, #372]	; (80045cc <HAL_GPIO_Init+0x30c>)
 8004458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800445a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800445e:	60fb      	str	r3, [r7, #12]
 8004460:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004462:	4a5b      	ldr	r2, [pc, #364]	; (80045d0 <HAL_GPIO_Init+0x310>)
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	089b      	lsrs	r3, r3, #2
 8004468:	3302      	adds	r3, #2
 800446a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800446e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	f003 0303 	and.w	r3, r3, #3
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	220f      	movs	r2, #15
 800447a:	fa02 f303 	lsl.w	r3, r2, r3
 800447e:	43db      	mvns	r3, r3
 8004480:	69ba      	ldr	r2, [r7, #24]
 8004482:	4013      	ands	r3, r2
 8004484:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a52      	ldr	r2, [pc, #328]	; (80045d4 <HAL_GPIO_Init+0x314>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d02b      	beq.n	80044e6 <HAL_GPIO_Init+0x226>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a51      	ldr	r2, [pc, #324]	; (80045d8 <HAL_GPIO_Init+0x318>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d025      	beq.n	80044e2 <HAL_GPIO_Init+0x222>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a50      	ldr	r2, [pc, #320]	; (80045dc <HAL_GPIO_Init+0x31c>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d01f      	beq.n	80044de <HAL_GPIO_Init+0x21e>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a4f      	ldr	r2, [pc, #316]	; (80045e0 <HAL_GPIO_Init+0x320>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d019      	beq.n	80044da <HAL_GPIO_Init+0x21a>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a4e      	ldr	r2, [pc, #312]	; (80045e4 <HAL_GPIO_Init+0x324>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d013      	beq.n	80044d6 <HAL_GPIO_Init+0x216>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a4d      	ldr	r2, [pc, #308]	; (80045e8 <HAL_GPIO_Init+0x328>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d00d      	beq.n	80044d2 <HAL_GPIO_Init+0x212>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a4c      	ldr	r2, [pc, #304]	; (80045ec <HAL_GPIO_Init+0x32c>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d007      	beq.n	80044ce <HAL_GPIO_Init+0x20e>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a4b      	ldr	r2, [pc, #300]	; (80045f0 <HAL_GPIO_Init+0x330>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d101      	bne.n	80044ca <HAL_GPIO_Init+0x20a>
 80044c6:	2307      	movs	r3, #7
 80044c8:	e00e      	b.n	80044e8 <HAL_GPIO_Init+0x228>
 80044ca:	2308      	movs	r3, #8
 80044cc:	e00c      	b.n	80044e8 <HAL_GPIO_Init+0x228>
 80044ce:	2306      	movs	r3, #6
 80044d0:	e00a      	b.n	80044e8 <HAL_GPIO_Init+0x228>
 80044d2:	2305      	movs	r3, #5
 80044d4:	e008      	b.n	80044e8 <HAL_GPIO_Init+0x228>
 80044d6:	2304      	movs	r3, #4
 80044d8:	e006      	b.n	80044e8 <HAL_GPIO_Init+0x228>
 80044da:	2303      	movs	r3, #3
 80044dc:	e004      	b.n	80044e8 <HAL_GPIO_Init+0x228>
 80044de:	2302      	movs	r3, #2
 80044e0:	e002      	b.n	80044e8 <HAL_GPIO_Init+0x228>
 80044e2:	2301      	movs	r3, #1
 80044e4:	e000      	b.n	80044e8 <HAL_GPIO_Init+0x228>
 80044e6:	2300      	movs	r3, #0
 80044e8:	69fa      	ldr	r2, [r7, #28]
 80044ea:	f002 0203 	and.w	r2, r2, #3
 80044ee:	0092      	lsls	r2, r2, #2
 80044f0:	4093      	lsls	r3, r2
 80044f2:	69ba      	ldr	r2, [r7, #24]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80044f8:	4935      	ldr	r1, [pc, #212]	; (80045d0 <HAL_GPIO_Init+0x310>)
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	089b      	lsrs	r3, r3, #2
 80044fe:	3302      	adds	r3, #2
 8004500:	69ba      	ldr	r2, [r7, #24]
 8004502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004506:	4b3b      	ldr	r3, [pc, #236]	; (80045f4 <HAL_GPIO_Init+0x334>)
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	43db      	mvns	r3, r3
 8004510:	69ba      	ldr	r2, [r7, #24]
 8004512:	4013      	ands	r3, r2
 8004514:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d003      	beq.n	800452a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004522:	69ba      	ldr	r2, [r7, #24]
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	4313      	orrs	r3, r2
 8004528:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800452a:	4a32      	ldr	r2, [pc, #200]	; (80045f4 <HAL_GPIO_Init+0x334>)
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004530:	4b30      	ldr	r3, [pc, #192]	; (80045f4 <HAL_GPIO_Init+0x334>)
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	43db      	mvns	r3, r3
 800453a:	69ba      	ldr	r2, [r7, #24]
 800453c:	4013      	ands	r3, r2
 800453e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d003      	beq.n	8004554 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800454c:	69ba      	ldr	r2, [r7, #24]
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	4313      	orrs	r3, r2
 8004552:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004554:	4a27      	ldr	r2, [pc, #156]	; (80045f4 <HAL_GPIO_Init+0x334>)
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800455a:	4b26      	ldr	r3, [pc, #152]	; (80045f4 <HAL_GPIO_Init+0x334>)
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	43db      	mvns	r3, r3
 8004564:	69ba      	ldr	r2, [r7, #24]
 8004566:	4013      	ands	r3, r2
 8004568:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d003      	beq.n	800457e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004576:	69ba      	ldr	r2, [r7, #24]
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	4313      	orrs	r3, r2
 800457c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800457e:	4a1d      	ldr	r2, [pc, #116]	; (80045f4 <HAL_GPIO_Init+0x334>)
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004584:	4b1b      	ldr	r3, [pc, #108]	; (80045f4 <HAL_GPIO_Init+0x334>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	43db      	mvns	r3, r3
 800458e:	69ba      	ldr	r2, [r7, #24]
 8004590:	4013      	ands	r3, r2
 8004592:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d003      	beq.n	80045a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80045a0:	69ba      	ldr	r2, [r7, #24]
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80045a8:	4a12      	ldr	r2, [pc, #72]	; (80045f4 <HAL_GPIO_Init+0x334>)
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	3301      	adds	r3, #1
 80045b2:	61fb      	str	r3, [r7, #28]
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	2b0f      	cmp	r3, #15
 80045b8:	f67f ae90 	bls.w	80042dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80045bc:	bf00      	nop
 80045be:	bf00      	nop
 80045c0:	3724      	adds	r7, #36	; 0x24
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	40023800 	.word	0x40023800
 80045d0:	40013800 	.word	0x40013800
 80045d4:	40020000 	.word	0x40020000
 80045d8:	40020400 	.word	0x40020400
 80045dc:	40020800 	.word	0x40020800
 80045e0:	40020c00 	.word	0x40020c00
 80045e4:	40021000 	.word	0x40021000
 80045e8:	40021400 	.word	0x40021400
 80045ec:	40021800 	.word	0x40021800
 80045f0:	40021c00 	.word	0x40021c00
 80045f4:	40013c00 	.word	0x40013c00

080045f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	460b      	mov	r3, r1
 8004602:	807b      	strh	r3, [r7, #2]
 8004604:	4613      	mov	r3, r2
 8004606:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004608:	787b      	ldrb	r3, [r7, #1]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d003      	beq.n	8004616 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800460e:	887a      	ldrh	r2, [r7, #2]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004614:	e003      	b.n	800461e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004616:	887b      	ldrh	r3, [r7, #2]
 8004618:	041a      	lsls	r2, r3, #16
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	619a      	str	r2, [r3, #24]
}
 800461e:	bf00      	nop
 8004620:	370c      	adds	r7, #12
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr
	...

0800462c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d101      	bne.n	800463e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e12b      	b.n	8004896 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004644:	b2db      	uxtb	r3, r3
 8004646:	2b00      	cmp	r3, #0
 8004648:	d106      	bne.n	8004658 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f7fe fc10 	bl	8002e78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2224      	movs	r2, #36	; 0x24
 800465c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f022 0201 	bic.w	r2, r2, #1
 800466e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800467e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800468e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004690:	f000 fd80 	bl	8005194 <HAL_RCC_GetPCLK1Freq>
 8004694:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	4a81      	ldr	r2, [pc, #516]	; (80048a0 <HAL_I2C_Init+0x274>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d807      	bhi.n	80046b0 <HAL_I2C_Init+0x84>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	4a80      	ldr	r2, [pc, #512]	; (80048a4 <HAL_I2C_Init+0x278>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	bf94      	ite	ls
 80046a8:	2301      	movls	r3, #1
 80046aa:	2300      	movhi	r3, #0
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	e006      	b.n	80046be <HAL_I2C_Init+0x92>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	4a7d      	ldr	r2, [pc, #500]	; (80048a8 <HAL_I2C_Init+0x27c>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	bf94      	ite	ls
 80046b8:	2301      	movls	r3, #1
 80046ba:	2300      	movhi	r3, #0
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d001      	beq.n	80046c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e0e7      	b.n	8004896 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	4a78      	ldr	r2, [pc, #480]	; (80048ac <HAL_I2C_Init+0x280>)
 80046ca:	fba2 2303 	umull	r2, r3, r2, r3
 80046ce:	0c9b      	lsrs	r3, r3, #18
 80046d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68ba      	ldr	r2, [r7, #8]
 80046e2:	430a      	orrs	r2, r1
 80046e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	6a1b      	ldr	r3, [r3, #32]
 80046ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	4a6a      	ldr	r2, [pc, #424]	; (80048a0 <HAL_I2C_Init+0x274>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d802      	bhi.n	8004700 <HAL_I2C_Init+0xd4>
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	3301      	adds	r3, #1
 80046fe:	e009      	b.n	8004714 <HAL_I2C_Init+0xe8>
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004706:	fb02 f303 	mul.w	r3, r2, r3
 800470a:	4a69      	ldr	r2, [pc, #420]	; (80048b0 <HAL_I2C_Init+0x284>)
 800470c:	fba2 2303 	umull	r2, r3, r2, r3
 8004710:	099b      	lsrs	r3, r3, #6
 8004712:	3301      	adds	r3, #1
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	6812      	ldr	r2, [r2, #0]
 8004718:	430b      	orrs	r3, r1
 800471a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	69db      	ldr	r3, [r3, #28]
 8004722:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004726:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	495c      	ldr	r1, [pc, #368]	; (80048a0 <HAL_I2C_Init+0x274>)
 8004730:	428b      	cmp	r3, r1
 8004732:	d819      	bhi.n	8004768 <HAL_I2C_Init+0x13c>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	1e59      	subs	r1, r3, #1
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	005b      	lsls	r3, r3, #1
 800473e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004742:	1c59      	adds	r1, r3, #1
 8004744:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004748:	400b      	ands	r3, r1
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00a      	beq.n	8004764 <HAL_I2C_Init+0x138>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	1e59      	subs	r1, r3, #1
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	005b      	lsls	r3, r3, #1
 8004758:	fbb1 f3f3 	udiv	r3, r1, r3
 800475c:	3301      	adds	r3, #1
 800475e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004762:	e051      	b.n	8004808 <HAL_I2C_Init+0x1dc>
 8004764:	2304      	movs	r3, #4
 8004766:	e04f      	b.n	8004808 <HAL_I2C_Init+0x1dc>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d111      	bne.n	8004794 <HAL_I2C_Init+0x168>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	1e58      	subs	r0, r3, #1
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6859      	ldr	r1, [r3, #4]
 8004778:	460b      	mov	r3, r1
 800477a:	005b      	lsls	r3, r3, #1
 800477c:	440b      	add	r3, r1
 800477e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004782:	3301      	adds	r3, #1
 8004784:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004788:	2b00      	cmp	r3, #0
 800478a:	bf0c      	ite	eq
 800478c:	2301      	moveq	r3, #1
 800478e:	2300      	movne	r3, #0
 8004790:	b2db      	uxtb	r3, r3
 8004792:	e012      	b.n	80047ba <HAL_I2C_Init+0x18e>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	1e58      	subs	r0, r3, #1
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6859      	ldr	r1, [r3, #4]
 800479c:	460b      	mov	r3, r1
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	440b      	add	r3, r1
 80047a2:	0099      	lsls	r1, r3, #2
 80047a4:	440b      	add	r3, r1
 80047a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80047aa:	3301      	adds	r3, #1
 80047ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	bf0c      	ite	eq
 80047b4:	2301      	moveq	r3, #1
 80047b6:	2300      	movne	r3, #0
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d001      	beq.n	80047c2 <HAL_I2C_Init+0x196>
 80047be:	2301      	movs	r3, #1
 80047c0:	e022      	b.n	8004808 <HAL_I2C_Init+0x1dc>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d10e      	bne.n	80047e8 <HAL_I2C_Init+0x1bc>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	1e58      	subs	r0, r3, #1
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6859      	ldr	r1, [r3, #4]
 80047d2:	460b      	mov	r3, r1
 80047d4:	005b      	lsls	r3, r3, #1
 80047d6:	440b      	add	r3, r1
 80047d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80047dc:	3301      	adds	r3, #1
 80047de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047e6:	e00f      	b.n	8004808 <HAL_I2C_Init+0x1dc>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	1e58      	subs	r0, r3, #1
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6859      	ldr	r1, [r3, #4]
 80047f0:	460b      	mov	r3, r1
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	440b      	add	r3, r1
 80047f6:	0099      	lsls	r1, r3, #2
 80047f8:	440b      	add	r3, r1
 80047fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80047fe:	3301      	adds	r3, #1
 8004800:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004804:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004808:	6879      	ldr	r1, [r7, #4]
 800480a:	6809      	ldr	r1, [r1, #0]
 800480c:	4313      	orrs	r3, r2
 800480e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	69da      	ldr	r2, [r3, #28]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a1b      	ldr	r3, [r3, #32]
 8004822:	431a      	orrs	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	430a      	orrs	r2, r1
 800482a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004836:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	6911      	ldr	r1, [r2, #16]
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	68d2      	ldr	r2, [r2, #12]
 8004842:	4311      	orrs	r1, r2
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	6812      	ldr	r2, [r2, #0]
 8004848:	430b      	orrs	r3, r1
 800484a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	695a      	ldr	r2, [r3, #20]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	431a      	orrs	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	430a      	orrs	r2, r1
 8004866:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f042 0201 	orr.w	r2, r2, #1
 8004876:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2220      	movs	r2, #32
 8004882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3710      	adds	r7, #16
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	000186a0 	.word	0x000186a0
 80048a4:	001e847f 	.word	0x001e847f
 80048a8:	003d08ff 	.word	0x003d08ff
 80048ac:	431bde83 	.word	0x431bde83
 80048b0:	10624dd3 	.word	0x10624dd3

080048b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b086      	sub	sp, #24
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d101      	bne.n	80048c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e267      	b.n	8004d96 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d075      	beq.n	80049be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048d2:	4b88      	ldr	r3, [pc, #544]	; (8004af4 <HAL_RCC_OscConfig+0x240>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f003 030c 	and.w	r3, r3, #12
 80048da:	2b04      	cmp	r3, #4
 80048dc:	d00c      	beq.n	80048f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048de:	4b85      	ldr	r3, [pc, #532]	; (8004af4 <HAL_RCC_OscConfig+0x240>)
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048e6:	2b08      	cmp	r3, #8
 80048e8:	d112      	bne.n	8004910 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048ea:	4b82      	ldr	r3, [pc, #520]	; (8004af4 <HAL_RCC_OscConfig+0x240>)
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048f6:	d10b      	bne.n	8004910 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048f8:	4b7e      	ldr	r3, [pc, #504]	; (8004af4 <HAL_RCC_OscConfig+0x240>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d05b      	beq.n	80049bc <HAL_RCC_OscConfig+0x108>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d157      	bne.n	80049bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e242      	b.n	8004d96 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004918:	d106      	bne.n	8004928 <HAL_RCC_OscConfig+0x74>
 800491a:	4b76      	ldr	r3, [pc, #472]	; (8004af4 <HAL_RCC_OscConfig+0x240>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a75      	ldr	r2, [pc, #468]	; (8004af4 <HAL_RCC_OscConfig+0x240>)
 8004920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004924:	6013      	str	r3, [r2, #0]
 8004926:	e01d      	b.n	8004964 <HAL_RCC_OscConfig+0xb0>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004930:	d10c      	bne.n	800494c <HAL_RCC_OscConfig+0x98>
 8004932:	4b70      	ldr	r3, [pc, #448]	; (8004af4 <HAL_RCC_OscConfig+0x240>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a6f      	ldr	r2, [pc, #444]	; (8004af4 <HAL_RCC_OscConfig+0x240>)
 8004938:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800493c:	6013      	str	r3, [r2, #0]
 800493e:	4b6d      	ldr	r3, [pc, #436]	; (8004af4 <HAL_RCC_OscConfig+0x240>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a6c      	ldr	r2, [pc, #432]	; (8004af4 <HAL_RCC_OscConfig+0x240>)
 8004944:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004948:	6013      	str	r3, [r2, #0]
 800494a:	e00b      	b.n	8004964 <HAL_RCC_OscConfig+0xb0>
 800494c:	4b69      	ldr	r3, [pc, #420]	; (8004af4 <HAL_RCC_OscConfig+0x240>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a68      	ldr	r2, [pc, #416]	; (8004af4 <HAL_RCC_OscConfig+0x240>)
 8004952:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004956:	6013      	str	r3, [r2, #0]
 8004958:	4b66      	ldr	r3, [pc, #408]	; (8004af4 <HAL_RCC_OscConfig+0x240>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a65      	ldr	r2, [pc, #404]	; (8004af4 <HAL_RCC_OscConfig+0x240>)
 800495e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004962:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d013      	beq.n	8004994 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800496c:	f7fe ff88 	bl	8003880 <HAL_GetTick>
 8004970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004972:	e008      	b.n	8004986 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004974:	f7fe ff84 	bl	8003880 <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b64      	cmp	r3, #100	; 0x64
 8004980:	d901      	bls.n	8004986 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e207      	b.n	8004d96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004986:	4b5b      	ldr	r3, [pc, #364]	; (8004af4 <HAL_RCC_OscConfig+0x240>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d0f0      	beq.n	8004974 <HAL_RCC_OscConfig+0xc0>
 8004992:	e014      	b.n	80049be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004994:	f7fe ff74 	bl	8003880 <HAL_GetTick>
 8004998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800499a:	e008      	b.n	80049ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800499c:	f7fe ff70 	bl	8003880 <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	2b64      	cmp	r3, #100	; 0x64
 80049a8:	d901      	bls.n	80049ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e1f3      	b.n	8004d96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049ae:	4b51      	ldr	r3, [pc, #324]	; (8004af4 <HAL_RCC_OscConfig+0x240>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1f0      	bne.n	800499c <HAL_RCC_OscConfig+0xe8>
 80049ba:	e000      	b.n	80049be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0302 	and.w	r3, r3, #2
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d063      	beq.n	8004a92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049ca:	4b4a      	ldr	r3, [pc, #296]	; (8004af4 <HAL_RCC_OscConfig+0x240>)
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f003 030c 	and.w	r3, r3, #12
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00b      	beq.n	80049ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049d6:	4b47      	ldr	r3, [pc, #284]	; (8004af4 <HAL_RCC_OscConfig+0x240>)
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049de:	2b08      	cmp	r3, #8
 80049e0:	d11c      	bne.n	8004a1c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049e2:	4b44      	ldr	r3, [pc, #272]	; (8004af4 <HAL_RCC_OscConfig+0x240>)
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d116      	bne.n	8004a1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049ee:	4b41      	ldr	r3, [pc, #260]	; (8004af4 <HAL_RCC_OscConfig+0x240>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0302 	and.w	r3, r3, #2
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d005      	beq.n	8004a06 <HAL_RCC_OscConfig+0x152>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d001      	beq.n	8004a06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e1c7      	b.n	8004d96 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a06:	4b3b      	ldr	r3, [pc, #236]	; (8004af4 <HAL_RCC_OscConfig+0x240>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	00db      	lsls	r3, r3, #3
 8004a14:	4937      	ldr	r1, [pc, #220]	; (8004af4 <HAL_RCC_OscConfig+0x240>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a1a:	e03a      	b.n	8004a92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d020      	beq.n	8004a66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a24:	4b34      	ldr	r3, [pc, #208]	; (8004af8 <HAL_RCC_OscConfig+0x244>)
 8004a26:	2201      	movs	r2, #1
 8004a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a2a:	f7fe ff29 	bl	8003880 <HAL_GetTick>
 8004a2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a30:	e008      	b.n	8004a44 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a32:	f7fe ff25 	bl	8003880 <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d901      	bls.n	8004a44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e1a8      	b.n	8004d96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a44:	4b2b      	ldr	r3, [pc, #172]	; (8004af4 <HAL_RCC_OscConfig+0x240>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0302 	and.w	r3, r3, #2
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d0f0      	beq.n	8004a32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a50:	4b28      	ldr	r3, [pc, #160]	; (8004af4 <HAL_RCC_OscConfig+0x240>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	00db      	lsls	r3, r3, #3
 8004a5e:	4925      	ldr	r1, [pc, #148]	; (8004af4 <HAL_RCC_OscConfig+0x240>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	600b      	str	r3, [r1, #0]
 8004a64:	e015      	b.n	8004a92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a66:	4b24      	ldr	r3, [pc, #144]	; (8004af8 <HAL_RCC_OscConfig+0x244>)
 8004a68:	2200      	movs	r2, #0
 8004a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a6c:	f7fe ff08 	bl	8003880 <HAL_GetTick>
 8004a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a72:	e008      	b.n	8004a86 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a74:	f7fe ff04 	bl	8003880 <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d901      	bls.n	8004a86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e187      	b.n	8004d96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a86:	4b1b      	ldr	r3, [pc, #108]	; (8004af4 <HAL_RCC_OscConfig+0x240>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0302 	and.w	r3, r3, #2
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d1f0      	bne.n	8004a74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0308 	and.w	r3, r3, #8
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d036      	beq.n	8004b0c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	695b      	ldr	r3, [r3, #20]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d016      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004aa6:	4b15      	ldr	r3, [pc, #84]	; (8004afc <HAL_RCC_OscConfig+0x248>)
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aac:	f7fe fee8 	bl	8003880 <HAL_GetTick>
 8004ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ab2:	e008      	b.n	8004ac6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ab4:	f7fe fee4 	bl	8003880 <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d901      	bls.n	8004ac6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e167      	b.n	8004d96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ac6:	4b0b      	ldr	r3, [pc, #44]	; (8004af4 <HAL_RCC_OscConfig+0x240>)
 8004ac8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aca:	f003 0302 	and.w	r3, r3, #2
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d0f0      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x200>
 8004ad2:	e01b      	b.n	8004b0c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ad4:	4b09      	ldr	r3, [pc, #36]	; (8004afc <HAL_RCC_OscConfig+0x248>)
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ada:	f7fe fed1 	bl	8003880 <HAL_GetTick>
 8004ade:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ae0:	e00e      	b.n	8004b00 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ae2:	f7fe fecd 	bl	8003880 <HAL_GetTick>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d907      	bls.n	8004b00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004af0:	2303      	movs	r3, #3
 8004af2:	e150      	b.n	8004d96 <HAL_RCC_OscConfig+0x4e2>
 8004af4:	40023800 	.word	0x40023800
 8004af8:	42470000 	.word	0x42470000
 8004afc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b00:	4b88      	ldr	r3, [pc, #544]	; (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004b02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b04:	f003 0302 	and.w	r3, r3, #2
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d1ea      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0304 	and.w	r3, r3, #4
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f000 8097 	beq.w	8004c48 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b1e:	4b81      	ldr	r3, [pc, #516]	; (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d10f      	bne.n	8004b4a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	60bb      	str	r3, [r7, #8]
 8004b2e:	4b7d      	ldr	r3, [pc, #500]	; (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b32:	4a7c      	ldr	r2, [pc, #496]	; (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b38:	6413      	str	r3, [r2, #64]	; 0x40
 8004b3a:	4b7a      	ldr	r3, [pc, #488]	; (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b42:	60bb      	str	r3, [r7, #8]
 8004b44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b46:	2301      	movs	r3, #1
 8004b48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b4a:	4b77      	ldr	r3, [pc, #476]	; (8004d28 <HAL_RCC_OscConfig+0x474>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d118      	bne.n	8004b88 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b56:	4b74      	ldr	r3, [pc, #464]	; (8004d28 <HAL_RCC_OscConfig+0x474>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a73      	ldr	r2, [pc, #460]	; (8004d28 <HAL_RCC_OscConfig+0x474>)
 8004b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b62:	f7fe fe8d 	bl	8003880 <HAL_GetTick>
 8004b66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b68:	e008      	b.n	8004b7c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b6a:	f7fe fe89 	bl	8003880 <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d901      	bls.n	8004b7c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e10c      	b.n	8004d96 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b7c:	4b6a      	ldr	r3, [pc, #424]	; (8004d28 <HAL_RCC_OscConfig+0x474>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d0f0      	beq.n	8004b6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d106      	bne.n	8004b9e <HAL_RCC_OscConfig+0x2ea>
 8004b90:	4b64      	ldr	r3, [pc, #400]	; (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b94:	4a63      	ldr	r2, [pc, #396]	; (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004b96:	f043 0301 	orr.w	r3, r3, #1
 8004b9a:	6713      	str	r3, [r2, #112]	; 0x70
 8004b9c:	e01c      	b.n	8004bd8 <HAL_RCC_OscConfig+0x324>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	2b05      	cmp	r3, #5
 8004ba4:	d10c      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x30c>
 8004ba6:	4b5f      	ldr	r3, [pc, #380]	; (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004baa:	4a5e      	ldr	r2, [pc, #376]	; (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004bac:	f043 0304 	orr.w	r3, r3, #4
 8004bb0:	6713      	str	r3, [r2, #112]	; 0x70
 8004bb2:	4b5c      	ldr	r3, [pc, #368]	; (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb6:	4a5b      	ldr	r2, [pc, #364]	; (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004bb8:	f043 0301 	orr.w	r3, r3, #1
 8004bbc:	6713      	str	r3, [r2, #112]	; 0x70
 8004bbe:	e00b      	b.n	8004bd8 <HAL_RCC_OscConfig+0x324>
 8004bc0:	4b58      	ldr	r3, [pc, #352]	; (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc4:	4a57      	ldr	r2, [pc, #348]	; (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004bc6:	f023 0301 	bic.w	r3, r3, #1
 8004bca:	6713      	str	r3, [r2, #112]	; 0x70
 8004bcc:	4b55      	ldr	r3, [pc, #340]	; (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bd0:	4a54      	ldr	r2, [pc, #336]	; (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004bd2:	f023 0304 	bic.w	r3, r3, #4
 8004bd6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d015      	beq.n	8004c0c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004be0:	f7fe fe4e 	bl	8003880 <HAL_GetTick>
 8004be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004be6:	e00a      	b.n	8004bfe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004be8:	f7fe fe4a 	bl	8003880 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d901      	bls.n	8004bfe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e0cb      	b.n	8004d96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bfe:	4b49      	ldr	r3, [pc, #292]	; (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d0ee      	beq.n	8004be8 <HAL_RCC_OscConfig+0x334>
 8004c0a:	e014      	b.n	8004c36 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c0c:	f7fe fe38 	bl	8003880 <HAL_GetTick>
 8004c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c12:	e00a      	b.n	8004c2a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c14:	f7fe fe34 	bl	8003880 <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d901      	bls.n	8004c2a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e0b5      	b.n	8004d96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c2a:	4b3e      	ldr	r3, [pc, #248]	; (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c2e:	f003 0302 	and.w	r3, r3, #2
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d1ee      	bne.n	8004c14 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c36:	7dfb      	ldrb	r3, [r7, #23]
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d105      	bne.n	8004c48 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c3c:	4b39      	ldr	r3, [pc, #228]	; (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c40:	4a38      	ldr	r2, [pc, #224]	; (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004c42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c46:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	699b      	ldr	r3, [r3, #24]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	f000 80a1 	beq.w	8004d94 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c52:	4b34      	ldr	r3, [pc, #208]	; (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	f003 030c 	and.w	r3, r3, #12
 8004c5a:	2b08      	cmp	r3, #8
 8004c5c:	d05c      	beq.n	8004d18 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d141      	bne.n	8004cea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c66:	4b31      	ldr	r3, [pc, #196]	; (8004d2c <HAL_RCC_OscConfig+0x478>)
 8004c68:	2200      	movs	r2, #0
 8004c6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c6c:	f7fe fe08 	bl	8003880 <HAL_GetTick>
 8004c70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c72:	e008      	b.n	8004c86 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c74:	f7fe fe04 	bl	8003880 <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d901      	bls.n	8004c86 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e087      	b.n	8004d96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c86:	4b27      	ldr	r3, [pc, #156]	; (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1f0      	bne.n	8004c74 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	69da      	ldr	r2, [r3, #28]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a1b      	ldr	r3, [r3, #32]
 8004c9a:	431a      	orrs	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca0:	019b      	lsls	r3, r3, #6
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca8:	085b      	lsrs	r3, r3, #1
 8004caa:	3b01      	subs	r3, #1
 8004cac:	041b      	lsls	r3, r3, #16
 8004cae:	431a      	orrs	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb4:	061b      	lsls	r3, r3, #24
 8004cb6:	491b      	ldr	r1, [pc, #108]	; (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cbc:	4b1b      	ldr	r3, [pc, #108]	; (8004d2c <HAL_RCC_OscConfig+0x478>)
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cc2:	f7fe fddd 	bl	8003880 <HAL_GetTick>
 8004cc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cc8:	e008      	b.n	8004cdc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cca:	f7fe fdd9 	bl	8003880 <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d901      	bls.n	8004cdc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e05c      	b.n	8004d96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cdc:	4b11      	ldr	r3, [pc, #68]	; (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d0f0      	beq.n	8004cca <HAL_RCC_OscConfig+0x416>
 8004ce8:	e054      	b.n	8004d94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cea:	4b10      	ldr	r3, [pc, #64]	; (8004d2c <HAL_RCC_OscConfig+0x478>)
 8004cec:	2200      	movs	r2, #0
 8004cee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cf0:	f7fe fdc6 	bl	8003880 <HAL_GetTick>
 8004cf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cf6:	e008      	b.n	8004d0a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cf8:	f7fe fdc2 	bl	8003880 <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d901      	bls.n	8004d0a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e045      	b.n	8004d96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d0a:	4b06      	ldr	r3, [pc, #24]	; (8004d24 <HAL_RCC_OscConfig+0x470>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d1f0      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x444>
 8004d16:	e03d      	b.n	8004d94 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d107      	bne.n	8004d30 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e038      	b.n	8004d96 <HAL_RCC_OscConfig+0x4e2>
 8004d24:	40023800 	.word	0x40023800
 8004d28:	40007000 	.word	0x40007000
 8004d2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d30:	4b1b      	ldr	r3, [pc, #108]	; (8004da0 <HAL_RCC_OscConfig+0x4ec>)
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d028      	beq.n	8004d90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d121      	bne.n	8004d90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d11a      	bne.n	8004d90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d60:	4013      	ands	r3, r2
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d111      	bne.n	8004d90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d76:	085b      	lsrs	r3, r3, #1
 8004d78:	3b01      	subs	r3, #1
 8004d7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d107      	bne.n	8004d90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d001      	beq.n	8004d94 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e000      	b.n	8004d96 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3718      	adds	r7, #24
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	40023800 	.word	0x40023800

08004da4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d101      	bne.n	8004db8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e0cc      	b.n	8004f52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004db8:	4b68      	ldr	r3, [pc, #416]	; (8004f5c <HAL_RCC_ClockConfig+0x1b8>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0307 	and.w	r3, r3, #7
 8004dc0:	683a      	ldr	r2, [r7, #0]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d90c      	bls.n	8004de0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dc6:	4b65      	ldr	r3, [pc, #404]	; (8004f5c <HAL_RCC_ClockConfig+0x1b8>)
 8004dc8:	683a      	ldr	r2, [r7, #0]
 8004dca:	b2d2      	uxtb	r2, r2
 8004dcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dce:	4b63      	ldr	r3, [pc, #396]	; (8004f5c <HAL_RCC_ClockConfig+0x1b8>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0307 	and.w	r3, r3, #7
 8004dd6:	683a      	ldr	r2, [r7, #0]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d001      	beq.n	8004de0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e0b8      	b.n	8004f52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0302 	and.w	r3, r3, #2
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d020      	beq.n	8004e2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0304 	and.w	r3, r3, #4
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d005      	beq.n	8004e04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004df8:	4b59      	ldr	r3, [pc, #356]	; (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	4a58      	ldr	r2, [pc, #352]	; (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004dfe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0308 	and.w	r3, r3, #8
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d005      	beq.n	8004e1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e10:	4b53      	ldr	r3, [pc, #332]	; (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	4a52      	ldr	r2, [pc, #328]	; (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004e16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e1c:	4b50      	ldr	r3, [pc, #320]	; (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	494d      	ldr	r1, [pc, #308]	; (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d044      	beq.n	8004ec4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d107      	bne.n	8004e52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e42:	4b47      	ldr	r3, [pc, #284]	; (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d119      	bne.n	8004e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e07f      	b.n	8004f52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d003      	beq.n	8004e62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e5e:	2b03      	cmp	r3, #3
 8004e60:	d107      	bne.n	8004e72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e62:	4b3f      	ldr	r3, [pc, #252]	; (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d109      	bne.n	8004e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e06f      	b.n	8004f52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e72:	4b3b      	ldr	r3, [pc, #236]	; (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0302 	and.w	r3, r3, #2
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d101      	bne.n	8004e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e067      	b.n	8004f52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e82:	4b37      	ldr	r3, [pc, #220]	; (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	f023 0203 	bic.w	r2, r3, #3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	4934      	ldr	r1, [pc, #208]	; (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004e90:	4313      	orrs	r3, r2
 8004e92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e94:	f7fe fcf4 	bl	8003880 <HAL_GetTick>
 8004e98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e9a:	e00a      	b.n	8004eb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e9c:	f7fe fcf0 	bl	8003880 <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d901      	bls.n	8004eb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e04f      	b.n	8004f52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eb2:	4b2b      	ldr	r3, [pc, #172]	; (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f003 020c 	and.w	r2, r3, #12
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d1eb      	bne.n	8004e9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ec4:	4b25      	ldr	r3, [pc, #148]	; (8004f5c <HAL_RCC_ClockConfig+0x1b8>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0307 	and.w	r3, r3, #7
 8004ecc:	683a      	ldr	r2, [r7, #0]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d20c      	bcs.n	8004eec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ed2:	4b22      	ldr	r3, [pc, #136]	; (8004f5c <HAL_RCC_ClockConfig+0x1b8>)
 8004ed4:	683a      	ldr	r2, [r7, #0]
 8004ed6:	b2d2      	uxtb	r2, r2
 8004ed8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eda:	4b20      	ldr	r3, [pc, #128]	; (8004f5c <HAL_RCC_ClockConfig+0x1b8>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 0307 	and.w	r3, r3, #7
 8004ee2:	683a      	ldr	r2, [r7, #0]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d001      	beq.n	8004eec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e032      	b.n	8004f52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0304 	and.w	r3, r3, #4
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d008      	beq.n	8004f0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ef8:	4b19      	ldr	r3, [pc, #100]	; (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	4916      	ldr	r1, [pc, #88]	; (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0308 	and.w	r3, r3, #8
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d009      	beq.n	8004f2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f16:	4b12      	ldr	r3, [pc, #72]	; (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	00db      	lsls	r3, r3, #3
 8004f24:	490e      	ldr	r1, [pc, #56]	; (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f2a:	f000 f821 	bl	8004f70 <HAL_RCC_GetSysClockFreq>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	4b0b      	ldr	r3, [pc, #44]	; (8004f60 <HAL_RCC_ClockConfig+0x1bc>)
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	091b      	lsrs	r3, r3, #4
 8004f36:	f003 030f 	and.w	r3, r3, #15
 8004f3a:	490a      	ldr	r1, [pc, #40]	; (8004f64 <HAL_RCC_ClockConfig+0x1c0>)
 8004f3c:	5ccb      	ldrb	r3, [r1, r3]
 8004f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8004f42:	4a09      	ldr	r2, [pc, #36]	; (8004f68 <HAL_RCC_ClockConfig+0x1c4>)
 8004f44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f46:	4b09      	ldr	r3, [pc, #36]	; (8004f6c <HAL_RCC_ClockConfig+0x1c8>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f7fe fc54 	bl	80037f8 <HAL_InitTick>

  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3710      	adds	r7, #16
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	40023c00 	.word	0x40023c00
 8004f60:	40023800 	.word	0x40023800
 8004f64:	080086cc 	.word	0x080086cc
 8004f68:	20000000 	.word	0x20000000
 8004f6c:	20000004 	.word	0x20000004

08004f70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f74:	b094      	sub	sp, #80	; 0x50
 8004f76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	647b      	str	r3, [r7, #68]	; 0x44
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f80:	2300      	movs	r3, #0
 8004f82:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004f84:	2300      	movs	r3, #0
 8004f86:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f88:	4b79      	ldr	r3, [pc, #484]	; (8005170 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	f003 030c 	and.w	r3, r3, #12
 8004f90:	2b08      	cmp	r3, #8
 8004f92:	d00d      	beq.n	8004fb0 <HAL_RCC_GetSysClockFreq+0x40>
 8004f94:	2b08      	cmp	r3, #8
 8004f96:	f200 80e1 	bhi.w	800515c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d002      	beq.n	8004fa4 <HAL_RCC_GetSysClockFreq+0x34>
 8004f9e:	2b04      	cmp	r3, #4
 8004fa0:	d003      	beq.n	8004faa <HAL_RCC_GetSysClockFreq+0x3a>
 8004fa2:	e0db      	b.n	800515c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004fa4:	4b73      	ldr	r3, [pc, #460]	; (8005174 <HAL_RCC_GetSysClockFreq+0x204>)
 8004fa6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004fa8:	e0db      	b.n	8005162 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004faa:	4b73      	ldr	r3, [pc, #460]	; (8005178 <HAL_RCC_GetSysClockFreq+0x208>)
 8004fac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004fae:	e0d8      	b.n	8005162 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004fb0:	4b6f      	ldr	r3, [pc, #444]	; (8005170 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fb8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004fba:	4b6d      	ldr	r3, [pc, #436]	; (8005170 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d063      	beq.n	800508e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fc6:	4b6a      	ldr	r3, [pc, #424]	; (8005170 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	099b      	lsrs	r3, r3, #6
 8004fcc:	2200      	movs	r2, #0
 8004fce:	63bb      	str	r3, [r7, #56]	; 0x38
 8004fd0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fd8:	633b      	str	r3, [r7, #48]	; 0x30
 8004fda:	2300      	movs	r3, #0
 8004fdc:	637b      	str	r3, [r7, #52]	; 0x34
 8004fde:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004fe2:	4622      	mov	r2, r4
 8004fe4:	462b      	mov	r3, r5
 8004fe6:	f04f 0000 	mov.w	r0, #0
 8004fea:	f04f 0100 	mov.w	r1, #0
 8004fee:	0159      	lsls	r1, r3, #5
 8004ff0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ff4:	0150      	lsls	r0, r2, #5
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	4621      	mov	r1, r4
 8004ffc:	1a51      	subs	r1, r2, r1
 8004ffe:	6139      	str	r1, [r7, #16]
 8005000:	4629      	mov	r1, r5
 8005002:	eb63 0301 	sbc.w	r3, r3, r1
 8005006:	617b      	str	r3, [r7, #20]
 8005008:	f04f 0200 	mov.w	r2, #0
 800500c:	f04f 0300 	mov.w	r3, #0
 8005010:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005014:	4659      	mov	r1, fp
 8005016:	018b      	lsls	r3, r1, #6
 8005018:	4651      	mov	r1, sl
 800501a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800501e:	4651      	mov	r1, sl
 8005020:	018a      	lsls	r2, r1, #6
 8005022:	4651      	mov	r1, sl
 8005024:	ebb2 0801 	subs.w	r8, r2, r1
 8005028:	4659      	mov	r1, fp
 800502a:	eb63 0901 	sbc.w	r9, r3, r1
 800502e:	f04f 0200 	mov.w	r2, #0
 8005032:	f04f 0300 	mov.w	r3, #0
 8005036:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800503a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800503e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005042:	4690      	mov	r8, r2
 8005044:	4699      	mov	r9, r3
 8005046:	4623      	mov	r3, r4
 8005048:	eb18 0303 	adds.w	r3, r8, r3
 800504c:	60bb      	str	r3, [r7, #8]
 800504e:	462b      	mov	r3, r5
 8005050:	eb49 0303 	adc.w	r3, r9, r3
 8005054:	60fb      	str	r3, [r7, #12]
 8005056:	f04f 0200 	mov.w	r2, #0
 800505a:	f04f 0300 	mov.w	r3, #0
 800505e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005062:	4629      	mov	r1, r5
 8005064:	024b      	lsls	r3, r1, #9
 8005066:	4621      	mov	r1, r4
 8005068:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800506c:	4621      	mov	r1, r4
 800506e:	024a      	lsls	r2, r1, #9
 8005070:	4610      	mov	r0, r2
 8005072:	4619      	mov	r1, r3
 8005074:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005076:	2200      	movs	r2, #0
 8005078:	62bb      	str	r3, [r7, #40]	; 0x28
 800507a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800507c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005080:	f7fb f8aa 	bl	80001d8 <__aeabi_uldivmod>
 8005084:	4602      	mov	r2, r0
 8005086:	460b      	mov	r3, r1
 8005088:	4613      	mov	r3, r2
 800508a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800508c:	e058      	b.n	8005140 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800508e:	4b38      	ldr	r3, [pc, #224]	; (8005170 <HAL_RCC_GetSysClockFreq+0x200>)
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	099b      	lsrs	r3, r3, #6
 8005094:	2200      	movs	r2, #0
 8005096:	4618      	mov	r0, r3
 8005098:	4611      	mov	r1, r2
 800509a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800509e:	623b      	str	r3, [r7, #32]
 80050a0:	2300      	movs	r3, #0
 80050a2:	627b      	str	r3, [r7, #36]	; 0x24
 80050a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80050a8:	4642      	mov	r2, r8
 80050aa:	464b      	mov	r3, r9
 80050ac:	f04f 0000 	mov.w	r0, #0
 80050b0:	f04f 0100 	mov.w	r1, #0
 80050b4:	0159      	lsls	r1, r3, #5
 80050b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050ba:	0150      	lsls	r0, r2, #5
 80050bc:	4602      	mov	r2, r0
 80050be:	460b      	mov	r3, r1
 80050c0:	4641      	mov	r1, r8
 80050c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80050c6:	4649      	mov	r1, r9
 80050c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80050cc:	f04f 0200 	mov.w	r2, #0
 80050d0:	f04f 0300 	mov.w	r3, #0
 80050d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80050d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80050dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80050e0:	ebb2 040a 	subs.w	r4, r2, sl
 80050e4:	eb63 050b 	sbc.w	r5, r3, fp
 80050e8:	f04f 0200 	mov.w	r2, #0
 80050ec:	f04f 0300 	mov.w	r3, #0
 80050f0:	00eb      	lsls	r3, r5, #3
 80050f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050f6:	00e2      	lsls	r2, r4, #3
 80050f8:	4614      	mov	r4, r2
 80050fa:	461d      	mov	r5, r3
 80050fc:	4643      	mov	r3, r8
 80050fe:	18e3      	adds	r3, r4, r3
 8005100:	603b      	str	r3, [r7, #0]
 8005102:	464b      	mov	r3, r9
 8005104:	eb45 0303 	adc.w	r3, r5, r3
 8005108:	607b      	str	r3, [r7, #4]
 800510a:	f04f 0200 	mov.w	r2, #0
 800510e:	f04f 0300 	mov.w	r3, #0
 8005112:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005116:	4629      	mov	r1, r5
 8005118:	028b      	lsls	r3, r1, #10
 800511a:	4621      	mov	r1, r4
 800511c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005120:	4621      	mov	r1, r4
 8005122:	028a      	lsls	r2, r1, #10
 8005124:	4610      	mov	r0, r2
 8005126:	4619      	mov	r1, r3
 8005128:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800512a:	2200      	movs	r2, #0
 800512c:	61bb      	str	r3, [r7, #24]
 800512e:	61fa      	str	r2, [r7, #28]
 8005130:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005134:	f7fb f850 	bl	80001d8 <__aeabi_uldivmod>
 8005138:	4602      	mov	r2, r0
 800513a:	460b      	mov	r3, r1
 800513c:	4613      	mov	r3, r2
 800513e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005140:	4b0b      	ldr	r3, [pc, #44]	; (8005170 <HAL_RCC_GetSysClockFreq+0x200>)
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	0c1b      	lsrs	r3, r3, #16
 8005146:	f003 0303 	and.w	r3, r3, #3
 800514a:	3301      	adds	r3, #1
 800514c:	005b      	lsls	r3, r3, #1
 800514e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005150:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005152:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005154:	fbb2 f3f3 	udiv	r3, r2, r3
 8005158:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800515a:	e002      	b.n	8005162 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800515c:	4b05      	ldr	r3, [pc, #20]	; (8005174 <HAL_RCC_GetSysClockFreq+0x204>)
 800515e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005160:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005162:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005164:	4618      	mov	r0, r3
 8005166:	3750      	adds	r7, #80	; 0x50
 8005168:	46bd      	mov	sp, r7
 800516a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800516e:	bf00      	nop
 8005170:	40023800 	.word	0x40023800
 8005174:	00f42400 	.word	0x00f42400
 8005178:	007a1200 	.word	0x007a1200

0800517c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800517c:	b480      	push	{r7}
 800517e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005180:	4b03      	ldr	r3, [pc, #12]	; (8005190 <HAL_RCC_GetHCLKFreq+0x14>)
 8005182:	681b      	ldr	r3, [r3, #0]
}
 8005184:	4618      	mov	r0, r3
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
 800518e:	bf00      	nop
 8005190:	20000000 	.word	0x20000000

08005194 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005198:	f7ff fff0 	bl	800517c <HAL_RCC_GetHCLKFreq>
 800519c:	4602      	mov	r2, r0
 800519e:	4b05      	ldr	r3, [pc, #20]	; (80051b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	0a9b      	lsrs	r3, r3, #10
 80051a4:	f003 0307 	and.w	r3, r3, #7
 80051a8:	4903      	ldr	r1, [pc, #12]	; (80051b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051aa:	5ccb      	ldrb	r3, [r1, r3]
 80051ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	40023800 	.word	0x40023800
 80051b8:	080086dc 	.word	0x080086dc

080051bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80051c0:	f7ff ffdc 	bl	800517c <HAL_RCC_GetHCLKFreq>
 80051c4:	4602      	mov	r2, r0
 80051c6:	4b05      	ldr	r3, [pc, #20]	; (80051dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	0b5b      	lsrs	r3, r3, #13
 80051cc:	f003 0307 	and.w	r3, r3, #7
 80051d0:	4903      	ldr	r1, [pc, #12]	; (80051e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051d2:	5ccb      	ldrb	r3, [r1, r3]
 80051d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051d8:	4618      	mov	r0, r3
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	40023800 	.word	0x40023800
 80051e0:	080086dc 	.word	0x080086dc

080051e4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b086      	sub	sp, #24
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80051ec:	2300      	movs	r3, #0
 80051ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80051f0:	2300      	movs	r3, #0
 80051f2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0301 	and.w	r3, r3, #1
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d105      	bne.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005208:	2b00      	cmp	r3, #0
 800520a:	d035      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800520c:	4b62      	ldr	r3, [pc, #392]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800520e:	2200      	movs	r2, #0
 8005210:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005212:	f7fe fb35 	bl	8003880 <HAL_GetTick>
 8005216:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005218:	e008      	b.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800521a:	f7fe fb31 	bl	8003880 <HAL_GetTick>
 800521e:	4602      	mov	r2, r0
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	2b02      	cmp	r3, #2
 8005226:	d901      	bls.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005228:	2303      	movs	r3, #3
 800522a:	e0b0      	b.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800522c:	4b5b      	ldr	r3, [pc, #364]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d1f0      	bne.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	019a      	lsls	r2, r3, #6
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	071b      	lsls	r3, r3, #28
 8005244:	4955      	ldr	r1, [pc, #340]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005246:	4313      	orrs	r3, r2
 8005248:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800524c:	4b52      	ldr	r3, [pc, #328]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800524e:	2201      	movs	r2, #1
 8005250:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005252:	f7fe fb15 	bl	8003880 <HAL_GetTick>
 8005256:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005258:	e008      	b.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800525a:	f7fe fb11 	bl	8003880 <HAL_GetTick>
 800525e:	4602      	mov	r2, r0
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	2b02      	cmp	r3, #2
 8005266:	d901      	bls.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	e090      	b.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800526c:	4b4b      	ldr	r3, [pc, #300]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005274:	2b00      	cmp	r3, #0
 8005276:	d0f0      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 0302 	and.w	r3, r3, #2
 8005280:	2b00      	cmp	r3, #0
 8005282:	f000 8083 	beq.w	800538c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005286:	2300      	movs	r3, #0
 8005288:	60fb      	str	r3, [r7, #12]
 800528a:	4b44      	ldr	r3, [pc, #272]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800528c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528e:	4a43      	ldr	r2, [pc, #268]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005294:	6413      	str	r3, [r2, #64]	; 0x40
 8005296:	4b41      	ldr	r3, [pc, #260]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800529e:	60fb      	str	r3, [r7, #12]
 80052a0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80052a2:	4b3f      	ldr	r3, [pc, #252]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a3e      	ldr	r2, [pc, #248]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80052a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052ac:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80052ae:	f7fe fae7 	bl	8003880 <HAL_GetTick>
 80052b2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80052b4:	e008      	b.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80052b6:	f7fe fae3 	bl	8003880 <HAL_GetTick>
 80052ba:	4602      	mov	r2, r0
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	2b02      	cmp	r3, #2
 80052c2:	d901      	bls.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	e062      	b.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80052c8:	4b35      	ldr	r3, [pc, #212]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d0f0      	beq.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80052d4:	4b31      	ldr	r3, [pc, #196]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052dc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d02f      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052ec:	693a      	ldr	r2, [r7, #16]
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d028      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80052f2:	4b2a      	ldr	r3, [pc, #168]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052fa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80052fc:	4b29      	ldr	r3, [pc, #164]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80052fe:	2201      	movs	r2, #1
 8005300:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005302:	4b28      	ldr	r3, [pc, #160]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005304:	2200      	movs	r2, #0
 8005306:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005308:	4a24      	ldr	r2, [pc, #144]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800530e:	4b23      	ldr	r3, [pc, #140]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005312:	f003 0301 	and.w	r3, r3, #1
 8005316:	2b01      	cmp	r3, #1
 8005318:	d114      	bne.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800531a:	f7fe fab1 	bl	8003880 <HAL_GetTick>
 800531e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005320:	e00a      	b.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005322:	f7fe faad 	bl	8003880 <HAL_GetTick>
 8005326:	4602      	mov	r2, r0
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005330:	4293      	cmp	r3, r2
 8005332:	d901      	bls.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005334:	2303      	movs	r3, #3
 8005336:	e02a      	b.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005338:	4b18      	ldr	r3, [pc, #96]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800533a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800533c:	f003 0302 	and.w	r3, r3, #2
 8005340:	2b00      	cmp	r3, #0
 8005342:	d0ee      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800534c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005350:	d10d      	bne.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005352:	4b12      	ldr	r3, [pc, #72]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005362:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005366:	490d      	ldr	r1, [pc, #52]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005368:	4313      	orrs	r3, r2
 800536a:	608b      	str	r3, [r1, #8]
 800536c:	e005      	b.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800536e:	4b0b      	ldr	r3, [pc, #44]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	4a0a      	ldr	r2, [pc, #40]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005374:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005378:	6093      	str	r3, [r2, #8]
 800537a:	4b08      	ldr	r3, [pc, #32]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800537c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005386:	4905      	ldr	r1, [pc, #20]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005388:	4313      	orrs	r3, r2
 800538a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3718      	adds	r7, #24
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	42470068 	.word	0x42470068
 800539c:	40023800 	.word	0x40023800
 80053a0:	40007000 	.word	0x40007000
 80053a4:	42470e40 	.word	0x42470e40

080053a8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d101      	bne.n	80053be <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e066      	b.n	800548c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	7f5b      	ldrb	r3, [r3, #29]
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d105      	bne.n	80053d4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f7fd fdce 	bl	8002f70 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2202      	movs	r2, #2
 80053d8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	22ca      	movs	r2, #202	; 0xca
 80053e0:	625a      	str	r2, [r3, #36]	; 0x24
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2253      	movs	r2, #83	; 0x53
 80053e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 f87a 	bl	80054e4 <RTC_EnterInitMode>
 80053f0:	4603      	mov	r3, r0
 80053f2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80053f4:	7bfb      	ldrb	r3, [r7, #15]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d12c      	bne.n	8005454 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	6812      	ldr	r2, [r2, #0]
 8005404:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005408:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800540c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	6899      	ldr	r1, [r3, #8]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685a      	ldr	r2, [r3, #4]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	431a      	orrs	r2, r3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	695b      	ldr	r3, [r3, #20]
 8005422:	431a      	orrs	r2, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	430a      	orrs	r2, r1
 800542a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	68d2      	ldr	r2, [r2, #12]
 8005434:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	6919      	ldr	r1, [r3, #16]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	041a      	lsls	r2, r3, #16
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	430a      	orrs	r2, r1
 8005448:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 f881 	bl	8005552 <RTC_ExitInitMode>
 8005450:	4603      	mov	r3, r0
 8005452:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005454:	7bfb      	ldrb	r3, [r7, #15]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d113      	bne.n	8005482 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005468:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	699a      	ldr	r2, [r3, #24]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	430a      	orrs	r2, r1
 800547a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	22ff      	movs	r2, #255	; 0xff
 8005488:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800548a:	7bfb      	ldrb	r3, [r7, #15]
}
 800548c:	4618      	mov	r0, r3
 800548e:	3710      	adds	r7, #16
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800549c:	2300      	movs	r3, #0
 800549e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68da      	ldr	r2, [r3, #12]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80054ae:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80054b0:	f7fe f9e6 	bl	8003880 <HAL_GetTick>
 80054b4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80054b6:	e009      	b.n	80054cc <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80054b8:	f7fe f9e2 	bl	8003880 <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054c6:	d901      	bls.n	80054cc <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80054c8:	2303      	movs	r3, #3
 80054ca:	e007      	b.n	80054dc <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	f003 0320 	and.w	r3, r3, #32
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d0ee      	beq.n	80054b8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80054da:	2300      	movs	r3, #0
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3710      	adds	r7, #16
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80054ec:	2300      	movs	r3, #0
 80054ee:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80054f0:	2300      	movs	r3, #0
 80054f2:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d122      	bne.n	8005548 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68da      	ldr	r2, [r3, #12]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005510:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005512:	f7fe f9b5 	bl	8003880 <HAL_GetTick>
 8005516:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005518:	e00c      	b.n	8005534 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800551a:	f7fe f9b1 	bl	8003880 <HAL_GetTick>
 800551e:	4602      	mov	r2, r0
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	1ad3      	subs	r3, r2, r3
 8005524:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005528:	d904      	bls.n	8005534 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2204      	movs	r2, #4
 800552e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800553e:	2b00      	cmp	r3, #0
 8005540:	d102      	bne.n	8005548 <RTC_EnterInitMode+0x64>
 8005542:	7bfb      	ldrb	r3, [r7, #15]
 8005544:	2b01      	cmp	r3, #1
 8005546:	d1e8      	bne.n	800551a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005548:	7bfb      	ldrb	r3, [r7, #15]
}
 800554a:	4618      	mov	r0, r3
 800554c:	3710      	adds	r7, #16
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}

08005552 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005552:	b580      	push	{r7, lr}
 8005554:	b084      	sub	sp, #16
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800555a:	2300      	movs	r3, #0
 800555c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68da      	ldr	r2, [r3, #12]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800556c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	f003 0320 	and.w	r3, r3, #32
 8005578:	2b00      	cmp	r3, #0
 800557a:	d10a      	bne.n	8005592 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f7ff ff89 	bl	8005494 <HAL_RTC_WaitForSynchro>
 8005582:	4603      	mov	r3, r0
 8005584:	2b00      	cmp	r3, #0
 8005586:	d004      	beq.n	8005592 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2204      	movs	r2, #4
 800558c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005592:	7bfb      	ldrb	r3, [r7, #15]
}
 8005594:	4618      	mov	r0, r3
 8005596:	3710      	adds	r7, #16
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b082      	sub	sp, #8
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d101      	bne.n	80055ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e041      	b.n	8005632 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d106      	bne.n	80055c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f7fd fcfe 	bl	8002fc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2202      	movs	r2, #2
 80055cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	3304      	adds	r3, #4
 80055d8:	4619      	mov	r1, r3
 80055da:	4610      	mov	r0, r2
 80055dc:	f000 fe58 	bl	8006290 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3708      	adds	r7, #8
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}

0800563a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800563a:	b580      	push	{r7, lr}
 800563c:	b082      	sub	sp, #8
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d101      	bne.n	800564c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	e041      	b.n	80056d0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005652:	b2db      	uxtb	r3, r3
 8005654:	2b00      	cmp	r3, #0
 8005656:	d106      	bne.n	8005666 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f7fd fe45 	bl	80032f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2202      	movs	r2, #2
 800566a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	3304      	adds	r3, #4
 8005676:	4619      	mov	r1, r3
 8005678:	4610      	mov	r0, r2
 800567a:	f000 fe09 	bl	8006290 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2201      	movs	r2, #1
 8005682:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2201      	movs	r2, #1
 800568a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2201      	movs	r2, #1
 8005692:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2201      	movs	r2, #1
 800569a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2201      	movs	r2, #1
 80056a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2201      	movs	r2, #1
 80056aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2201      	movs	r2, #1
 80056b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2201      	movs	r2, #1
 80056ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2201      	movs	r2, #1
 80056c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2201      	movs	r2, #1
 80056ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056ce:	2300      	movs	r3, #0
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3708      	adds	r7, #8
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d109      	bne.n	80056fc <HAL_TIM_PWM_Start+0x24>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	bf14      	ite	ne
 80056f4:	2301      	movne	r3, #1
 80056f6:	2300      	moveq	r3, #0
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	e022      	b.n	8005742 <HAL_TIM_PWM_Start+0x6a>
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	2b04      	cmp	r3, #4
 8005700:	d109      	bne.n	8005716 <HAL_TIM_PWM_Start+0x3e>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005708:	b2db      	uxtb	r3, r3
 800570a:	2b01      	cmp	r3, #1
 800570c:	bf14      	ite	ne
 800570e:	2301      	movne	r3, #1
 8005710:	2300      	moveq	r3, #0
 8005712:	b2db      	uxtb	r3, r3
 8005714:	e015      	b.n	8005742 <HAL_TIM_PWM_Start+0x6a>
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	2b08      	cmp	r3, #8
 800571a:	d109      	bne.n	8005730 <HAL_TIM_PWM_Start+0x58>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005722:	b2db      	uxtb	r3, r3
 8005724:	2b01      	cmp	r3, #1
 8005726:	bf14      	ite	ne
 8005728:	2301      	movne	r3, #1
 800572a:	2300      	moveq	r3, #0
 800572c:	b2db      	uxtb	r3, r3
 800572e:	e008      	b.n	8005742 <HAL_TIM_PWM_Start+0x6a>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005736:	b2db      	uxtb	r3, r3
 8005738:	2b01      	cmp	r3, #1
 800573a:	bf14      	ite	ne
 800573c:	2301      	movne	r3, #1
 800573e:	2300      	moveq	r3, #0
 8005740:	b2db      	uxtb	r3, r3
 8005742:	2b00      	cmp	r3, #0
 8005744:	d001      	beq.n	800574a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e07c      	b.n	8005844 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d104      	bne.n	800575a <HAL_TIM_PWM_Start+0x82>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2202      	movs	r2, #2
 8005754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005758:	e013      	b.n	8005782 <HAL_TIM_PWM_Start+0xaa>
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	2b04      	cmp	r3, #4
 800575e:	d104      	bne.n	800576a <HAL_TIM_PWM_Start+0x92>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2202      	movs	r2, #2
 8005764:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005768:	e00b      	b.n	8005782 <HAL_TIM_PWM_Start+0xaa>
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	2b08      	cmp	r3, #8
 800576e:	d104      	bne.n	800577a <HAL_TIM_PWM_Start+0xa2>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2202      	movs	r2, #2
 8005774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005778:	e003      	b.n	8005782 <HAL_TIM_PWM_Start+0xaa>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2202      	movs	r2, #2
 800577e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	2201      	movs	r2, #1
 8005788:	6839      	ldr	r1, [r7, #0]
 800578a:	4618      	mov	r0, r3
 800578c:	f001 fa0b 	bl	8006ba6 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a2d      	ldr	r2, [pc, #180]	; (800584c <HAL_TIM_PWM_Start+0x174>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d004      	beq.n	80057a4 <HAL_TIM_PWM_Start+0xcc>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a2c      	ldr	r2, [pc, #176]	; (8005850 <HAL_TIM_PWM_Start+0x178>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d101      	bne.n	80057a8 <HAL_TIM_PWM_Start+0xd0>
 80057a4:	2301      	movs	r3, #1
 80057a6:	e000      	b.n	80057aa <HAL_TIM_PWM_Start+0xd2>
 80057a8:	2300      	movs	r3, #0
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d007      	beq.n	80057be <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80057bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a22      	ldr	r2, [pc, #136]	; (800584c <HAL_TIM_PWM_Start+0x174>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d022      	beq.n	800580e <HAL_TIM_PWM_Start+0x136>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057d0:	d01d      	beq.n	800580e <HAL_TIM_PWM_Start+0x136>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a1f      	ldr	r2, [pc, #124]	; (8005854 <HAL_TIM_PWM_Start+0x17c>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d018      	beq.n	800580e <HAL_TIM_PWM_Start+0x136>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a1d      	ldr	r2, [pc, #116]	; (8005858 <HAL_TIM_PWM_Start+0x180>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d013      	beq.n	800580e <HAL_TIM_PWM_Start+0x136>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a1c      	ldr	r2, [pc, #112]	; (800585c <HAL_TIM_PWM_Start+0x184>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d00e      	beq.n	800580e <HAL_TIM_PWM_Start+0x136>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a16      	ldr	r2, [pc, #88]	; (8005850 <HAL_TIM_PWM_Start+0x178>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d009      	beq.n	800580e <HAL_TIM_PWM_Start+0x136>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a18      	ldr	r2, [pc, #96]	; (8005860 <HAL_TIM_PWM_Start+0x188>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d004      	beq.n	800580e <HAL_TIM_PWM_Start+0x136>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a16      	ldr	r2, [pc, #88]	; (8005864 <HAL_TIM_PWM_Start+0x18c>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d111      	bne.n	8005832 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	f003 0307 	and.w	r3, r3, #7
 8005818:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2b06      	cmp	r3, #6
 800581e:	d010      	beq.n	8005842 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f042 0201 	orr.w	r2, r2, #1
 800582e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005830:	e007      	b.n	8005842 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f042 0201 	orr.w	r2, r2, #1
 8005840:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005842:	2300      	movs	r3, #0
}
 8005844:	4618      	mov	r0, r3
 8005846:	3710      	adds	r7, #16
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}
 800584c:	40010000 	.word	0x40010000
 8005850:	40010400 	.word	0x40010400
 8005854:	40000400 	.word	0x40000400
 8005858:	40000800 	.word	0x40000800
 800585c:	40000c00 	.word	0x40000c00
 8005860:	40014000 	.word	0x40014000
 8005864:	40001800 	.word	0x40001800

08005868 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	2200      	movs	r2, #0
 8005878:	6839      	ldr	r1, [r7, #0]
 800587a:	4618      	mov	r0, r3
 800587c:	f001 f993 	bl	8006ba6 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a2e      	ldr	r2, [pc, #184]	; (8005940 <HAL_TIM_PWM_Stop+0xd8>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d004      	beq.n	8005894 <HAL_TIM_PWM_Stop+0x2c>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a2d      	ldr	r2, [pc, #180]	; (8005944 <HAL_TIM_PWM_Stop+0xdc>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d101      	bne.n	8005898 <HAL_TIM_PWM_Stop+0x30>
 8005894:	2301      	movs	r3, #1
 8005896:	e000      	b.n	800589a <HAL_TIM_PWM_Stop+0x32>
 8005898:	2300      	movs	r3, #0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d017      	beq.n	80058ce <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	6a1a      	ldr	r2, [r3, #32]
 80058a4:	f241 1311 	movw	r3, #4369	; 0x1111
 80058a8:	4013      	ands	r3, r2
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d10f      	bne.n	80058ce <HAL_TIM_PWM_Stop+0x66>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	6a1a      	ldr	r2, [r3, #32]
 80058b4:	f240 4344 	movw	r3, #1092	; 0x444
 80058b8:	4013      	ands	r3, r2
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d107      	bne.n	80058ce <HAL_TIM_PWM_Stop+0x66>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80058cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	6a1a      	ldr	r2, [r3, #32]
 80058d4:	f241 1311 	movw	r3, #4369	; 0x1111
 80058d8:	4013      	ands	r3, r2
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d10f      	bne.n	80058fe <HAL_TIM_PWM_Stop+0x96>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	6a1a      	ldr	r2, [r3, #32]
 80058e4:	f240 4344 	movw	r3, #1092	; 0x444
 80058e8:	4013      	ands	r3, r2
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d107      	bne.n	80058fe <HAL_TIM_PWM_Stop+0x96>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f022 0201 	bic.w	r2, r2, #1
 80058fc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d104      	bne.n	800590e <HAL_TIM_PWM_Stop+0xa6>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800590c:	e013      	b.n	8005936 <HAL_TIM_PWM_Stop+0xce>
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	2b04      	cmp	r3, #4
 8005912:	d104      	bne.n	800591e <HAL_TIM_PWM_Stop+0xb6>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800591c:	e00b      	b.n	8005936 <HAL_TIM_PWM_Stop+0xce>
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	2b08      	cmp	r3, #8
 8005922:	d104      	bne.n	800592e <HAL_TIM_PWM_Stop+0xc6>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800592c:	e003      	b.n	8005936 <HAL_TIM_PWM_Stop+0xce>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2201      	movs	r2, #1
 8005932:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	3708      	adds	r7, #8
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}
 8005940:	40010000 	.word	0x40010000
 8005944:	40010400 	.word	0x40010400

08005948 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d101      	bne.n	800595a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e041      	b.n	80059de <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005960:	b2db      	uxtb	r3, r3
 8005962:	2b00      	cmp	r3, #0
 8005964:	d106      	bne.n	8005974 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 f839 	bl	80059e6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2202      	movs	r2, #2
 8005978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	3304      	adds	r3, #4
 8005984:	4619      	mov	r1, r3
 8005986:	4610      	mov	r0, r2
 8005988:	f000 fc82 	bl	8006290 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3708      	adds	r7, #8
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}

080059e6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80059e6:	b480      	push	{r7}
 80059e8:	b083      	sub	sp, #12
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80059ee:	bf00      	nop
 80059f0:	370c      	adds	r7, #12
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr
	...

080059fc <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b086      	sub	sp, #24
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	60b9      	str	r1, [r7, #8]
 8005a06:	607a      	str	r2, [r7, #4]
 8005a08:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d104      	bne.n	8005a1e <HAL_TIM_IC_Start_DMA+0x22>
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	e013      	b.n	8005a46 <HAL_TIM_IC_Start_DMA+0x4a>
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	2b04      	cmp	r3, #4
 8005a22:	d104      	bne.n	8005a2e <HAL_TIM_IC_Start_DMA+0x32>
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	e00b      	b.n	8005a46 <HAL_TIM_IC_Start_DMA+0x4a>
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	2b08      	cmp	r3, #8
 8005a32:	d104      	bne.n	8005a3e <HAL_TIM_IC_Start_DMA+0x42>
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	e003      	b.n	8005a46 <HAL_TIM_IC_Start_DMA+0x4a>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d104      	bne.n	8005a58 <HAL_TIM_IC_Start_DMA+0x5c>
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	e013      	b.n	8005a80 <HAL_TIM_IC_Start_DMA+0x84>
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	2b04      	cmp	r3, #4
 8005a5c:	d104      	bne.n	8005a68 <HAL_TIM_IC_Start_DMA+0x6c>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	e00b      	b.n	8005a80 <HAL_TIM_IC_Start_DMA+0x84>
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	2b08      	cmp	r3, #8
 8005a6c:	d104      	bne.n	8005a78 <HAL_TIM_IC_Start_DMA+0x7c>
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	e003      	b.n	8005a80 <HAL_TIM_IC_Start_DMA+0x84>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8005a82:	7dbb      	ldrb	r3, [r7, #22]
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d002      	beq.n	8005a8e <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8005a88:	7d7b      	ldrb	r3, [r7, #21]
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d101      	bne.n	8005a92 <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 8005a8e:	2302      	movs	r3, #2
 8005a90:	e146      	b.n	8005d20 <HAL_TIM_IC_Start_DMA+0x324>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8005a92:	7dbb      	ldrb	r3, [r7, #22]
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d143      	bne.n	8005b20 <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8005a98:	7d7b      	ldrb	r3, [r7, #21]
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d140      	bne.n	8005b20 <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d104      	bne.n	8005aae <HAL_TIM_IC_Start_DMA+0xb2>
 8005aa4:	887b      	ldrh	r3, [r7, #2]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d001      	beq.n	8005aae <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e138      	b.n	8005d20 <HAL_TIM_IC_Start_DMA+0x324>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d104      	bne.n	8005abe <HAL_TIM_IC_Start_DMA+0xc2>
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2202      	movs	r2, #2
 8005ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005abc:	e013      	b.n	8005ae6 <HAL_TIM_IC_Start_DMA+0xea>
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	2b04      	cmp	r3, #4
 8005ac2:	d104      	bne.n	8005ace <HAL_TIM_IC_Start_DMA+0xd2>
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2202      	movs	r2, #2
 8005ac8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005acc:	e00b      	b.n	8005ae6 <HAL_TIM_IC_Start_DMA+0xea>
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	2b08      	cmp	r3, #8
 8005ad2:	d104      	bne.n	8005ade <HAL_TIM_IC_Start_DMA+0xe2>
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2202      	movs	r2, #2
 8005ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005adc:	e003      	b.n	8005ae6 <HAL_TIM_IC_Start_DMA+0xea>
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2202      	movs	r2, #2
 8005ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d104      	bne.n	8005af6 <HAL_TIM_IC_Start_DMA+0xfa>
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2202      	movs	r2, #2
 8005af0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) && (Length > 0U))
 8005af4:	e016      	b.n	8005b24 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	2b04      	cmp	r3, #4
 8005afa:	d104      	bne.n	8005b06 <HAL_TIM_IC_Start_DMA+0x10a>
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2202      	movs	r2, #2
 8005b00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) && (Length > 0U))
 8005b04:	e00e      	b.n	8005b24 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	2b08      	cmp	r3, #8
 8005b0a:	d104      	bne.n	8005b16 <HAL_TIM_IC_Start_DMA+0x11a>
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2202      	movs	r2, #2
 8005b10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 8005b14:	e006      	b.n	8005b24 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2202      	movs	r2, #2
 8005b1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 8005b1e:	e001      	b.n	8005b24 <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e0fd      	b.n	8005d20 <HAL_TIM_IC_Start_DMA+0x324>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	68b9      	ldr	r1, [r7, #8]
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f001 f83a 	bl	8006ba6 <TIM_CCxChannelCmd>

  switch (Channel)
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	2b0c      	cmp	r3, #12
 8005b36:	f200 80ad 	bhi.w	8005c94 <HAL_TIM_IC_Start_DMA+0x298>
 8005b3a:	a201      	add	r2, pc, #4	; (adr r2, 8005b40 <HAL_TIM_IC_Start_DMA+0x144>)
 8005b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b40:	08005b75 	.word	0x08005b75
 8005b44:	08005c95 	.word	0x08005c95
 8005b48:	08005c95 	.word	0x08005c95
 8005b4c:	08005c95 	.word	0x08005c95
 8005b50:	08005bbd 	.word	0x08005bbd
 8005b54:	08005c95 	.word	0x08005c95
 8005b58:	08005c95 	.word	0x08005c95
 8005b5c:	08005c95 	.word	0x08005c95
 8005b60:	08005c05 	.word	0x08005c05
 8005b64:	08005c95 	.word	0x08005c95
 8005b68:	08005c95 	.word	0x08005c95
 8005b6c:	08005c95 	.word	0x08005c95
 8005b70:	08005c4d 	.word	0x08005c4d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b78:	4a6b      	ldr	r2, [pc, #428]	; (8005d28 <HAL_TIM_IC_Start_DMA+0x32c>)
 8005b7a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b80:	4a6a      	ldr	r2, [pc, #424]	; (8005d2c <HAL_TIM_IC_Start_DMA+0x330>)
 8005b82:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b88:	4a69      	ldr	r2, [pc, #420]	; (8005d30 <HAL_TIM_IC_Start_DMA+0x334>)
 8005b8a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	3334      	adds	r3, #52	; 0x34
 8005b96:	4619      	mov	r1, r3
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	887b      	ldrh	r3, [r7, #2]
 8005b9c:	f7fe f83c 	bl	8003c18 <HAL_DMA_Start_IT>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d001      	beq.n	8005baa <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e0ba      	b.n	8005d20 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68da      	ldr	r2, [r3, #12]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bb8:	60da      	str	r2, [r3, #12]
      break;
 8005bba:	e06e      	b.n	8005c9a <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc0:	4a59      	ldr	r2, [pc, #356]	; (8005d28 <HAL_TIM_IC_Start_DMA+0x32c>)
 8005bc2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc8:	4a58      	ldr	r2, [pc, #352]	; (8005d2c <HAL_TIM_IC_Start_DMA+0x330>)
 8005bca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bd0:	4a57      	ldr	r2, [pc, #348]	; (8005d30 <HAL_TIM_IC_Start_DMA+0x334>)
 8005bd2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	3338      	adds	r3, #56	; 0x38
 8005bde:	4619      	mov	r1, r3
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	887b      	ldrh	r3, [r7, #2]
 8005be4:	f7fe f818 	bl	8003c18 <HAL_DMA_Start_IT>
 8005be8:	4603      	mov	r3, r0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d001      	beq.n	8005bf2 <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e096      	b.n	8005d20 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68da      	ldr	r2, [r3, #12]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c00:	60da      	str	r2, [r3, #12]
      break;
 8005c02:	e04a      	b.n	8005c9a <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c08:	4a47      	ldr	r2, [pc, #284]	; (8005d28 <HAL_TIM_IC_Start_DMA+0x32c>)
 8005c0a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c10:	4a46      	ldr	r2, [pc, #280]	; (8005d2c <HAL_TIM_IC_Start_DMA+0x330>)
 8005c12:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c18:	4a45      	ldr	r2, [pc, #276]	; (8005d30 <HAL_TIM_IC_Start_DMA+0x334>)
 8005c1a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	333c      	adds	r3, #60	; 0x3c
 8005c26:	4619      	mov	r1, r3
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	887b      	ldrh	r3, [r7, #2]
 8005c2c:	f7fd fff4 	bl	8003c18 <HAL_DMA_Start_IT>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d001      	beq.n	8005c3a <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e072      	b.n	8005d20 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	68da      	ldr	r2, [r3, #12]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c48:	60da      	str	r2, [r3, #12]
      break;
 8005c4a:	e026      	b.n	8005c9a <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c50:	4a35      	ldr	r2, [pc, #212]	; (8005d28 <HAL_TIM_IC_Start_DMA+0x32c>)
 8005c52:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c58:	4a34      	ldr	r2, [pc, #208]	; (8005d2c <HAL_TIM_IC_Start_DMA+0x330>)
 8005c5a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c60:	4a33      	ldr	r2, [pc, #204]	; (8005d30 <HAL_TIM_IC_Start_DMA+0x334>)
 8005c62:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	3340      	adds	r3, #64	; 0x40
 8005c6e:	4619      	mov	r1, r3
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	887b      	ldrh	r3, [r7, #2]
 8005c74:	f7fd ffd0 	bl	8003c18 <HAL_DMA_Start_IT>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d001      	beq.n	8005c82 <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e04e      	b.n	8005d20 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68da      	ldr	r2, [r3, #12]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005c90:	60da      	str	r2, [r3, #12]
      break;
 8005c92:	e002      	b.n	8005c9a <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	75fb      	strb	r3, [r7, #23]
      break;
 8005c98:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a25      	ldr	r2, [pc, #148]	; (8005d34 <HAL_TIM_IC_Start_DMA+0x338>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d022      	beq.n	8005cea <HAL_TIM_IC_Start_DMA+0x2ee>
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cac:	d01d      	beq.n	8005cea <HAL_TIM_IC_Start_DMA+0x2ee>
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a21      	ldr	r2, [pc, #132]	; (8005d38 <HAL_TIM_IC_Start_DMA+0x33c>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d018      	beq.n	8005cea <HAL_TIM_IC_Start_DMA+0x2ee>
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a1f      	ldr	r2, [pc, #124]	; (8005d3c <HAL_TIM_IC_Start_DMA+0x340>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d013      	beq.n	8005cea <HAL_TIM_IC_Start_DMA+0x2ee>
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a1e      	ldr	r2, [pc, #120]	; (8005d40 <HAL_TIM_IC_Start_DMA+0x344>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d00e      	beq.n	8005cea <HAL_TIM_IC_Start_DMA+0x2ee>
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a1c      	ldr	r2, [pc, #112]	; (8005d44 <HAL_TIM_IC_Start_DMA+0x348>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d009      	beq.n	8005cea <HAL_TIM_IC_Start_DMA+0x2ee>
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a1b      	ldr	r2, [pc, #108]	; (8005d48 <HAL_TIM_IC_Start_DMA+0x34c>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d004      	beq.n	8005cea <HAL_TIM_IC_Start_DMA+0x2ee>
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a19      	ldr	r2, [pc, #100]	; (8005d4c <HAL_TIM_IC_Start_DMA+0x350>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d111      	bne.n	8005d0e <HAL_TIM_IC_Start_DMA+0x312>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	f003 0307 	and.w	r3, r3, #7
 8005cf4:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	2b06      	cmp	r3, #6
 8005cfa:	d010      	beq.n	8005d1e <HAL_TIM_IC_Start_DMA+0x322>
    {
      __HAL_TIM_ENABLE(htim);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f042 0201 	orr.w	r2, r2, #1
 8005d0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d0c:	e007      	b.n	8005d1e <HAL_TIM_IC_Start_DMA+0x322>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f042 0201 	orr.w	r2, r2, #1
 8005d1c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8005d1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3718      	adds	r7, #24
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	0800615f 	.word	0x0800615f
 8005d2c:	08006227 	.word	0x08006227
 8005d30:	080060cd 	.word	0x080060cd
 8005d34:	40010000 	.word	0x40010000
 8005d38:	40000400 	.word	0x40000400
 8005d3c:	40000800 	.word	0x40000800
 8005d40:	40000c00 	.word	0x40000c00
 8005d44:	40010400 	.word	0x40010400
 8005d48:	40014000 	.word	0x40014000
 8005d4c:	40001800 	.word	0x40001800

08005d50 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b086      	sub	sp, #24
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d101      	bne.n	8005d6e <HAL_TIM_IC_ConfigChannel+0x1e>
 8005d6a:	2302      	movs	r3, #2
 8005d6c:	e088      	b.n	8005e80 <HAL_TIM_IC_ConfigChannel+0x130>
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2201      	movs	r2, #1
 8005d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d11b      	bne.n	8005db4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6818      	ldr	r0, [r3, #0]
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	6819      	ldr	r1, [r3, #0]
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	685a      	ldr	r2, [r3, #4]
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	f000 fd62 	bl	8006854 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	699a      	ldr	r2, [r3, #24]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f022 020c 	bic.w	r2, r2, #12
 8005d9e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	6999      	ldr	r1, [r3, #24]
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	689a      	ldr	r2, [r3, #8]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	430a      	orrs	r2, r1
 8005db0:	619a      	str	r2, [r3, #24]
 8005db2:	e060      	b.n	8005e76 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2b04      	cmp	r3, #4
 8005db8:	d11c      	bne.n	8005df4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6818      	ldr	r0, [r3, #0]
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	6819      	ldr	r1, [r3, #0]
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	685a      	ldr	r2, [r3, #4]
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	f000 fde6 	bl	800699a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	699a      	ldr	r2, [r3, #24]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005ddc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	6999      	ldr	r1, [r3, #24]
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	021a      	lsls	r2, r3, #8
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	430a      	orrs	r2, r1
 8005df0:	619a      	str	r2, [r3, #24]
 8005df2:	e040      	b.n	8005e76 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2b08      	cmp	r3, #8
 8005df8:	d11b      	bne.n	8005e32 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6818      	ldr	r0, [r3, #0]
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	6819      	ldr	r1, [r3, #0]
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	685a      	ldr	r2, [r3, #4]
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	f000 fe33 	bl	8006a74 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	69da      	ldr	r2, [r3, #28]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f022 020c 	bic.w	r2, r2, #12
 8005e1c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	69d9      	ldr	r1, [r3, #28]
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	689a      	ldr	r2, [r3, #8]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	430a      	orrs	r2, r1
 8005e2e:	61da      	str	r2, [r3, #28]
 8005e30:	e021      	b.n	8005e76 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2b0c      	cmp	r3, #12
 8005e36:	d11c      	bne.n	8005e72 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6818      	ldr	r0, [r3, #0]
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	6819      	ldr	r1, [r3, #0]
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	685a      	ldr	r2, [r3, #4]
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	68db      	ldr	r3, [r3, #12]
 8005e48:	f000 fe50 	bl	8006aec <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	69da      	ldr	r2, [r3, #28]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005e5a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	69d9      	ldr	r1, [r3, #28]
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	021a      	lsls	r2, r3, #8
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	430a      	orrs	r2, r1
 8005e6e:	61da      	str	r2, [r3, #28]
 8005e70:	e001      	b.n	8005e76 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3718      	adds	r7, #24
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b086      	sub	sp, #24
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e94:	2300      	movs	r3, #0
 8005e96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d101      	bne.n	8005ea6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005ea2:	2302      	movs	r3, #2
 8005ea4:	e0ae      	b.n	8006004 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2b0c      	cmp	r3, #12
 8005eb2:	f200 809f 	bhi.w	8005ff4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005eb6:	a201      	add	r2, pc, #4	; (adr r2, 8005ebc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ebc:	08005ef1 	.word	0x08005ef1
 8005ec0:	08005ff5 	.word	0x08005ff5
 8005ec4:	08005ff5 	.word	0x08005ff5
 8005ec8:	08005ff5 	.word	0x08005ff5
 8005ecc:	08005f31 	.word	0x08005f31
 8005ed0:	08005ff5 	.word	0x08005ff5
 8005ed4:	08005ff5 	.word	0x08005ff5
 8005ed8:	08005ff5 	.word	0x08005ff5
 8005edc:	08005f73 	.word	0x08005f73
 8005ee0:	08005ff5 	.word	0x08005ff5
 8005ee4:	08005ff5 	.word	0x08005ff5
 8005ee8:	08005ff5 	.word	0x08005ff5
 8005eec:	08005fb3 	.word	0x08005fb3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68b9      	ldr	r1, [r7, #8]
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f000 fa6a 	bl	80063d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	699a      	ldr	r2, [r3, #24]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f042 0208 	orr.w	r2, r2, #8
 8005f0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	699a      	ldr	r2, [r3, #24]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f022 0204 	bic.w	r2, r2, #4
 8005f1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	6999      	ldr	r1, [r3, #24]
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	691a      	ldr	r2, [r3, #16]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	430a      	orrs	r2, r1
 8005f2c:	619a      	str	r2, [r3, #24]
      break;
 8005f2e:	e064      	b.n	8005ffa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68b9      	ldr	r1, [r7, #8]
 8005f36:	4618      	mov	r0, r3
 8005f38:	f000 faba 	bl	80064b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	699a      	ldr	r2, [r3, #24]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	699a      	ldr	r2, [r3, #24]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	6999      	ldr	r1, [r3, #24]
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	021a      	lsls	r2, r3, #8
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	430a      	orrs	r2, r1
 8005f6e:	619a      	str	r2, [r3, #24]
      break;
 8005f70:	e043      	b.n	8005ffa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	68b9      	ldr	r1, [r7, #8]
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f000 fb0f 	bl	800659c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	69da      	ldr	r2, [r3, #28]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f042 0208 	orr.w	r2, r2, #8
 8005f8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	69da      	ldr	r2, [r3, #28]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f022 0204 	bic.w	r2, r2, #4
 8005f9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	69d9      	ldr	r1, [r3, #28]
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	691a      	ldr	r2, [r3, #16]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	430a      	orrs	r2, r1
 8005fae:	61da      	str	r2, [r3, #28]
      break;
 8005fb0:	e023      	b.n	8005ffa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68b9      	ldr	r1, [r7, #8]
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f000 fb63 	bl	8006684 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	69da      	ldr	r2, [r3, #28]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	69da      	ldr	r2, [r3, #28]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	69d9      	ldr	r1, [r3, #28]
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	691b      	ldr	r3, [r3, #16]
 8005fe8:	021a      	lsls	r2, r3, #8
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	430a      	orrs	r2, r1
 8005ff0:	61da      	str	r2, [r3, #28]
      break;
 8005ff2:	e002      	b.n	8005ffa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	75fb      	strb	r3, [r7, #23]
      break;
 8005ff8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006002:	7dfb      	ldrb	r3, [r7, #23]
}
 8006004:	4618      	mov	r0, r3
 8006006:	3718      	adds	r7, #24
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}

0800600c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b082      	sub	sp, #8
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800601c:	2b01      	cmp	r3, #1
 800601e:	d101      	bne.n	8006024 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006020:	2302      	movs	r3, #2
 8006022:	e031      	b.n	8006088 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2202      	movs	r2, #2
 8006030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006034:	6839      	ldr	r1, [r7, #0]
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 fb7a 	bl	8006730 <TIM_SlaveTimer_SetConfig>
 800603c:	4603      	mov	r3, r0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d009      	beq.n	8006056 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2201      	movs	r2, #1
 8006046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	e018      	b.n	8006088 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68da      	ldr	r2, [r3, #12]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006064:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	68da      	ldr	r2, [r3, #12]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006074:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2201      	movs	r2, #1
 800607a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006086:	2300      	movs	r3, #0
}
 8006088:	4618      	mov	r0, r3
 800608a:	3708      	adds	r7, #8
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006090:	b480      	push	{r7}
 8006092:	b083      	sub	sp, #12
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006098:	bf00      	nop
 800609a:	370c      	adds	r7, #12
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr

080060a4 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b083      	sub	sp, #12
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80060ac:	bf00      	nop
 80060ae:	370c      	adds	r7, #12
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80060c0:	bf00      	nop
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d107      	bne.n	80060f4 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2201      	movs	r2, #1
 80060e8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2201      	movs	r2, #1
 80060ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060f2:	e02a      	b.n	800614a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d107      	bne.n	800610e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2202      	movs	r2, #2
 8006102:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800610c:	e01d      	b.n	800614a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	429a      	cmp	r2, r3
 8006116:	d107      	bne.n	8006128 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2204      	movs	r2, #4
 800611c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2201      	movs	r2, #1
 8006122:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006126:	e010      	b.n	800614a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	429a      	cmp	r2, r3
 8006130:	d107      	bne.n	8006142 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2208      	movs	r2, #8
 8006136:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006140:	e003      	b.n	800614a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2201      	movs	r2, #1
 8006146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800614a:	68f8      	ldr	r0, [r7, #12]
 800614c:	f7ff ffb4 	bl	80060b8 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2200      	movs	r2, #0
 8006154:	771a      	strb	r2, [r3, #28]
}
 8006156:	bf00      	nop
 8006158:	3710      	adds	r7, #16
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}

0800615e <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 800615e:	b580      	push	{r7, lr}
 8006160:	b084      	sub	sp, #16
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800616a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	429a      	cmp	r2, r3
 8006174:	d10f      	bne.n	8006196 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2201      	movs	r2, #1
 800617a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	69db      	ldr	r3, [r3, #28]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d146      	bne.n	8006212 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006194:	e03d      	b.n	8006212 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	429a      	cmp	r2, r3
 800619e:	d10f      	bne.n	80061c0 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2202      	movs	r2, #2
 80061a4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	69db      	ldr	r3, [r3, #28]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d131      	bne.n	8006212 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2201      	movs	r2, #1
 80061b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2201      	movs	r2, #1
 80061ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80061be:	e028      	b.n	8006212 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d10f      	bne.n	80061ea <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2204      	movs	r2, #4
 80061ce:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	69db      	ldr	r3, [r3, #28]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d11c      	bne.n	8006212 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2201      	movs	r2, #1
 80061dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061e8:	e013      	b.n	8006212 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ee:	687a      	ldr	r2, [r7, #4]
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d10e      	bne.n	8006212 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2208      	movs	r2, #8
 80061f8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	69db      	ldr	r3, [r3, #28]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d107      	bne.n	8006212 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2201      	movs	r2, #1
 8006206:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2201      	movs	r2, #1
 800620e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	f7ff ff3c 	bl	8006090 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2200      	movs	r2, #0
 800621c:	771a      	strb	r2, [r3, #28]
}
 800621e:	bf00      	nop
 8006220:	3710      	adds	r7, #16
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006226:	b580      	push	{r7, lr}
 8006228:	b084      	sub	sp, #16
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006232:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	429a      	cmp	r2, r3
 800623c:	d103      	bne.n	8006246 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2201      	movs	r2, #1
 8006242:	771a      	strb	r2, [r3, #28]
 8006244:	e019      	b.n	800627a <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	429a      	cmp	r2, r3
 800624e:	d103      	bne.n	8006258 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2202      	movs	r2, #2
 8006254:	771a      	strb	r2, [r3, #28]
 8006256:	e010      	b.n	800627a <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	429a      	cmp	r2, r3
 8006260:	d103      	bne.n	800626a <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2204      	movs	r2, #4
 8006266:	771a      	strb	r2, [r3, #28]
 8006268:	e007      	b.n	800627a <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	429a      	cmp	r2, r3
 8006272:	d102      	bne.n	800627a <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2208      	movs	r2, #8
 8006278:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800627a:	68f8      	ldr	r0, [r7, #12]
 800627c:	f7ff ff12 	bl	80060a4 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2200      	movs	r2, #0
 8006284:	771a      	strb	r2, [r3, #28]
}
 8006286:	bf00      	nop
 8006288:	3710      	adds	r7, #16
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
	...

08006290 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006290:	b480      	push	{r7}
 8006292:	b085      	sub	sp, #20
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4a40      	ldr	r2, [pc, #256]	; (80063a4 <TIM_Base_SetConfig+0x114>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d013      	beq.n	80062d0 <TIM_Base_SetConfig+0x40>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062ae:	d00f      	beq.n	80062d0 <TIM_Base_SetConfig+0x40>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	4a3d      	ldr	r2, [pc, #244]	; (80063a8 <TIM_Base_SetConfig+0x118>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d00b      	beq.n	80062d0 <TIM_Base_SetConfig+0x40>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	4a3c      	ldr	r2, [pc, #240]	; (80063ac <TIM_Base_SetConfig+0x11c>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d007      	beq.n	80062d0 <TIM_Base_SetConfig+0x40>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	4a3b      	ldr	r2, [pc, #236]	; (80063b0 <TIM_Base_SetConfig+0x120>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d003      	beq.n	80062d0 <TIM_Base_SetConfig+0x40>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4a3a      	ldr	r2, [pc, #232]	; (80063b4 <TIM_Base_SetConfig+0x124>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d108      	bne.n	80062e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	4313      	orrs	r3, r2
 80062e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4a2f      	ldr	r2, [pc, #188]	; (80063a4 <TIM_Base_SetConfig+0x114>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d02b      	beq.n	8006342 <TIM_Base_SetConfig+0xb2>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062f0:	d027      	beq.n	8006342 <TIM_Base_SetConfig+0xb2>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4a2c      	ldr	r2, [pc, #176]	; (80063a8 <TIM_Base_SetConfig+0x118>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d023      	beq.n	8006342 <TIM_Base_SetConfig+0xb2>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	4a2b      	ldr	r2, [pc, #172]	; (80063ac <TIM_Base_SetConfig+0x11c>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d01f      	beq.n	8006342 <TIM_Base_SetConfig+0xb2>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	4a2a      	ldr	r2, [pc, #168]	; (80063b0 <TIM_Base_SetConfig+0x120>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d01b      	beq.n	8006342 <TIM_Base_SetConfig+0xb2>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4a29      	ldr	r2, [pc, #164]	; (80063b4 <TIM_Base_SetConfig+0x124>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d017      	beq.n	8006342 <TIM_Base_SetConfig+0xb2>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	4a28      	ldr	r2, [pc, #160]	; (80063b8 <TIM_Base_SetConfig+0x128>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d013      	beq.n	8006342 <TIM_Base_SetConfig+0xb2>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	4a27      	ldr	r2, [pc, #156]	; (80063bc <TIM_Base_SetConfig+0x12c>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d00f      	beq.n	8006342 <TIM_Base_SetConfig+0xb2>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	4a26      	ldr	r2, [pc, #152]	; (80063c0 <TIM_Base_SetConfig+0x130>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d00b      	beq.n	8006342 <TIM_Base_SetConfig+0xb2>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4a25      	ldr	r2, [pc, #148]	; (80063c4 <TIM_Base_SetConfig+0x134>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d007      	beq.n	8006342 <TIM_Base_SetConfig+0xb2>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4a24      	ldr	r2, [pc, #144]	; (80063c8 <TIM_Base_SetConfig+0x138>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d003      	beq.n	8006342 <TIM_Base_SetConfig+0xb2>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4a23      	ldr	r2, [pc, #140]	; (80063cc <TIM_Base_SetConfig+0x13c>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d108      	bne.n	8006354 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006348:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	68fa      	ldr	r2, [r7, #12]
 8006350:	4313      	orrs	r3, r2
 8006352:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	695b      	ldr	r3, [r3, #20]
 800635e:	4313      	orrs	r3, r2
 8006360:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	689a      	ldr	r2, [r3, #8]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a0a      	ldr	r2, [pc, #40]	; (80063a4 <TIM_Base_SetConfig+0x114>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d003      	beq.n	8006388 <TIM_Base_SetConfig+0xf8>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4a0c      	ldr	r2, [pc, #48]	; (80063b4 <TIM_Base_SetConfig+0x124>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d103      	bne.n	8006390 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	691a      	ldr	r2, [r3, #16]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	615a      	str	r2, [r3, #20]
}
 8006396:	bf00      	nop
 8006398:	3714      	adds	r7, #20
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr
 80063a2:	bf00      	nop
 80063a4:	40010000 	.word	0x40010000
 80063a8:	40000400 	.word	0x40000400
 80063ac:	40000800 	.word	0x40000800
 80063b0:	40000c00 	.word	0x40000c00
 80063b4:	40010400 	.word	0x40010400
 80063b8:	40014000 	.word	0x40014000
 80063bc:	40014400 	.word	0x40014400
 80063c0:	40014800 	.word	0x40014800
 80063c4:	40001800 	.word	0x40001800
 80063c8:	40001c00 	.word	0x40001c00
 80063cc:	40002000 	.word	0x40002000

080063d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b087      	sub	sp, #28
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a1b      	ldr	r3, [r3, #32]
 80063de:	f023 0201 	bic.w	r2, r3, #1
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a1b      	ldr	r3, [r3, #32]
 80063ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	699b      	ldr	r3, [r3, #24]
 80063f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f023 0303 	bic.w	r3, r3, #3
 8006406:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	4313      	orrs	r3, r2
 8006410:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	f023 0302 	bic.w	r3, r3, #2
 8006418:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	697a      	ldr	r2, [r7, #20]
 8006420:	4313      	orrs	r3, r2
 8006422:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a20      	ldr	r2, [pc, #128]	; (80064a8 <TIM_OC1_SetConfig+0xd8>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d003      	beq.n	8006434 <TIM_OC1_SetConfig+0x64>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	4a1f      	ldr	r2, [pc, #124]	; (80064ac <TIM_OC1_SetConfig+0xdc>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d10c      	bne.n	800644e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	f023 0308 	bic.w	r3, r3, #8
 800643a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	697a      	ldr	r2, [r7, #20]
 8006442:	4313      	orrs	r3, r2
 8006444:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	f023 0304 	bic.w	r3, r3, #4
 800644c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4a15      	ldr	r2, [pc, #84]	; (80064a8 <TIM_OC1_SetConfig+0xd8>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d003      	beq.n	800645e <TIM_OC1_SetConfig+0x8e>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4a14      	ldr	r2, [pc, #80]	; (80064ac <TIM_OC1_SetConfig+0xdc>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d111      	bne.n	8006482 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006464:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800646c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	695b      	ldr	r3, [r3, #20]
 8006472:	693a      	ldr	r2, [r7, #16]
 8006474:	4313      	orrs	r3, r2
 8006476:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	699b      	ldr	r3, [r3, #24]
 800647c:	693a      	ldr	r2, [r7, #16]
 800647e:	4313      	orrs	r3, r2
 8006480:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	693a      	ldr	r2, [r7, #16]
 8006486:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	68fa      	ldr	r2, [r7, #12]
 800648c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	685a      	ldr	r2, [r3, #4]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	697a      	ldr	r2, [r7, #20]
 800649a:	621a      	str	r2, [r3, #32]
}
 800649c:	bf00      	nop
 800649e:	371c      	adds	r7, #28
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr
 80064a8:	40010000 	.word	0x40010000
 80064ac:	40010400 	.word	0x40010400

080064b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b087      	sub	sp, #28
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a1b      	ldr	r3, [r3, #32]
 80064be:	f023 0210 	bic.w	r2, r3, #16
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a1b      	ldr	r3, [r3, #32]
 80064ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	699b      	ldr	r3, [r3, #24]
 80064d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	021b      	lsls	r3, r3, #8
 80064ee:	68fa      	ldr	r2, [r7, #12]
 80064f0:	4313      	orrs	r3, r2
 80064f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	f023 0320 	bic.w	r3, r3, #32
 80064fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	011b      	lsls	r3, r3, #4
 8006502:	697a      	ldr	r2, [r7, #20]
 8006504:	4313      	orrs	r3, r2
 8006506:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4a22      	ldr	r2, [pc, #136]	; (8006594 <TIM_OC2_SetConfig+0xe4>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d003      	beq.n	8006518 <TIM_OC2_SetConfig+0x68>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	4a21      	ldr	r2, [pc, #132]	; (8006598 <TIM_OC2_SetConfig+0xe8>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d10d      	bne.n	8006534 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800651e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	011b      	lsls	r3, r3, #4
 8006526:	697a      	ldr	r2, [r7, #20]
 8006528:	4313      	orrs	r3, r2
 800652a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006532:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4a17      	ldr	r2, [pc, #92]	; (8006594 <TIM_OC2_SetConfig+0xe4>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d003      	beq.n	8006544 <TIM_OC2_SetConfig+0x94>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4a16      	ldr	r2, [pc, #88]	; (8006598 <TIM_OC2_SetConfig+0xe8>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d113      	bne.n	800656c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800654a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006552:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	695b      	ldr	r3, [r3, #20]
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	693a      	ldr	r2, [r7, #16]
 800655c:	4313      	orrs	r3, r2
 800655e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	699b      	ldr	r3, [r3, #24]
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	693a      	ldr	r2, [r7, #16]
 8006568:	4313      	orrs	r3, r2
 800656a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	693a      	ldr	r2, [r7, #16]
 8006570:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	68fa      	ldr	r2, [r7, #12]
 8006576:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	685a      	ldr	r2, [r3, #4]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	697a      	ldr	r2, [r7, #20]
 8006584:	621a      	str	r2, [r3, #32]
}
 8006586:	bf00      	nop
 8006588:	371c      	adds	r7, #28
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr
 8006592:	bf00      	nop
 8006594:	40010000 	.word	0x40010000
 8006598:	40010400 	.word	0x40010400

0800659c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800659c:	b480      	push	{r7}
 800659e:	b087      	sub	sp, #28
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6a1b      	ldr	r3, [r3, #32]
 80065aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6a1b      	ldr	r3, [r3, #32]
 80065b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	69db      	ldr	r3, [r3, #28]
 80065c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f023 0303 	bic.w	r3, r3, #3
 80065d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	68fa      	ldr	r2, [r7, #12]
 80065da:	4313      	orrs	r3, r2
 80065dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80065e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	021b      	lsls	r3, r3, #8
 80065ec:	697a      	ldr	r2, [r7, #20]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a21      	ldr	r2, [pc, #132]	; (800667c <TIM_OC3_SetConfig+0xe0>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d003      	beq.n	8006602 <TIM_OC3_SetConfig+0x66>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4a20      	ldr	r2, [pc, #128]	; (8006680 <TIM_OC3_SetConfig+0xe4>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d10d      	bne.n	800661e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006608:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	021b      	lsls	r3, r3, #8
 8006610:	697a      	ldr	r2, [r7, #20]
 8006612:	4313      	orrs	r3, r2
 8006614:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800661c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4a16      	ldr	r2, [pc, #88]	; (800667c <TIM_OC3_SetConfig+0xe0>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d003      	beq.n	800662e <TIM_OC3_SetConfig+0x92>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4a15      	ldr	r2, [pc, #84]	; (8006680 <TIM_OC3_SetConfig+0xe4>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d113      	bne.n	8006656 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006634:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800663c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	695b      	ldr	r3, [r3, #20]
 8006642:	011b      	lsls	r3, r3, #4
 8006644:	693a      	ldr	r2, [r7, #16]
 8006646:	4313      	orrs	r3, r2
 8006648:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	699b      	ldr	r3, [r3, #24]
 800664e:	011b      	lsls	r3, r3, #4
 8006650:	693a      	ldr	r2, [r7, #16]
 8006652:	4313      	orrs	r3, r2
 8006654:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	693a      	ldr	r2, [r7, #16]
 800665a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	68fa      	ldr	r2, [r7, #12]
 8006660:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	685a      	ldr	r2, [r3, #4]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	697a      	ldr	r2, [r7, #20]
 800666e:	621a      	str	r2, [r3, #32]
}
 8006670:	bf00      	nop
 8006672:	371c      	adds	r7, #28
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr
 800667c:	40010000 	.word	0x40010000
 8006680:	40010400 	.word	0x40010400

08006684 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006684:	b480      	push	{r7}
 8006686:	b087      	sub	sp, #28
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a1b      	ldr	r3, [r3, #32]
 8006692:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a1b      	ldr	r3, [r3, #32]
 800669e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	69db      	ldr	r3, [r3, #28]
 80066aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	021b      	lsls	r3, r3, #8
 80066c2:	68fa      	ldr	r2, [r7, #12]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	031b      	lsls	r3, r3, #12
 80066d6:	693a      	ldr	r2, [r7, #16]
 80066d8:	4313      	orrs	r3, r2
 80066da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4a12      	ldr	r2, [pc, #72]	; (8006728 <TIM_OC4_SetConfig+0xa4>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d003      	beq.n	80066ec <TIM_OC4_SetConfig+0x68>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4a11      	ldr	r2, [pc, #68]	; (800672c <TIM_OC4_SetConfig+0xa8>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d109      	bne.n	8006700 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	695b      	ldr	r3, [r3, #20]
 80066f8:	019b      	lsls	r3, r3, #6
 80066fa:	697a      	ldr	r2, [r7, #20]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	697a      	ldr	r2, [r7, #20]
 8006704:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	68fa      	ldr	r2, [r7, #12]
 800670a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	685a      	ldr	r2, [r3, #4]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	693a      	ldr	r2, [r7, #16]
 8006718:	621a      	str	r2, [r3, #32]
}
 800671a:	bf00      	nop
 800671c:	371c      	adds	r7, #28
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr
 8006726:	bf00      	nop
 8006728:	40010000 	.word	0x40010000
 800672c:	40010400 	.word	0x40010400

08006730 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b086      	sub	sp, #24
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800673a:	2300      	movs	r3, #0
 800673c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800674c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	693a      	ldr	r2, [r7, #16]
 8006754:	4313      	orrs	r3, r2
 8006756:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	f023 0307 	bic.w	r3, r3, #7
 800675e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	693a      	ldr	r2, [r7, #16]
 8006766:	4313      	orrs	r3, r2
 8006768:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	693a      	ldr	r2, [r7, #16]
 8006770:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	2b70      	cmp	r3, #112	; 0x70
 8006778:	d01a      	beq.n	80067b0 <TIM_SlaveTimer_SetConfig+0x80>
 800677a:	2b70      	cmp	r3, #112	; 0x70
 800677c:	d860      	bhi.n	8006840 <TIM_SlaveTimer_SetConfig+0x110>
 800677e:	2b60      	cmp	r3, #96	; 0x60
 8006780:	d054      	beq.n	800682c <TIM_SlaveTimer_SetConfig+0xfc>
 8006782:	2b60      	cmp	r3, #96	; 0x60
 8006784:	d85c      	bhi.n	8006840 <TIM_SlaveTimer_SetConfig+0x110>
 8006786:	2b50      	cmp	r3, #80	; 0x50
 8006788:	d046      	beq.n	8006818 <TIM_SlaveTimer_SetConfig+0xe8>
 800678a:	2b50      	cmp	r3, #80	; 0x50
 800678c:	d858      	bhi.n	8006840 <TIM_SlaveTimer_SetConfig+0x110>
 800678e:	2b40      	cmp	r3, #64	; 0x40
 8006790:	d019      	beq.n	80067c6 <TIM_SlaveTimer_SetConfig+0x96>
 8006792:	2b40      	cmp	r3, #64	; 0x40
 8006794:	d854      	bhi.n	8006840 <TIM_SlaveTimer_SetConfig+0x110>
 8006796:	2b30      	cmp	r3, #48	; 0x30
 8006798:	d055      	beq.n	8006846 <TIM_SlaveTimer_SetConfig+0x116>
 800679a:	2b30      	cmp	r3, #48	; 0x30
 800679c:	d850      	bhi.n	8006840 <TIM_SlaveTimer_SetConfig+0x110>
 800679e:	2b20      	cmp	r3, #32
 80067a0:	d051      	beq.n	8006846 <TIM_SlaveTimer_SetConfig+0x116>
 80067a2:	2b20      	cmp	r3, #32
 80067a4:	d84c      	bhi.n	8006840 <TIM_SlaveTimer_SetConfig+0x110>
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d04d      	beq.n	8006846 <TIM_SlaveTimer_SetConfig+0x116>
 80067aa:	2b10      	cmp	r3, #16
 80067ac:	d04b      	beq.n	8006846 <TIM_SlaveTimer_SetConfig+0x116>
 80067ae:	e047      	b.n	8006840 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6818      	ldr	r0, [r3, #0]
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	68d9      	ldr	r1, [r3, #12]
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	689a      	ldr	r2, [r3, #8]
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	691b      	ldr	r3, [r3, #16]
 80067c0:	f000 f9d1 	bl	8006b66 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80067c4:	e040      	b.n	8006848 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	2b05      	cmp	r3, #5
 80067cc:	d101      	bne.n	80067d2 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	e03b      	b.n	800684a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	6a1b      	ldr	r3, [r3, #32]
 80067d8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	6a1a      	ldr	r2, [r3, #32]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f022 0201 	bic.w	r2, r2, #1
 80067e8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	699b      	ldr	r3, [r3, #24]
 80067f0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80067f8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	691b      	ldr	r3, [r3, #16]
 80067fe:	011b      	lsls	r3, r3, #4
 8006800:	68ba      	ldr	r2, [r7, #8]
 8006802:	4313      	orrs	r3, r2
 8006804:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	68ba      	ldr	r2, [r7, #8]
 800680c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	68fa      	ldr	r2, [r7, #12]
 8006814:	621a      	str	r2, [r3, #32]
      break;
 8006816:	e017      	b.n	8006848 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6818      	ldr	r0, [r3, #0]
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	6899      	ldr	r1, [r3, #8]
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	691b      	ldr	r3, [r3, #16]
 8006824:	461a      	mov	r2, r3
 8006826:	f000 f889 	bl	800693c <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800682a:	e00d      	b.n	8006848 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6818      	ldr	r0, [r3, #0]
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	6899      	ldr	r1, [r3, #8]
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	691b      	ldr	r3, [r3, #16]
 8006838:	461a      	mov	r2, r3
 800683a:	f000 f8eb 	bl	8006a14 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800683e:	e003      	b.n	8006848 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	75fb      	strb	r3, [r7, #23]
      break;
 8006844:	e000      	b.n	8006848 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8006846:	bf00      	nop
  }

  return status;
 8006848:	7dfb      	ldrb	r3, [r7, #23]
}
 800684a:	4618      	mov	r0, r3
 800684c:	3718      	adds	r7, #24
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
	...

08006854 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006854:	b480      	push	{r7}
 8006856:	b087      	sub	sp, #28
 8006858:	af00      	add	r7, sp, #0
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	60b9      	str	r1, [r7, #8]
 800685e:	607a      	str	r2, [r7, #4]
 8006860:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6a1b      	ldr	r3, [r3, #32]
 8006866:	f023 0201 	bic.w	r2, r3, #1
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	699b      	ldr	r3, [r3, #24]
 8006872:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6a1b      	ldr	r3, [r3, #32]
 8006878:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	4a28      	ldr	r2, [pc, #160]	; (8006920 <TIM_TI1_SetConfig+0xcc>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d01b      	beq.n	80068ba <TIM_TI1_SetConfig+0x66>
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006888:	d017      	beq.n	80068ba <TIM_TI1_SetConfig+0x66>
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	4a25      	ldr	r2, [pc, #148]	; (8006924 <TIM_TI1_SetConfig+0xd0>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d013      	beq.n	80068ba <TIM_TI1_SetConfig+0x66>
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	4a24      	ldr	r2, [pc, #144]	; (8006928 <TIM_TI1_SetConfig+0xd4>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d00f      	beq.n	80068ba <TIM_TI1_SetConfig+0x66>
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	4a23      	ldr	r2, [pc, #140]	; (800692c <TIM_TI1_SetConfig+0xd8>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d00b      	beq.n	80068ba <TIM_TI1_SetConfig+0x66>
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	4a22      	ldr	r2, [pc, #136]	; (8006930 <TIM_TI1_SetConfig+0xdc>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d007      	beq.n	80068ba <TIM_TI1_SetConfig+0x66>
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	4a21      	ldr	r2, [pc, #132]	; (8006934 <TIM_TI1_SetConfig+0xe0>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d003      	beq.n	80068ba <TIM_TI1_SetConfig+0x66>
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	4a20      	ldr	r2, [pc, #128]	; (8006938 <TIM_TI1_SetConfig+0xe4>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d101      	bne.n	80068be <TIM_TI1_SetConfig+0x6a>
 80068ba:	2301      	movs	r3, #1
 80068bc:	e000      	b.n	80068c0 <TIM_TI1_SetConfig+0x6c>
 80068be:	2300      	movs	r3, #0
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d008      	beq.n	80068d6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	f023 0303 	bic.w	r3, r3, #3
 80068ca:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80068cc:	697a      	ldr	r2, [r7, #20]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4313      	orrs	r3, r2
 80068d2:	617b      	str	r3, [r7, #20]
 80068d4:	e003      	b.n	80068de <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	f043 0301 	orr.w	r3, r3, #1
 80068dc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	011b      	lsls	r3, r3, #4
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	697a      	ldr	r2, [r7, #20]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	f023 030a 	bic.w	r3, r3, #10
 80068f8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	f003 030a 	and.w	r3, r3, #10
 8006900:	693a      	ldr	r2, [r7, #16]
 8006902:	4313      	orrs	r3, r2
 8006904:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	697a      	ldr	r2, [r7, #20]
 800690a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	693a      	ldr	r2, [r7, #16]
 8006910:	621a      	str	r2, [r3, #32]
}
 8006912:	bf00      	nop
 8006914:	371c      	adds	r7, #28
 8006916:	46bd      	mov	sp, r7
 8006918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691c:	4770      	bx	lr
 800691e:	bf00      	nop
 8006920:	40010000 	.word	0x40010000
 8006924:	40000400 	.word	0x40000400
 8006928:	40000800 	.word	0x40000800
 800692c:	40000c00 	.word	0x40000c00
 8006930:	40010400 	.word	0x40010400
 8006934:	40014000 	.word	0x40014000
 8006938:	40001800 	.word	0x40001800

0800693c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800693c:	b480      	push	{r7}
 800693e:	b087      	sub	sp, #28
 8006940:	af00      	add	r7, sp, #0
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	60b9      	str	r1, [r7, #8]
 8006946:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6a1b      	ldr	r3, [r3, #32]
 800694c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	6a1b      	ldr	r3, [r3, #32]
 8006952:	f023 0201 	bic.w	r2, r3, #1
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	699b      	ldr	r3, [r3, #24]
 800695e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006966:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	011b      	lsls	r3, r3, #4
 800696c:	693a      	ldr	r2, [r7, #16]
 800696e:	4313      	orrs	r3, r2
 8006970:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	f023 030a 	bic.w	r3, r3, #10
 8006978:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800697a:	697a      	ldr	r2, [r7, #20]
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	4313      	orrs	r3, r2
 8006980:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	693a      	ldr	r2, [r7, #16]
 8006986:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	697a      	ldr	r2, [r7, #20]
 800698c:	621a      	str	r2, [r3, #32]
}
 800698e:	bf00      	nop
 8006990:	371c      	adds	r7, #28
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr

0800699a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800699a:	b480      	push	{r7}
 800699c:	b087      	sub	sp, #28
 800699e:	af00      	add	r7, sp, #0
 80069a0:	60f8      	str	r0, [r7, #12]
 80069a2:	60b9      	str	r1, [r7, #8]
 80069a4:	607a      	str	r2, [r7, #4]
 80069a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	6a1b      	ldr	r3, [r3, #32]
 80069ac:	f023 0210 	bic.w	r2, r3, #16
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	699b      	ldr	r3, [r3, #24]
 80069b8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	6a1b      	ldr	r3, [r3, #32]
 80069be:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069c6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	021b      	lsls	r3, r3, #8
 80069cc:	697a      	ldr	r2, [r7, #20]
 80069ce:	4313      	orrs	r3, r2
 80069d0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80069d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	031b      	lsls	r3, r3, #12
 80069de:	b29b      	uxth	r3, r3
 80069e0:	697a      	ldr	r2, [r7, #20]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80069ec:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	011b      	lsls	r3, r3, #4
 80069f2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80069f6:	693a      	ldr	r2, [r7, #16]
 80069f8:	4313      	orrs	r3, r2
 80069fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	697a      	ldr	r2, [r7, #20]
 8006a00:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	693a      	ldr	r2, [r7, #16]
 8006a06:	621a      	str	r2, [r3, #32]
}
 8006a08:	bf00      	nop
 8006a0a:	371c      	adds	r7, #28
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b087      	sub	sp, #28
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	60f8      	str	r0, [r7, #12]
 8006a1c:	60b9      	str	r1, [r7, #8]
 8006a1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	6a1b      	ldr	r3, [r3, #32]
 8006a24:	f023 0210 	bic.w	r2, r3, #16
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	699b      	ldr	r3, [r3, #24]
 8006a30:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	6a1b      	ldr	r3, [r3, #32]
 8006a36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a3e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	031b      	lsls	r3, r3, #12
 8006a44:	697a      	ldr	r2, [r7, #20]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a50:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	011b      	lsls	r3, r3, #4
 8006a56:	693a      	ldr	r2, [r7, #16]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	697a      	ldr	r2, [r7, #20]
 8006a60:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	693a      	ldr	r2, [r7, #16]
 8006a66:	621a      	str	r2, [r3, #32]
}
 8006a68:	bf00      	nop
 8006a6a:	371c      	adds	r7, #28
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b087      	sub	sp, #28
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	60f8      	str	r0, [r7, #12]
 8006a7c:	60b9      	str	r1, [r7, #8]
 8006a7e:	607a      	str	r2, [r7, #4]
 8006a80:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6a1b      	ldr	r3, [r3, #32]
 8006a86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	69db      	ldr	r3, [r3, #28]
 8006a92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6a1b      	ldr	r3, [r3, #32]
 8006a98:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	f023 0303 	bic.w	r3, r3, #3
 8006aa0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006aa2:	697a      	ldr	r2, [r7, #20]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ab0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	011b      	lsls	r3, r3, #4
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	697a      	ldr	r2, [r7, #20]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006ac4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	021b      	lsls	r3, r3, #8
 8006aca:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006ace:	693a      	ldr	r2, [r7, #16]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	697a      	ldr	r2, [r7, #20]
 8006ad8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	693a      	ldr	r2, [r7, #16]
 8006ade:	621a      	str	r2, [r3, #32]
}
 8006ae0:	bf00      	nop
 8006ae2:	371c      	adds	r7, #28
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr

08006aec <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b087      	sub	sp, #28
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	607a      	str	r2, [r7, #4]
 8006af8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	6a1b      	ldr	r3, [r3, #32]
 8006afe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	69db      	ldr	r3, [r3, #28]
 8006b0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6a1b      	ldr	r3, [r3, #32]
 8006b10:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b18:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	021b      	lsls	r3, r3, #8
 8006b1e:	697a      	ldr	r2, [r7, #20]
 8006b20:	4313      	orrs	r3, r2
 8006b22:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b2a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	031b      	lsls	r3, r3, #12
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	697a      	ldr	r2, [r7, #20]
 8006b34:	4313      	orrs	r3, r2
 8006b36:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006b3e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	031b      	lsls	r3, r3, #12
 8006b44:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006b48:	693a      	ldr	r2, [r7, #16]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	697a      	ldr	r2, [r7, #20]
 8006b52:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	693a      	ldr	r2, [r7, #16]
 8006b58:	621a      	str	r2, [r3, #32]
}
 8006b5a:	bf00      	nop
 8006b5c:	371c      	adds	r7, #28
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr

08006b66 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b66:	b480      	push	{r7}
 8006b68:	b087      	sub	sp, #28
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	60f8      	str	r0, [r7, #12]
 8006b6e:	60b9      	str	r1, [r7, #8]
 8006b70:	607a      	str	r2, [r7, #4]
 8006b72:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b80:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	021a      	lsls	r2, r3, #8
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	431a      	orrs	r2, r3
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	697a      	ldr	r2, [r7, #20]
 8006b90:	4313      	orrs	r3, r2
 8006b92:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	697a      	ldr	r2, [r7, #20]
 8006b98:	609a      	str	r2, [r3, #8]
}
 8006b9a:	bf00      	nop
 8006b9c:	371c      	adds	r7, #28
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr

08006ba6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ba6:	b480      	push	{r7}
 8006ba8:	b087      	sub	sp, #28
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	60f8      	str	r0, [r7, #12]
 8006bae:	60b9      	str	r1, [r7, #8]
 8006bb0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	f003 031f 	and.w	r3, r3, #31
 8006bb8:	2201      	movs	r2, #1
 8006bba:	fa02 f303 	lsl.w	r3, r2, r3
 8006bbe:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6a1a      	ldr	r2, [r3, #32]
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	43db      	mvns	r3, r3
 8006bc8:	401a      	ands	r2, r3
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	6a1a      	ldr	r2, [r3, #32]
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	f003 031f 	and.w	r3, r3, #31
 8006bd8:	6879      	ldr	r1, [r7, #4]
 8006bda:	fa01 f303 	lsl.w	r3, r1, r3
 8006bde:	431a      	orrs	r2, r3
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	621a      	str	r2, [r3, #32]
}
 8006be4:	bf00      	nop
 8006be6:	371c      	adds	r7, #28
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr

08006bf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b085      	sub	sp, #20
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d101      	bne.n	8006c08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c04:	2302      	movs	r3, #2
 8006c06:	e05a      	b.n	8006cbe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2202      	movs	r2, #2
 8006c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	68fa      	ldr	r2, [r7, #12]
 8006c36:	4313      	orrs	r3, r2
 8006c38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	68fa      	ldr	r2, [r7, #12]
 8006c40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a21      	ldr	r2, [pc, #132]	; (8006ccc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d022      	beq.n	8006c92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c54:	d01d      	beq.n	8006c92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a1d      	ldr	r2, [pc, #116]	; (8006cd0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d018      	beq.n	8006c92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a1b      	ldr	r2, [pc, #108]	; (8006cd4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d013      	beq.n	8006c92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a1a      	ldr	r2, [pc, #104]	; (8006cd8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d00e      	beq.n	8006c92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a18      	ldr	r2, [pc, #96]	; (8006cdc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d009      	beq.n	8006c92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a17      	ldr	r2, [pc, #92]	; (8006ce0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d004      	beq.n	8006c92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a15      	ldr	r2, [pc, #84]	; (8006ce4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d10c      	bne.n	8006cac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	68ba      	ldr	r2, [r7, #8]
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	68ba      	ldr	r2, [r7, #8]
 8006caa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006cbc:	2300      	movs	r3, #0
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3714      	adds	r7, #20
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr
 8006cca:	bf00      	nop
 8006ccc:	40010000 	.word	0x40010000
 8006cd0:	40000400 	.word	0x40000400
 8006cd4:	40000800 	.word	0x40000800
 8006cd8:	40000c00 	.word	0x40000c00
 8006cdc:	40010400 	.word	0x40010400
 8006ce0:	40014000 	.word	0x40014000
 8006ce4:	40001800 	.word	0x40001800

08006ce8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d101      	bne.n	8006cfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e03f      	b.n	8006d7a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d106      	bne.n	8006d14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f7fc fb88 	bl	8003424 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2224      	movs	r2, #36	; 0x24
 8006d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	68da      	ldr	r2, [r3, #12]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f000 ff57 	bl	8007be0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	691a      	ldr	r2, [r3, #16]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	695a      	ldr	r2, [r3, #20]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	68da      	ldr	r2, [r3, #12]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2220      	movs	r2, #32
 8006d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2220      	movs	r2, #32
 8006d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3708      	adds	r7, #8
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
	...

08006d84 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b08c      	sub	sp, #48	; 0x30
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	60f8      	str	r0, [r7, #12]
 8006d8c:	60b9      	str	r1, [r7, #8]
 8006d8e:	4613      	mov	r3, r2
 8006d90:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d98:	b2db      	uxtb	r3, r3
 8006d9a:	2b20      	cmp	r3, #32
 8006d9c:	d165      	bne.n	8006e6a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d002      	beq.n	8006daa <HAL_UART_Transmit_DMA+0x26>
 8006da4:	88fb      	ldrh	r3, [r7, #6]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d101      	bne.n	8006dae <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	e05e      	b.n	8006e6c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d101      	bne.n	8006dbc <HAL_UART_Transmit_DMA+0x38>
 8006db8:	2302      	movs	r3, #2
 8006dba:	e057      	b.n	8006e6c <HAL_UART_Transmit_DMA+0xe8>
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006dc4:	68ba      	ldr	r2, [r7, #8]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	88fa      	ldrh	r2, [r7, #6]
 8006dce:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	88fa      	ldrh	r2, [r7, #6]
 8006dd4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2221      	movs	r2, #33	; 0x21
 8006de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006de8:	4a22      	ldr	r2, [pc, #136]	; (8006e74 <HAL_UART_Transmit_DMA+0xf0>)
 8006dea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006df0:	4a21      	ldr	r2, [pc, #132]	; (8006e78 <HAL_UART_Transmit_DMA+0xf4>)
 8006df2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006df8:	4a20      	ldr	r2, [pc, #128]	; (8006e7c <HAL_UART_Transmit_DMA+0xf8>)
 8006dfa:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e00:	2200      	movs	r2, #0
 8006e02:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006e04:	f107 0308 	add.w	r3, r7, #8
 8006e08:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e10:	6819      	ldr	r1, [r3, #0]
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	3304      	adds	r3, #4
 8006e18:	461a      	mov	r2, r3
 8006e1a:	88fb      	ldrh	r3, [r7, #6]
 8006e1c:	f7fc fefc 	bl	8003c18 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006e28:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	3314      	adds	r3, #20
 8006e38:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e3a:	69bb      	ldr	r3, [r7, #24]
 8006e3c:	e853 3f00 	ldrex	r3, [r3]
 8006e40:	617b      	str	r3, [r7, #20]
   return(result);
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e48:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	3314      	adds	r3, #20
 8006e50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e52:	627a      	str	r2, [r7, #36]	; 0x24
 8006e54:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e56:	6a39      	ldr	r1, [r7, #32]
 8006e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e5a:	e841 2300 	strex	r3, r2, [r1]
 8006e5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e60:	69fb      	ldr	r3, [r7, #28]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d1e5      	bne.n	8006e32 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8006e66:	2300      	movs	r3, #0
 8006e68:	e000      	b.n	8006e6c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8006e6a:	2302      	movs	r3, #2
  }
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3730      	adds	r7, #48	; 0x30
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}
 8006e74:	08007479 	.word	0x08007479
 8006e78:	08007513 	.word	0x08007513
 8006e7c:	0800768b 	.word	0x0800768b

08006e80 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b084      	sub	sp, #16
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	60f8      	str	r0, [r7, #12]
 8006e88:	60b9      	str	r1, [r7, #8]
 8006e8a:	4613      	mov	r3, r2
 8006e8c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	2b20      	cmp	r3, #32
 8006e98:	d11d      	bne.n	8006ed6 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d002      	beq.n	8006ea6 <HAL_UART_Receive_DMA+0x26>
 8006ea0:	88fb      	ldrh	r3, [r7, #6]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d101      	bne.n	8006eaa <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	e016      	b.n	8006ed8 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d101      	bne.n	8006eb8 <HAL_UART_Receive_DMA+0x38>
 8006eb4:	2302      	movs	r3, #2
 8006eb6:	e00f      	b.n	8006ed8 <HAL_UART_Receive_DMA+0x58>
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006ec6:	88fb      	ldrh	r3, [r7, #6]
 8006ec8:	461a      	mov	r2, r3
 8006eca:	68b9      	ldr	r1, [r7, #8]
 8006ecc:	68f8      	ldr	r0, [r7, #12]
 8006ece:	f000 fc27 	bl	8007720 <UART_Start_Receive_DMA>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	e000      	b.n	8006ed8 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006ed6:	2302      	movs	r3, #2
  }
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3710      	adds	r7, #16
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b0ba      	sub	sp, #232	; 0xe8
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	695b      	ldr	r3, [r3, #20]
 8006f02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006f06:	2300      	movs	r3, #0
 8006f08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006f12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f16:	f003 030f 	and.w	r3, r3, #15
 8006f1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006f1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d10f      	bne.n	8006f46 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f2a:	f003 0320 	and.w	r3, r3, #32
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d009      	beq.n	8006f46 <HAL_UART_IRQHandler+0x66>
 8006f32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f36:	f003 0320 	and.w	r3, r3, #32
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d003      	beq.n	8006f46 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f000 fd93 	bl	8007a6a <UART_Receive_IT>
      return;
 8006f44:	e256      	b.n	80073f4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006f46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	f000 80de 	beq.w	800710c <HAL_UART_IRQHandler+0x22c>
 8006f50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f54:	f003 0301 	and.w	r3, r3, #1
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d106      	bne.n	8006f6a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006f5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f60:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	f000 80d1 	beq.w	800710c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f6e:	f003 0301 	and.w	r3, r3, #1
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00b      	beq.n	8006f8e <HAL_UART_IRQHandler+0xae>
 8006f76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d005      	beq.n	8006f8e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f86:	f043 0201 	orr.w	r2, r3, #1
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f92:	f003 0304 	and.w	r3, r3, #4
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d00b      	beq.n	8006fb2 <HAL_UART_IRQHandler+0xd2>
 8006f9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f9e:	f003 0301 	and.w	r3, r3, #1
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d005      	beq.n	8006fb2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006faa:	f043 0202 	orr.w	r2, r3, #2
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006fb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fb6:	f003 0302 	and.w	r3, r3, #2
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d00b      	beq.n	8006fd6 <HAL_UART_IRQHandler+0xf6>
 8006fbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fc2:	f003 0301 	and.w	r3, r3, #1
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d005      	beq.n	8006fd6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fce:	f043 0204 	orr.w	r2, r3, #4
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fda:	f003 0308 	and.w	r3, r3, #8
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d011      	beq.n	8007006 <HAL_UART_IRQHandler+0x126>
 8006fe2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fe6:	f003 0320 	and.w	r3, r3, #32
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d105      	bne.n	8006ffa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006fee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ff2:	f003 0301 	and.w	r3, r3, #1
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d005      	beq.n	8007006 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ffe:	f043 0208 	orr.w	r2, r3, #8
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800700a:	2b00      	cmp	r3, #0
 800700c:	f000 81ed 	beq.w	80073ea <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007010:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007014:	f003 0320 	and.w	r3, r3, #32
 8007018:	2b00      	cmp	r3, #0
 800701a:	d008      	beq.n	800702e <HAL_UART_IRQHandler+0x14e>
 800701c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007020:	f003 0320 	and.w	r3, r3, #32
 8007024:	2b00      	cmp	r3, #0
 8007026:	d002      	beq.n	800702e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f000 fd1e 	bl	8007a6a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	695b      	ldr	r3, [r3, #20]
 8007034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007038:	2b40      	cmp	r3, #64	; 0x40
 800703a:	bf0c      	ite	eq
 800703c:	2301      	moveq	r3, #1
 800703e:	2300      	movne	r3, #0
 8007040:	b2db      	uxtb	r3, r3
 8007042:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800704a:	f003 0308 	and.w	r3, r3, #8
 800704e:	2b00      	cmp	r3, #0
 8007050:	d103      	bne.n	800705a <HAL_UART_IRQHandler+0x17a>
 8007052:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007056:	2b00      	cmp	r3, #0
 8007058:	d04f      	beq.n	80070fa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 fc26 	bl	80078ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	695b      	ldr	r3, [r3, #20]
 8007066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800706a:	2b40      	cmp	r3, #64	; 0x40
 800706c:	d141      	bne.n	80070f2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	3314      	adds	r3, #20
 8007074:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007078:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800707c:	e853 3f00 	ldrex	r3, [r3]
 8007080:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007084:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007088:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800708c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	3314      	adds	r3, #20
 8007096:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800709a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800709e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80070a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80070aa:	e841 2300 	strex	r3, r2, [r1]
 80070ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80070b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d1d9      	bne.n	800706e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d013      	beq.n	80070ea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070c6:	4a7d      	ldr	r2, [pc, #500]	; (80072bc <HAL_UART_IRQHandler+0x3dc>)
 80070c8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ce:	4618      	mov	r0, r3
 80070d0:	f7fc fe6a 	bl	8003da8 <HAL_DMA_Abort_IT>
 80070d4:	4603      	mov	r3, r0
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d016      	beq.n	8007108 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80070e4:	4610      	mov	r0, r2
 80070e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070e8:	e00e      	b.n	8007108 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 f9ae 	bl	800744c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070f0:	e00a      	b.n	8007108 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f000 f9aa 	bl	800744c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070f8:	e006      	b.n	8007108 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 f9a6 	bl	800744c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007106:	e170      	b.n	80073ea <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007108:	bf00      	nop
    return;
 800710a:	e16e      	b.n	80073ea <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007110:	2b01      	cmp	r3, #1
 8007112:	f040 814a 	bne.w	80073aa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800711a:	f003 0310 	and.w	r3, r3, #16
 800711e:	2b00      	cmp	r3, #0
 8007120:	f000 8143 	beq.w	80073aa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007128:	f003 0310 	and.w	r3, r3, #16
 800712c:	2b00      	cmp	r3, #0
 800712e:	f000 813c 	beq.w	80073aa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007132:	2300      	movs	r3, #0
 8007134:	60bb      	str	r3, [r7, #8]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	60bb      	str	r3, [r7, #8]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	60bb      	str	r3, [r7, #8]
 8007146:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	695b      	ldr	r3, [r3, #20]
 800714e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007152:	2b40      	cmp	r3, #64	; 0x40
 8007154:	f040 80b4 	bne.w	80072c0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007164:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007168:	2b00      	cmp	r3, #0
 800716a:	f000 8140 	beq.w	80073ee <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007172:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007176:	429a      	cmp	r2, r3
 8007178:	f080 8139 	bcs.w	80073ee <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007182:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007188:	69db      	ldr	r3, [r3, #28]
 800718a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800718e:	f000 8088 	beq.w	80072a2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	330c      	adds	r3, #12
 8007198:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800719c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80071a0:	e853 3f00 	ldrex	r3, [r3]
 80071a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80071a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80071ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	330c      	adds	r3, #12
 80071ba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80071be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80071c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80071ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80071ce:	e841 2300 	strex	r3, r2, [r1]
 80071d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80071d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d1d9      	bne.n	8007192 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	3314      	adds	r3, #20
 80071e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071e8:	e853 3f00 	ldrex	r3, [r3]
 80071ec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80071ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80071f0:	f023 0301 	bic.w	r3, r3, #1
 80071f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	3314      	adds	r3, #20
 80071fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007202:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007206:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007208:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800720a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800720e:	e841 2300 	strex	r3, r2, [r1]
 8007212:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007214:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007216:	2b00      	cmp	r3, #0
 8007218:	d1e1      	bne.n	80071de <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	3314      	adds	r3, #20
 8007220:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007222:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007224:	e853 3f00 	ldrex	r3, [r3]
 8007228:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800722a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800722c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007230:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	3314      	adds	r3, #20
 800723a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800723e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007240:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007242:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007244:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007246:	e841 2300 	strex	r3, r2, [r1]
 800724a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800724c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800724e:	2b00      	cmp	r3, #0
 8007250:	d1e3      	bne.n	800721a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2220      	movs	r2, #32
 8007256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	330c      	adds	r3, #12
 8007266:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007268:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800726a:	e853 3f00 	ldrex	r3, [r3]
 800726e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007270:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007272:	f023 0310 	bic.w	r3, r3, #16
 8007276:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	330c      	adds	r3, #12
 8007280:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007284:	65ba      	str	r2, [r7, #88]	; 0x58
 8007286:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007288:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800728a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800728c:	e841 2300 	strex	r3, r2, [r1]
 8007290:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007292:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007294:	2b00      	cmp	r3, #0
 8007296:	d1e3      	bne.n	8007260 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800729c:	4618      	mov	r0, r3
 800729e:	f7fc fd13 	bl	8003cc8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	1ad3      	subs	r3, r2, r3
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	4619      	mov	r1, r3
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 f8d4 	bl	8007460 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80072b8:	e099      	b.n	80073ee <HAL_UART_IRQHandler+0x50e>
 80072ba:	bf00      	nop
 80072bc:	08007973 	.word	0x08007973
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	1ad3      	subs	r3, r2, r3
 80072cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	f000 808b 	beq.w	80073f2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80072dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	f000 8086 	beq.w	80073f2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	330c      	adds	r3, #12
 80072ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f0:	e853 3f00 	ldrex	r3, [r3]
 80072f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80072f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80072fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	330c      	adds	r3, #12
 8007306:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800730a:	647a      	str	r2, [r7, #68]	; 0x44
 800730c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800730e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007310:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007312:	e841 2300 	strex	r3, r2, [r1]
 8007316:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800731a:	2b00      	cmp	r3, #0
 800731c:	d1e3      	bne.n	80072e6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	3314      	adds	r3, #20
 8007324:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007328:	e853 3f00 	ldrex	r3, [r3]
 800732c:	623b      	str	r3, [r7, #32]
   return(result);
 800732e:	6a3b      	ldr	r3, [r7, #32]
 8007330:	f023 0301 	bic.w	r3, r3, #1
 8007334:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	3314      	adds	r3, #20
 800733e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007342:	633a      	str	r2, [r7, #48]	; 0x30
 8007344:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007346:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800734a:	e841 2300 	strex	r3, r2, [r1]
 800734e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007352:	2b00      	cmp	r3, #0
 8007354:	d1e3      	bne.n	800731e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2220      	movs	r2, #32
 800735a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2200      	movs	r2, #0
 8007362:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	330c      	adds	r3, #12
 800736a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	e853 3f00 	ldrex	r3, [r3]
 8007372:	60fb      	str	r3, [r7, #12]
   return(result);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f023 0310 	bic.w	r3, r3, #16
 800737a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	330c      	adds	r3, #12
 8007384:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007388:	61fa      	str	r2, [r7, #28]
 800738a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800738c:	69b9      	ldr	r1, [r7, #24]
 800738e:	69fa      	ldr	r2, [r7, #28]
 8007390:	e841 2300 	strex	r3, r2, [r1]
 8007394:	617b      	str	r3, [r7, #20]
   return(result);
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d1e3      	bne.n	8007364 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800739c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80073a0:	4619      	mov	r1, r3
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 f85c 	bl	8007460 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80073a8:	e023      	b.n	80073f2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80073aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d009      	beq.n	80073ca <HAL_UART_IRQHandler+0x4ea>
 80073b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d003      	beq.n	80073ca <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 fae9 	bl	800799a <UART_Transmit_IT>
    return;
 80073c8:	e014      	b.n	80073f4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80073ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d00e      	beq.n	80073f4 <HAL_UART_IRQHandler+0x514>
 80073d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d008      	beq.n	80073f4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 fb29 	bl	8007a3a <UART_EndTransmit_IT>
    return;
 80073e8:	e004      	b.n	80073f4 <HAL_UART_IRQHandler+0x514>
    return;
 80073ea:	bf00      	nop
 80073ec:	e002      	b.n	80073f4 <HAL_UART_IRQHandler+0x514>
      return;
 80073ee:	bf00      	nop
 80073f0:	e000      	b.n	80073f4 <HAL_UART_IRQHandler+0x514>
      return;
 80073f2:	bf00      	nop
  }
}
 80073f4:	37e8      	adds	r7, #232	; 0xe8
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
 80073fa:	bf00      	nop

080073fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b083      	sub	sp, #12
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007404:	bf00      	nop
 8007406:	370c      	adds	r7, #12
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr

08007410 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007410:	b480      	push	{r7}
 8007412:	b083      	sub	sp, #12
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007418:	bf00      	nop
 800741a:	370c      	adds	r7, #12
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr

08007424 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007424:	b480      	push	{r7}
 8007426:	b083      	sub	sp, #12
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800742c:	bf00      	nop
 800742e:	370c      	adds	r7, #12
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr

08007438 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007438:	b480      	push	{r7}
 800743a:	b083      	sub	sp, #12
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007440:	bf00      	nop
 8007442:	370c      	adds	r7, #12
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr

0800744c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800744c:	b480      	push	{r7}
 800744e:	b083      	sub	sp, #12
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007454:	bf00      	nop
 8007456:	370c      	adds	r7, #12
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr

08007460 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007460:	b480      	push	{r7}
 8007462:	b083      	sub	sp, #12
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	460b      	mov	r3, r1
 800746a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800746c:	bf00      	nop
 800746e:	370c      	adds	r7, #12
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr

08007478 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b090      	sub	sp, #64	; 0x40
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007484:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007490:	2b00      	cmp	r3, #0
 8007492:	d137      	bne.n	8007504 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007496:	2200      	movs	r2, #0
 8007498:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800749a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	3314      	adds	r3, #20
 80074a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a4:	e853 3f00 	ldrex	r3, [r3]
 80074a8:	623b      	str	r3, [r7, #32]
   return(result);
 80074aa:	6a3b      	ldr	r3, [r7, #32]
 80074ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80074b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	3314      	adds	r3, #20
 80074b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074ba:	633a      	str	r2, [r7, #48]	; 0x30
 80074bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80074c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074c2:	e841 2300 	strex	r3, r2, [r1]
 80074c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80074c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d1e5      	bne.n	800749a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80074ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	330c      	adds	r3, #12
 80074d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	e853 3f00 	ldrex	r3, [r3]
 80074dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074e4:	637b      	str	r3, [r7, #52]	; 0x34
 80074e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	330c      	adds	r3, #12
 80074ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074ee:	61fa      	str	r2, [r7, #28]
 80074f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f2:	69b9      	ldr	r1, [r7, #24]
 80074f4:	69fa      	ldr	r2, [r7, #28]
 80074f6:	e841 2300 	strex	r3, r2, [r1]
 80074fa:	617b      	str	r3, [r7, #20]
   return(result);
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d1e5      	bne.n	80074ce <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007502:	e002      	b.n	800750a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007504:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007506:	f7ff ff79 	bl	80073fc <HAL_UART_TxCpltCallback>
}
 800750a:	bf00      	nop
 800750c:	3740      	adds	r7, #64	; 0x40
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}

08007512 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007512:	b580      	push	{r7, lr}
 8007514:	b084      	sub	sp, #16
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800751e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007520:	68f8      	ldr	r0, [r7, #12]
 8007522:	f7ff ff75 	bl	8007410 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007526:	bf00      	nop
 8007528:	3710      	adds	r7, #16
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}

0800752e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800752e:	b580      	push	{r7, lr}
 8007530:	b09c      	sub	sp, #112	; 0x70
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800753a:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007546:	2b00      	cmp	r3, #0
 8007548:	d172      	bne.n	8007630 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800754a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800754c:	2200      	movs	r2, #0
 800754e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007550:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	330c      	adds	r3, #12
 8007556:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800755a:	e853 3f00 	ldrex	r3, [r3]
 800755e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007560:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007562:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007566:	66bb      	str	r3, [r7, #104]	; 0x68
 8007568:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	330c      	adds	r3, #12
 800756e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007570:	65ba      	str	r2, [r7, #88]	; 0x58
 8007572:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007574:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007576:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007578:	e841 2300 	strex	r3, r2, [r1]
 800757c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800757e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007580:	2b00      	cmp	r3, #0
 8007582:	d1e5      	bne.n	8007550 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007584:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	3314      	adds	r3, #20
 800758a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800758c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800758e:	e853 3f00 	ldrex	r3, [r3]
 8007592:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007596:	f023 0301 	bic.w	r3, r3, #1
 800759a:	667b      	str	r3, [r7, #100]	; 0x64
 800759c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	3314      	adds	r3, #20
 80075a2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80075a4:	647a      	str	r2, [r7, #68]	; 0x44
 80075a6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80075aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075ac:	e841 2300 	strex	r3, r2, [r1]
 80075b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80075b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d1e5      	bne.n	8007584 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	3314      	adds	r3, #20
 80075be:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c2:	e853 3f00 	ldrex	r3, [r3]
 80075c6:	623b      	str	r3, [r7, #32]
   return(result);
 80075c8:	6a3b      	ldr	r3, [r7, #32]
 80075ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075ce:	663b      	str	r3, [r7, #96]	; 0x60
 80075d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	3314      	adds	r3, #20
 80075d6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80075d8:	633a      	str	r2, [r7, #48]	; 0x30
 80075da:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80075de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075e0:	e841 2300 	strex	r3, r2, [r1]
 80075e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80075e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d1e5      	bne.n	80075b8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80075ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075ee:	2220      	movs	r2, #32
 80075f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d119      	bne.n	8007630 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	330c      	adds	r3, #12
 8007602:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	e853 3f00 	ldrex	r3, [r3]
 800760a:	60fb      	str	r3, [r7, #12]
   return(result);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f023 0310 	bic.w	r3, r3, #16
 8007612:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007614:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	330c      	adds	r3, #12
 800761a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800761c:	61fa      	str	r2, [r7, #28]
 800761e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007620:	69b9      	ldr	r1, [r7, #24]
 8007622:	69fa      	ldr	r2, [r7, #28]
 8007624:	e841 2300 	strex	r3, r2, [r1]
 8007628:	617b      	str	r3, [r7, #20]
   return(result);
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d1e5      	bne.n	80075fc <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007630:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007634:	2b01      	cmp	r3, #1
 8007636:	d106      	bne.n	8007646 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007638:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800763a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800763c:	4619      	mov	r1, r3
 800763e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007640:	f7ff ff0e 	bl	8007460 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007644:	e002      	b.n	800764c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8007646:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007648:	f7ff feec 	bl	8007424 <HAL_UART_RxCpltCallback>
}
 800764c:	bf00      	nop
 800764e:	3770      	adds	r7, #112	; 0x70
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}

08007654 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b084      	sub	sp, #16
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007660:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007666:	2b01      	cmp	r3, #1
 8007668:	d108      	bne.n	800767c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800766e:	085b      	lsrs	r3, r3, #1
 8007670:	b29b      	uxth	r3, r3
 8007672:	4619      	mov	r1, r3
 8007674:	68f8      	ldr	r0, [r7, #12]
 8007676:	f7ff fef3 	bl	8007460 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800767a:	e002      	b.n	8007682 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800767c:	68f8      	ldr	r0, [r7, #12]
 800767e:	f7ff fedb 	bl	8007438 <HAL_UART_RxHalfCpltCallback>
}
 8007682:	bf00      	nop
 8007684:	3710      	adds	r7, #16
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}

0800768a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800768a:	b580      	push	{r7, lr}
 800768c:	b084      	sub	sp, #16
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007692:	2300      	movs	r3, #0
 8007694:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800769a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	695b      	ldr	r3, [r3, #20]
 80076a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076a6:	2b80      	cmp	r3, #128	; 0x80
 80076a8:	bf0c      	ite	eq
 80076aa:	2301      	moveq	r3, #1
 80076ac:	2300      	movne	r3, #0
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	2b21      	cmp	r3, #33	; 0x21
 80076bc:	d108      	bne.n	80076d0 <UART_DMAError+0x46>
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d005      	beq.n	80076d0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	2200      	movs	r2, #0
 80076c8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80076ca:	68b8      	ldr	r0, [r7, #8]
 80076cc:	f000 f8c6 	bl	800785c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	695b      	ldr	r3, [r3, #20]
 80076d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076da:	2b40      	cmp	r3, #64	; 0x40
 80076dc:	bf0c      	ite	eq
 80076de:	2301      	moveq	r3, #1
 80076e0:	2300      	movne	r3, #0
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80076ec:	b2db      	uxtb	r3, r3
 80076ee:	2b22      	cmp	r3, #34	; 0x22
 80076f0:	d108      	bne.n	8007704 <UART_DMAError+0x7a>
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d005      	beq.n	8007704 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	2200      	movs	r2, #0
 80076fc:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80076fe:	68b8      	ldr	r0, [r7, #8]
 8007700:	f000 f8d4 	bl	80078ac <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007708:	f043 0210 	orr.w	r2, r3, #16
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007710:	68b8      	ldr	r0, [r7, #8]
 8007712:	f7ff fe9b 	bl	800744c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007716:	bf00      	nop
 8007718:	3710      	adds	r7, #16
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
	...

08007720 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b098      	sub	sp, #96	; 0x60
 8007724:	af00      	add	r7, sp, #0
 8007726:	60f8      	str	r0, [r7, #12]
 8007728:	60b9      	str	r1, [r7, #8]
 800772a:	4613      	mov	r3, r2
 800772c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800772e:	68ba      	ldr	r2, [r7, #8]
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	88fa      	ldrh	r2, [r7, #6]
 8007738:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2200      	movs	r2, #0
 800773e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2222      	movs	r2, #34	; 0x22
 8007744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800774c:	4a40      	ldr	r2, [pc, #256]	; (8007850 <UART_Start_Receive_DMA+0x130>)
 800774e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007754:	4a3f      	ldr	r2, [pc, #252]	; (8007854 <UART_Start_Receive_DMA+0x134>)
 8007756:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800775c:	4a3e      	ldr	r2, [pc, #248]	; (8007858 <UART_Start_Receive_DMA+0x138>)
 800775e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007764:	2200      	movs	r2, #0
 8007766:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007768:	f107 0308 	add.w	r3, r7, #8
 800776c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	3304      	adds	r3, #4
 8007778:	4619      	mov	r1, r3
 800777a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800777c:	681a      	ldr	r2, [r3, #0]
 800777e:	88fb      	ldrh	r3, [r7, #6]
 8007780:	f7fc fa4a 	bl	8003c18 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007784:	2300      	movs	r3, #0
 8007786:	613b      	str	r3, [r7, #16]
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	613b      	str	r3, [r7, #16]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	613b      	str	r3, [r7, #16]
 8007798:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2200      	movs	r2, #0
 800779e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	691b      	ldr	r3, [r3, #16]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d019      	beq.n	80077de <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	330c      	adds	r3, #12
 80077b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077b4:	e853 3f00 	ldrex	r3, [r3]
 80077b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80077ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	330c      	adds	r3, #12
 80077c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80077ca:	64fa      	str	r2, [r7, #76]	; 0x4c
 80077cc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ce:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80077d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80077d2:	e841 2300 	strex	r3, r2, [r1]
 80077d6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80077d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d1e5      	bne.n	80077aa <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	3314      	adds	r3, #20
 80077e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e8:	e853 3f00 	ldrex	r3, [r3]
 80077ec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80077ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f0:	f043 0301 	orr.w	r3, r3, #1
 80077f4:	657b      	str	r3, [r7, #84]	; 0x54
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	3314      	adds	r3, #20
 80077fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80077fe:	63ba      	str	r2, [r7, #56]	; 0x38
 8007800:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007802:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007804:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007806:	e841 2300 	strex	r3, r2, [r1]
 800780a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800780c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800780e:	2b00      	cmp	r3, #0
 8007810:	d1e5      	bne.n	80077de <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	3314      	adds	r3, #20
 8007818:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800781a:	69bb      	ldr	r3, [r7, #24]
 800781c:	e853 3f00 	ldrex	r3, [r3]
 8007820:	617b      	str	r3, [r7, #20]
   return(result);
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007828:	653b      	str	r3, [r7, #80]	; 0x50
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	3314      	adds	r3, #20
 8007830:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007832:	627a      	str	r2, [r7, #36]	; 0x24
 8007834:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007836:	6a39      	ldr	r1, [r7, #32]
 8007838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800783a:	e841 2300 	strex	r3, r2, [r1]
 800783e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007840:	69fb      	ldr	r3, [r7, #28]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d1e5      	bne.n	8007812 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8007846:	2300      	movs	r3, #0
}
 8007848:	4618      	mov	r0, r3
 800784a:	3760      	adds	r7, #96	; 0x60
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}
 8007850:	0800752f 	.word	0x0800752f
 8007854:	08007655 	.word	0x08007655
 8007858:	0800768b 	.word	0x0800768b

0800785c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800785c:	b480      	push	{r7}
 800785e:	b089      	sub	sp, #36	; 0x24
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	330c      	adds	r3, #12
 800786a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	e853 3f00 	ldrex	r3, [r3]
 8007872:	60bb      	str	r3, [r7, #8]
   return(result);
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800787a:	61fb      	str	r3, [r7, #28]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	330c      	adds	r3, #12
 8007882:	69fa      	ldr	r2, [r7, #28]
 8007884:	61ba      	str	r2, [r7, #24]
 8007886:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007888:	6979      	ldr	r1, [r7, #20]
 800788a:	69ba      	ldr	r2, [r7, #24]
 800788c:	e841 2300 	strex	r3, r2, [r1]
 8007890:	613b      	str	r3, [r7, #16]
   return(result);
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d1e5      	bne.n	8007864 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2220      	movs	r2, #32
 800789c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80078a0:	bf00      	nop
 80078a2:	3724      	adds	r7, #36	; 0x24
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr

080078ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b095      	sub	sp, #84	; 0x54
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	330c      	adds	r3, #12
 80078ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078be:	e853 3f00 	ldrex	r3, [r3]
 80078c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80078c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80078ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	330c      	adds	r3, #12
 80078d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80078d4:	643a      	str	r2, [r7, #64]	; 0x40
 80078d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80078da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80078dc:	e841 2300 	strex	r3, r2, [r1]
 80078e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80078e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d1e5      	bne.n	80078b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	3314      	adds	r3, #20
 80078ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f0:	6a3b      	ldr	r3, [r7, #32]
 80078f2:	e853 3f00 	ldrex	r3, [r3]
 80078f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	f023 0301 	bic.w	r3, r3, #1
 80078fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	3314      	adds	r3, #20
 8007906:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007908:	62fa      	str	r2, [r7, #44]	; 0x2c
 800790a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800790c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800790e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007910:	e841 2300 	strex	r3, r2, [r1]
 8007914:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007918:	2b00      	cmp	r3, #0
 800791a:	d1e5      	bne.n	80078e8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007920:	2b01      	cmp	r3, #1
 8007922:	d119      	bne.n	8007958 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	330c      	adds	r3, #12
 800792a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	e853 3f00 	ldrex	r3, [r3]
 8007932:	60bb      	str	r3, [r7, #8]
   return(result);
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	f023 0310 	bic.w	r3, r3, #16
 800793a:	647b      	str	r3, [r7, #68]	; 0x44
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	330c      	adds	r3, #12
 8007942:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007944:	61ba      	str	r2, [r7, #24]
 8007946:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007948:	6979      	ldr	r1, [r7, #20]
 800794a:	69ba      	ldr	r2, [r7, #24]
 800794c:	e841 2300 	strex	r3, r2, [r1]
 8007950:	613b      	str	r3, [r7, #16]
   return(result);
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d1e5      	bne.n	8007924 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2220      	movs	r2, #32
 800795c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2200      	movs	r2, #0
 8007964:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007966:	bf00      	nop
 8007968:	3754      	adds	r7, #84	; 0x54
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr

08007972 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007972:	b580      	push	{r7, lr}
 8007974:	b084      	sub	sp, #16
 8007976:	af00      	add	r7, sp, #0
 8007978:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800797e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2200      	movs	r2, #0
 8007984:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2200      	movs	r2, #0
 800798a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800798c:	68f8      	ldr	r0, [r7, #12]
 800798e:	f7ff fd5d 	bl	800744c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007992:	bf00      	nop
 8007994:	3710      	adds	r7, #16
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}

0800799a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800799a:	b480      	push	{r7}
 800799c:	b085      	sub	sp, #20
 800799e:	af00      	add	r7, sp, #0
 80079a0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	2b21      	cmp	r3, #33	; 0x21
 80079ac:	d13e      	bne.n	8007a2c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	689b      	ldr	r3, [r3, #8]
 80079b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079b6:	d114      	bne.n	80079e2 <UART_Transmit_IT+0x48>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	691b      	ldr	r3, [r3, #16]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d110      	bne.n	80079e2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6a1b      	ldr	r3, [r3, #32]
 80079c4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	881b      	ldrh	r3, [r3, #0]
 80079ca:	461a      	mov	r2, r3
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80079d4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6a1b      	ldr	r3, [r3, #32]
 80079da:	1c9a      	adds	r2, r3, #2
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	621a      	str	r2, [r3, #32]
 80079e0:	e008      	b.n	80079f4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6a1b      	ldr	r3, [r3, #32]
 80079e6:	1c59      	adds	r1, r3, #1
 80079e8:	687a      	ldr	r2, [r7, #4]
 80079ea:	6211      	str	r1, [r2, #32]
 80079ec:	781a      	ldrb	r2, [r3, #0]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	3b01      	subs	r3, #1
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	4619      	mov	r1, r3
 8007a02:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d10f      	bne.n	8007a28 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	68da      	ldr	r2, [r3, #12]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a16:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	68da      	ldr	r2, [r3, #12]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a26:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	e000      	b.n	8007a2e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007a2c:	2302      	movs	r3, #2
  }
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3714      	adds	r7, #20
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr

08007a3a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007a3a:	b580      	push	{r7, lr}
 8007a3c:	b082      	sub	sp, #8
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	68da      	ldr	r2, [r3, #12]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a50:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2220      	movs	r2, #32
 8007a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f7ff fcce 	bl	80073fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007a60:	2300      	movs	r3, #0
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3708      	adds	r7, #8
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}

08007a6a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007a6a:	b580      	push	{r7, lr}
 8007a6c:	b08c      	sub	sp, #48	; 0x30
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	2b22      	cmp	r3, #34	; 0x22
 8007a7c:	f040 80ab 	bne.w	8007bd6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	689b      	ldr	r3, [r3, #8]
 8007a84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a88:	d117      	bne.n	8007aba <UART_Receive_IT+0x50>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	691b      	ldr	r3, [r3, #16]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d113      	bne.n	8007aba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007a92:	2300      	movs	r3, #0
 8007a94:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a9a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007aa8:	b29a      	uxth	r2, r3
 8007aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ab2:	1c9a      	adds	r2, r3, #2
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	629a      	str	r2, [r3, #40]	; 0x28
 8007ab8:	e026      	b.n	8007b08 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007abe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	689b      	ldr	r3, [r3, #8]
 8007ac8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007acc:	d007      	beq.n	8007ade <UART_Receive_IT+0x74>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	689b      	ldr	r3, [r3, #8]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d10a      	bne.n	8007aec <UART_Receive_IT+0x82>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	691b      	ldr	r3, [r3, #16]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d106      	bne.n	8007aec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	b2da      	uxtb	r2, r3
 8007ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae8:	701a      	strb	r2, [r3, #0]
 8007aea:	e008      	b.n	8007afe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007af8:	b2da      	uxtb	r2, r3
 8007afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007afc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b02:	1c5a      	adds	r2, r3, #1
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	3b01      	subs	r3, #1
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	4619      	mov	r1, r3
 8007b16:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d15a      	bne.n	8007bd2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	68da      	ldr	r2, [r3, #12]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f022 0220 	bic.w	r2, r2, #32
 8007b2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	68da      	ldr	r2, [r3, #12]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007b3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	695a      	ldr	r2, [r3, #20]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f022 0201 	bic.w	r2, r2, #1
 8007b4a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2220      	movs	r2, #32
 8007b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d135      	bne.n	8007bc8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	330c      	adds	r3, #12
 8007b68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	e853 3f00 	ldrex	r3, [r3]
 8007b70:	613b      	str	r3, [r7, #16]
   return(result);
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	f023 0310 	bic.w	r3, r3, #16
 8007b78:	627b      	str	r3, [r7, #36]	; 0x24
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	330c      	adds	r3, #12
 8007b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b82:	623a      	str	r2, [r7, #32]
 8007b84:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b86:	69f9      	ldr	r1, [r7, #28]
 8007b88:	6a3a      	ldr	r2, [r7, #32]
 8007b8a:	e841 2300 	strex	r3, r2, [r1]
 8007b8e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b90:	69bb      	ldr	r3, [r7, #24]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d1e5      	bne.n	8007b62 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f003 0310 	and.w	r3, r3, #16
 8007ba0:	2b10      	cmp	r3, #16
 8007ba2:	d10a      	bne.n	8007bba <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	60fb      	str	r3, [r7, #12]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	60fb      	str	r3, [r7, #12]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	60fb      	str	r3, [r7, #12]
 8007bb8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007bbe:	4619      	mov	r1, r3
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f7ff fc4d 	bl	8007460 <HAL_UARTEx_RxEventCallback>
 8007bc6:	e002      	b.n	8007bce <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f7ff fc2b 	bl	8007424 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	e002      	b.n	8007bd8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	e000      	b.n	8007bd8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007bd6:	2302      	movs	r3, #2
  }
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3730      	adds	r7, #48	; 0x30
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007be0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007be4:	b0c0      	sub	sp, #256	; 0x100
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	691b      	ldr	r3, [r3, #16]
 8007bf4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bfc:	68d9      	ldr	r1, [r3, #12]
 8007bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c02:	681a      	ldr	r2, [r3, #0]
 8007c04:	ea40 0301 	orr.w	r3, r0, r1
 8007c08:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c0e:	689a      	ldr	r2, [r3, #8]
 8007c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c14:	691b      	ldr	r3, [r3, #16]
 8007c16:	431a      	orrs	r2, r3
 8007c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c1c:	695b      	ldr	r3, [r3, #20]
 8007c1e:	431a      	orrs	r2, r3
 8007c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c24:	69db      	ldr	r3, [r3, #28]
 8007c26:	4313      	orrs	r3, r2
 8007c28:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	68db      	ldr	r3, [r3, #12]
 8007c34:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007c38:	f021 010c 	bic.w	r1, r1, #12
 8007c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c40:	681a      	ldr	r2, [r3, #0]
 8007c42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007c46:	430b      	orrs	r3, r1
 8007c48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	695b      	ldr	r3, [r3, #20]
 8007c52:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c5a:	6999      	ldr	r1, [r3, #24]
 8007c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c60:	681a      	ldr	r2, [r3, #0]
 8007c62:	ea40 0301 	orr.w	r3, r0, r1
 8007c66:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c6c:	681a      	ldr	r2, [r3, #0]
 8007c6e:	4b8f      	ldr	r3, [pc, #572]	; (8007eac <UART_SetConfig+0x2cc>)
 8007c70:	429a      	cmp	r2, r3
 8007c72:	d005      	beq.n	8007c80 <UART_SetConfig+0xa0>
 8007c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	4b8d      	ldr	r3, [pc, #564]	; (8007eb0 <UART_SetConfig+0x2d0>)
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d104      	bne.n	8007c8a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007c80:	f7fd fa9c 	bl	80051bc <HAL_RCC_GetPCLK2Freq>
 8007c84:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007c88:	e003      	b.n	8007c92 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007c8a:	f7fd fa83 	bl	8005194 <HAL_RCC_GetPCLK1Freq>
 8007c8e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c96:	69db      	ldr	r3, [r3, #28]
 8007c98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c9c:	f040 810c 	bne.w	8007eb8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007ca0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007caa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007cae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007cb2:	4622      	mov	r2, r4
 8007cb4:	462b      	mov	r3, r5
 8007cb6:	1891      	adds	r1, r2, r2
 8007cb8:	65b9      	str	r1, [r7, #88]	; 0x58
 8007cba:	415b      	adcs	r3, r3
 8007cbc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007cbe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007cc2:	4621      	mov	r1, r4
 8007cc4:	eb12 0801 	adds.w	r8, r2, r1
 8007cc8:	4629      	mov	r1, r5
 8007cca:	eb43 0901 	adc.w	r9, r3, r1
 8007cce:	f04f 0200 	mov.w	r2, #0
 8007cd2:	f04f 0300 	mov.w	r3, #0
 8007cd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007cda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007cde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007ce2:	4690      	mov	r8, r2
 8007ce4:	4699      	mov	r9, r3
 8007ce6:	4623      	mov	r3, r4
 8007ce8:	eb18 0303 	adds.w	r3, r8, r3
 8007cec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007cf0:	462b      	mov	r3, r5
 8007cf2:	eb49 0303 	adc.w	r3, r9, r3
 8007cf6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	2200      	movs	r2, #0
 8007d02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007d06:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007d0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007d0e:	460b      	mov	r3, r1
 8007d10:	18db      	adds	r3, r3, r3
 8007d12:	653b      	str	r3, [r7, #80]	; 0x50
 8007d14:	4613      	mov	r3, r2
 8007d16:	eb42 0303 	adc.w	r3, r2, r3
 8007d1a:	657b      	str	r3, [r7, #84]	; 0x54
 8007d1c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007d20:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007d24:	f7f8 fa58 	bl	80001d8 <__aeabi_uldivmod>
 8007d28:	4602      	mov	r2, r0
 8007d2a:	460b      	mov	r3, r1
 8007d2c:	4b61      	ldr	r3, [pc, #388]	; (8007eb4 <UART_SetConfig+0x2d4>)
 8007d2e:	fba3 2302 	umull	r2, r3, r3, r2
 8007d32:	095b      	lsrs	r3, r3, #5
 8007d34:	011c      	lsls	r4, r3, #4
 8007d36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007d40:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007d44:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007d48:	4642      	mov	r2, r8
 8007d4a:	464b      	mov	r3, r9
 8007d4c:	1891      	adds	r1, r2, r2
 8007d4e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007d50:	415b      	adcs	r3, r3
 8007d52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d54:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007d58:	4641      	mov	r1, r8
 8007d5a:	eb12 0a01 	adds.w	sl, r2, r1
 8007d5e:	4649      	mov	r1, r9
 8007d60:	eb43 0b01 	adc.w	fp, r3, r1
 8007d64:	f04f 0200 	mov.w	r2, #0
 8007d68:	f04f 0300 	mov.w	r3, #0
 8007d6c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007d70:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007d74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007d78:	4692      	mov	sl, r2
 8007d7a:	469b      	mov	fp, r3
 8007d7c:	4643      	mov	r3, r8
 8007d7e:	eb1a 0303 	adds.w	r3, sl, r3
 8007d82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007d86:	464b      	mov	r3, r9
 8007d88:	eb4b 0303 	adc.w	r3, fp, r3
 8007d8c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	2200      	movs	r2, #0
 8007d98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007d9c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007da0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007da4:	460b      	mov	r3, r1
 8007da6:	18db      	adds	r3, r3, r3
 8007da8:	643b      	str	r3, [r7, #64]	; 0x40
 8007daa:	4613      	mov	r3, r2
 8007dac:	eb42 0303 	adc.w	r3, r2, r3
 8007db0:	647b      	str	r3, [r7, #68]	; 0x44
 8007db2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007db6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007dba:	f7f8 fa0d 	bl	80001d8 <__aeabi_uldivmod>
 8007dbe:	4602      	mov	r2, r0
 8007dc0:	460b      	mov	r3, r1
 8007dc2:	4611      	mov	r1, r2
 8007dc4:	4b3b      	ldr	r3, [pc, #236]	; (8007eb4 <UART_SetConfig+0x2d4>)
 8007dc6:	fba3 2301 	umull	r2, r3, r3, r1
 8007dca:	095b      	lsrs	r3, r3, #5
 8007dcc:	2264      	movs	r2, #100	; 0x64
 8007dce:	fb02 f303 	mul.w	r3, r2, r3
 8007dd2:	1acb      	subs	r3, r1, r3
 8007dd4:	00db      	lsls	r3, r3, #3
 8007dd6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007dda:	4b36      	ldr	r3, [pc, #216]	; (8007eb4 <UART_SetConfig+0x2d4>)
 8007ddc:	fba3 2302 	umull	r2, r3, r3, r2
 8007de0:	095b      	lsrs	r3, r3, #5
 8007de2:	005b      	lsls	r3, r3, #1
 8007de4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007de8:	441c      	add	r4, r3
 8007dea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007dee:	2200      	movs	r2, #0
 8007df0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007df4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007df8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007dfc:	4642      	mov	r2, r8
 8007dfe:	464b      	mov	r3, r9
 8007e00:	1891      	adds	r1, r2, r2
 8007e02:	63b9      	str	r1, [r7, #56]	; 0x38
 8007e04:	415b      	adcs	r3, r3
 8007e06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007e0c:	4641      	mov	r1, r8
 8007e0e:	1851      	adds	r1, r2, r1
 8007e10:	6339      	str	r1, [r7, #48]	; 0x30
 8007e12:	4649      	mov	r1, r9
 8007e14:	414b      	adcs	r3, r1
 8007e16:	637b      	str	r3, [r7, #52]	; 0x34
 8007e18:	f04f 0200 	mov.w	r2, #0
 8007e1c:	f04f 0300 	mov.w	r3, #0
 8007e20:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007e24:	4659      	mov	r1, fp
 8007e26:	00cb      	lsls	r3, r1, #3
 8007e28:	4651      	mov	r1, sl
 8007e2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e2e:	4651      	mov	r1, sl
 8007e30:	00ca      	lsls	r2, r1, #3
 8007e32:	4610      	mov	r0, r2
 8007e34:	4619      	mov	r1, r3
 8007e36:	4603      	mov	r3, r0
 8007e38:	4642      	mov	r2, r8
 8007e3a:	189b      	adds	r3, r3, r2
 8007e3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007e40:	464b      	mov	r3, r9
 8007e42:	460a      	mov	r2, r1
 8007e44:	eb42 0303 	adc.w	r3, r2, r3
 8007e48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	2200      	movs	r2, #0
 8007e54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007e58:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007e5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007e60:	460b      	mov	r3, r1
 8007e62:	18db      	adds	r3, r3, r3
 8007e64:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e66:	4613      	mov	r3, r2
 8007e68:	eb42 0303 	adc.w	r3, r2, r3
 8007e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007e72:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007e76:	f7f8 f9af 	bl	80001d8 <__aeabi_uldivmod>
 8007e7a:	4602      	mov	r2, r0
 8007e7c:	460b      	mov	r3, r1
 8007e7e:	4b0d      	ldr	r3, [pc, #52]	; (8007eb4 <UART_SetConfig+0x2d4>)
 8007e80:	fba3 1302 	umull	r1, r3, r3, r2
 8007e84:	095b      	lsrs	r3, r3, #5
 8007e86:	2164      	movs	r1, #100	; 0x64
 8007e88:	fb01 f303 	mul.w	r3, r1, r3
 8007e8c:	1ad3      	subs	r3, r2, r3
 8007e8e:	00db      	lsls	r3, r3, #3
 8007e90:	3332      	adds	r3, #50	; 0x32
 8007e92:	4a08      	ldr	r2, [pc, #32]	; (8007eb4 <UART_SetConfig+0x2d4>)
 8007e94:	fba2 2303 	umull	r2, r3, r2, r3
 8007e98:	095b      	lsrs	r3, r3, #5
 8007e9a:	f003 0207 	and.w	r2, r3, #7
 8007e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4422      	add	r2, r4
 8007ea6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007ea8:	e105      	b.n	80080b6 <UART_SetConfig+0x4d6>
 8007eaa:	bf00      	nop
 8007eac:	40011000 	.word	0x40011000
 8007eb0:	40011400 	.word	0x40011400
 8007eb4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007eb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007ec2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007ec6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007eca:	4642      	mov	r2, r8
 8007ecc:	464b      	mov	r3, r9
 8007ece:	1891      	adds	r1, r2, r2
 8007ed0:	6239      	str	r1, [r7, #32]
 8007ed2:	415b      	adcs	r3, r3
 8007ed4:	627b      	str	r3, [r7, #36]	; 0x24
 8007ed6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007eda:	4641      	mov	r1, r8
 8007edc:	1854      	adds	r4, r2, r1
 8007ede:	4649      	mov	r1, r9
 8007ee0:	eb43 0501 	adc.w	r5, r3, r1
 8007ee4:	f04f 0200 	mov.w	r2, #0
 8007ee8:	f04f 0300 	mov.w	r3, #0
 8007eec:	00eb      	lsls	r3, r5, #3
 8007eee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007ef2:	00e2      	lsls	r2, r4, #3
 8007ef4:	4614      	mov	r4, r2
 8007ef6:	461d      	mov	r5, r3
 8007ef8:	4643      	mov	r3, r8
 8007efa:	18e3      	adds	r3, r4, r3
 8007efc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007f00:	464b      	mov	r3, r9
 8007f02:	eb45 0303 	adc.w	r3, r5, r3
 8007f06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007f0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007f16:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007f1a:	f04f 0200 	mov.w	r2, #0
 8007f1e:	f04f 0300 	mov.w	r3, #0
 8007f22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007f26:	4629      	mov	r1, r5
 8007f28:	008b      	lsls	r3, r1, #2
 8007f2a:	4621      	mov	r1, r4
 8007f2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f30:	4621      	mov	r1, r4
 8007f32:	008a      	lsls	r2, r1, #2
 8007f34:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007f38:	f7f8 f94e 	bl	80001d8 <__aeabi_uldivmod>
 8007f3c:	4602      	mov	r2, r0
 8007f3e:	460b      	mov	r3, r1
 8007f40:	4b60      	ldr	r3, [pc, #384]	; (80080c4 <UART_SetConfig+0x4e4>)
 8007f42:	fba3 2302 	umull	r2, r3, r3, r2
 8007f46:	095b      	lsrs	r3, r3, #5
 8007f48:	011c      	lsls	r4, r3, #4
 8007f4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f4e:	2200      	movs	r2, #0
 8007f50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007f54:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007f58:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007f5c:	4642      	mov	r2, r8
 8007f5e:	464b      	mov	r3, r9
 8007f60:	1891      	adds	r1, r2, r2
 8007f62:	61b9      	str	r1, [r7, #24]
 8007f64:	415b      	adcs	r3, r3
 8007f66:	61fb      	str	r3, [r7, #28]
 8007f68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f6c:	4641      	mov	r1, r8
 8007f6e:	1851      	adds	r1, r2, r1
 8007f70:	6139      	str	r1, [r7, #16]
 8007f72:	4649      	mov	r1, r9
 8007f74:	414b      	adcs	r3, r1
 8007f76:	617b      	str	r3, [r7, #20]
 8007f78:	f04f 0200 	mov.w	r2, #0
 8007f7c:	f04f 0300 	mov.w	r3, #0
 8007f80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007f84:	4659      	mov	r1, fp
 8007f86:	00cb      	lsls	r3, r1, #3
 8007f88:	4651      	mov	r1, sl
 8007f8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f8e:	4651      	mov	r1, sl
 8007f90:	00ca      	lsls	r2, r1, #3
 8007f92:	4610      	mov	r0, r2
 8007f94:	4619      	mov	r1, r3
 8007f96:	4603      	mov	r3, r0
 8007f98:	4642      	mov	r2, r8
 8007f9a:	189b      	adds	r3, r3, r2
 8007f9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007fa0:	464b      	mov	r3, r9
 8007fa2:	460a      	mov	r2, r1
 8007fa4:	eb42 0303 	adc.w	r3, r2, r3
 8007fa8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	67bb      	str	r3, [r7, #120]	; 0x78
 8007fb6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007fb8:	f04f 0200 	mov.w	r2, #0
 8007fbc:	f04f 0300 	mov.w	r3, #0
 8007fc0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007fc4:	4649      	mov	r1, r9
 8007fc6:	008b      	lsls	r3, r1, #2
 8007fc8:	4641      	mov	r1, r8
 8007fca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007fce:	4641      	mov	r1, r8
 8007fd0:	008a      	lsls	r2, r1, #2
 8007fd2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007fd6:	f7f8 f8ff 	bl	80001d8 <__aeabi_uldivmod>
 8007fda:	4602      	mov	r2, r0
 8007fdc:	460b      	mov	r3, r1
 8007fde:	4b39      	ldr	r3, [pc, #228]	; (80080c4 <UART_SetConfig+0x4e4>)
 8007fe0:	fba3 1302 	umull	r1, r3, r3, r2
 8007fe4:	095b      	lsrs	r3, r3, #5
 8007fe6:	2164      	movs	r1, #100	; 0x64
 8007fe8:	fb01 f303 	mul.w	r3, r1, r3
 8007fec:	1ad3      	subs	r3, r2, r3
 8007fee:	011b      	lsls	r3, r3, #4
 8007ff0:	3332      	adds	r3, #50	; 0x32
 8007ff2:	4a34      	ldr	r2, [pc, #208]	; (80080c4 <UART_SetConfig+0x4e4>)
 8007ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ff8:	095b      	lsrs	r3, r3, #5
 8007ffa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ffe:	441c      	add	r4, r3
 8008000:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008004:	2200      	movs	r2, #0
 8008006:	673b      	str	r3, [r7, #112]	; 0x70
 8008008:	677a      	str	r2, [r7, #116]	; 0x74
 800800a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800800e:	4642      	mov	r2, r8
 8008010:	464b      	mov	r3, r9
 8008012:	1891      	adds	r1, r2, r2
 8008014:	60b9      	str	r1, [r7, #8]
 8008016:	415b      	adcs	r3, r3
 8008018:	60fb      	str	r3, [r7, #12]
 800801a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800801e:	4641      	mov	r1, r8
 8008020:	1851      	adds	r1, r2, r1
 8008022:	6039      	str	r1, [r7, #0]
 8008024:	4649      	mov	r1, r9
 8008026:	414b      	adcs	r3, r1
 8008028:	607b      	str	r3, [r7, #4]
 800802a:	f04f 0200 	mov.w	r2, #0
 800802e:	f04f 0300 	mov.w	r3, #0
 8008032:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008036:	4659      	mov	r1, fp
 8008038:	00cb      	lsls	r3, r1, #3
 800803a:	4651      	mov	r1, sl
 800803c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008040:	4651      	mov	r1, sl
 8008042:	00ca      	lsls	r2, r1, #3
 8008044:	4610      	mov	r0, r2
 8008046:	4619      	mov	r1, r3
 8008048:	4603      	mov	r3, r0
 800804a:	4642      	mov	r2, r8
 800804c:	189b      	adds	r3, r3, r2
 800804e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008050:	464b      	mov	r3, r9
 8008052:	460a      	mov	r2, r1
 8008054:	eb42 0303 	adc.w	r3, r2, r3
 8008058:	66fb      	str	r3, [r7, #108]	; 0x6c
 800805a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	2200      	movs	r2, #0
 8008062:	663b      	str	r3, [r7, #96]	; 0x60
 8008064:	667a      	str	r2, [r7, #100]	; 0x64
 8008066:	f04f 0200 	mov.w	r2, #0
 800806a:	f04f 0300 	mov.w	r3, #0
 800806e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008072:	4649      	mov	r1, r9
 8008074:	008b      	lsls	r3, r1, #2
 8008076:	4641      	mov	r1, r8
 8008078:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800807c:	4641      	mov	r1, r8
 800807e:	008a      	lsls	r2, r1, #2
 8008080:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008084:	f7f8 f8a8 	bl	80001d8 <__aeabi_uldivmod>
 8008088:	4602      	mov	r2, r0
 800808a:	460b      	mov	r3, r1
 800808c:	4b0d      	ldr	r3, [pc, #52]	; (80080c4 <UART_SetConfig+0x4e4>)
 800808e:	fba3 1302 	umull	r1, r3, r3, r2
 8008092:	095b      	lsrs	r3, r3, #5
 8008094:	2164      	movs	r1, #100	; 0x64
 8008096:	fb01 f303 	mul.w	r3, r1, r3
 800809a:	1ad3      	subs	r3, r2, r3
 800809c:	011b      	lsls	r3, r3, #4
 800809e:	3332      	adds	r3, #50	; 0x32
 80080a0:	4a08      	ldr	r2, [pc, #32]	; (80080c4 <UART_SetConfig+0x4e4>)
 80080a2:	fba2 2303 	umull	r2, r3, r2, r3
 80080a6:	095b      	lsrs	r3, r3, #5
 80080a8:	f003 020f 	and.w	r2, r3, #15
 80080ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4422      	add	r2, r4
 80080b4:	609a      	str	r2, [r3, #8]
}
 80080b6:	bf00      	nop
 80080b8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80080bc:	46bd      	mov	sp, r7
 80080be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80080c2:	bf00      	nop
 80080c4:	51eb851f 	.word	0x51eb851f

080080c8 <__cxa_pure_virtual>:
 80080c8:	b508      	push	{r3, lr}
 80080ca:	f000 f80d 	bl	80080e8 <_ZSt9terminatev>

080080ce <_ZN10__cxxabiv111__terminateEPFvvE>:
 80080ce:	b508      	push	{r3, lr}
 80080d0:	4780      	blx	r0
 80080d2:	f000 f80e 	bl	80080f2 <abort>
	...

080080d8 <_ZSt13get_terminatev>:
 80080d8:	4b02      	ldr	r3, [pc, #8]	; (80080e4 <_ZSt13get_terminatev+0xc>)
 80080da:	6818      	ldr	r0, [r3, #0]
 80080dc:	f3bf 8f5b 	dmb	ish
 80080e0:	4770      	bx	lr
 80080e2:	bf00      	nop
 80080e4:	2000000c 	.word	0x2000000c

080080e8 <_ZSt9terminatev>:
 80080e8:	b508      	push	{r3, lr}
 80080ea:	f7ff fff5 	bl	80080d8 <_ZSt13get_terminatev>
 80080ee:	f7ff ffee 	bl	80080ce <_ZN10__cxxabiv111__terminateEPFvvE>

080080f2 <abort>:
 80080f2:	b508      	push	{r3, lr}
 80080f4:	2006      	movs	r0, #6
 80080f6:	f000 f873 	bl	80081e0 <raise>
 80080fa:	2001      	movs	r0, #1
 80080fc:	f7fb fade 	bl	80036bc <_exit>

08008100 <__errno>:
 8008100:	4b01      	ldr	r3, [pc, #4]	; (8008108 <__errno+0x8>)
 8008102:	6818      	ldr	r0, [r3, #0]
 8008104:	4770      	bx	lr
 8008106:	bf00      	nop
 8008108:	20000010 	.word	0x20000010

0800810c <__libc_init_array>:
 800810c:	b570      	push	{r4, r5, r6, lr}
 800810e:	4d0d      	ldr	r5, [pc, #52]	; (8008144 <__libc_init_array+0x38>)
 8008110:	4c0d      	ldr	r4, [pc, #52]	; (8008148 <__libc_init_array+0x3c>)
 8008112:	1b64      	subs	r4, r4, r5
 8008114:	10a4      	asrs	r4, r4, #2
 8008116:	2600      	movs	r6, #0
 8008118:	42a6      	cmp	r6, r4
 800811a:	d109      	bne.n	8008130 <__libc_init_array+0x24>
 800811c:	4d0b      	ldr	r5, [pc, #44]	; (800814c <__libc_init_array+0x40>)
 800811e:	4c0c      	ldr	r4, [pc, #48]	; (8008150 <__libc_init_array+0x44>)
 8008120:	f000 f9b0 	bl	8008484 <_init>
 8008124:	1b64      	subs	r4, r4, r5
 8008126:	10a4      	asrs	r4, r4, #2
 8008128:	2600      	movs	r6, #0
 800812a:	42a6      	cmp	r6, r4
 800812c:	d105      	bne.n	800813a <__libc_init_array+0x2e>
 800812e:	bd70      	pop	{r4, r5, r6, pc}
 8008130:	f855 3b04 	ldr.w	r3, [r5], #4
 8008134:	4798      	blx	r3
 8008136:	3601      	adds	r6, #1
 8008138:	e7ee      	b.n	8008118 <__libc_init_array+0xc>
 800813a:	f855 3b04 	ldr.w	r3, [r5], #4
 800813e:	4798      	blx	r3
 8008140:	3601      	adds	r6, #1
 8008142:	e7f2      	b.n	800812a <__libc_init_array+0x1e>
 8008144:	080086f4 	.word	0x080086f4
 8008148:	080086f4 	.word	0x080086f4
 800814c:	080086f4 	.word	0x080086f4
 8008150:	080086fc 	.word	0x080086fc

08008154 <memcpy>:
 8008154:	440a      	add	r2, r1
 8008156:	4291      	cmp	r1, r2
 8008158:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800815c:	d100      	bne.n	8008160 <memcpy+0xc>
 800815e:	4770      	bx	lr
 8008160:	b510      	push	{r4, lr}
 8008162:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008166:	f803 4f01 	strb.w	r4, [r3, #1]!
 800816a:	4291      	cmp	r1, r2
 800816c:	d1f9      	bne.n	8008162 <memcpy+0xe>
 800816e:	bd10      	pop	{r4, pc}

08008170 <memset>:
 8008170:	4402      	add	r2, r0
 8008172:	4603      	mov	r3, r0
 8008174:	4293      	cmp	r3, r2
 8008176:	d100      	bne.n	800817a <memset+0xa>
 8008178:	4770      	bx	lr
 800817a:	f803 1b01 	strb.w	r1, [r3], #1
 800817e:	e7f9      	b.n	8008174 <memset+0x4>

08008180 <realloc>:
 8008180:	4b02      	ldr	r3, [pc, #8]	; (800818c <realloc+0xc>)
 8008182:	460a      	mov	r2, r1
 8008184:	4601      	mov	r1, r0
 8008186:	6818      	ldr	r0, [r3, #0]
 8008188:	f000 b8da 	b.w	8008340 <_realloc_r>
 800818c:	20000010 	.word	0x20000010

08008190 <_raise_r>:
 8008190:	291f      	cmp	r1, #31
 8008192:	b538      	push	{r3, r4, r5, lr}
 8008194:	4604      	mov	r4, r0
 8008196:	460d      	mov	r5, r1
 8008198:	d904      	bls.n	80081a4 <_raise_r+0x14>
 800819a:	2316      	movs	r3, #22
 800819c:	6003      	str	r3, [r0, #0]
 800819e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80081a2:	bd38      	pop	{r3, r4, r5, pc}
 80081a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80081a6:	b112      	cbz	r2, 80081ae <_raise_r+0x1e>
 80081a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80081ac:	b94b      	cbnz	r3, 80081c2 <_raise_r+0x32>
 80081ae:	4620      	mov	r0, r4
 80081b0:	f000 f830 	bl	8008214 <_getpid_r>
 80081b4:	462a      	mov	r2, r5
 80081b6:	4601      	mov	r1, r0
 80081b8:	4620      	mov	r0, r4
 80081ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081be:	f000 b817 	b.w	80081f0 <_kill_r>
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	d00a      	beq.n	80081dc <_raise_r+0x4c>
 80081c6:	1c59      	adds	r1, r3, #1
 80081c8:	d103      	bne.n	80081d2 <_raise_r+0x42>
 80081ca:	2316      	movs	r3, #22
 80081cc:	6003      	str	r3, [r0, #0]
 80081ce:	2001      	movs	r0, #1
 80081d0:	e7e7      	b.n	80081a2 <_raise_r+0x12>
 80081d2:	2400      	movs	r4, #0
 80081d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80081d8:	4628      	mov	r0, r5
 80081da:	4798      	blx	r3
 80081dc:	2000      	movs	r0, #0
 80081de:	e7e0      	b.n	80081a2 <_raise_r+0x12>

080081e0 <raise>:
 80081e0:	4b02      	ldr	r3, [pc, #8]	; (80081ec <raise+0xc>)
 80081e2:	4601      	mov	r1, r0
 80081e4:	6818      	ldr	r0, [r3, #0]
 80081e6:	f7ff bfd3 	b.w	8008190 <_raise_r>
 80081ea:	bf00      	nop
 80081ec:	20000010 	.word	0x20000010

080081f0 <_kill_r>:
 80081f0:	b538      	push	{r3, r4, r5, lr}
 80081f2:	4d07      	ldr	r5, [pc, #28]	; (8008210 <_kill_r+0x20>)
 80081f4:	2300      	movs	r3, #0
 80081f6:	4604      	mov	r4, r0
 80081f8:	4608      	mov	r0, r1
 80081fa:	4611      	mov	r1, r2
 80081fc:	602b      	str	r3, [r5, #0]
 80081fe:	f7fb fa4d 	bl	800369c <_kill>
 8008202:	1c43      	adds	r3, r0, #1
 8008204:	d102      	bne.n	800820c <_kill_r+0x1c>
 8008206:	682b      	ldr	r3, [r5, #0]
 8008208:	b103      	cbz	r3, 800820c <_kill_r+0x1c>
 800820a:	6023      	str	r3, [r4, #0]
 800820c:	bd38      	pop	{r3, r4, r5, pc}
 800820e:	bf00      	nop
 8008210:	20000e38 	.word	0x20000e38

08008214 <_getpid_r>:
 8008214:	f7fb ba3a 	b.w	800368c <_getpid>

08008218 <sbrk_aligned>:
 8008218:	b570      	push	{r4, r5, r6, lr}
 800821a:	4e0e      	ldr	r6, [pc, #56]	; (8008254 <sbrk_aligned+0x3c>)
 800821c:	460c      	mov	r4, r1
 800821e:	6831      	ldr	r1, [r6, #0]
 8008220:	4605      	mov	r5, r0
 8008222:	b911      	cbnz	r1, 800822a <sbrk_aligned+0x12>
 8008224:	f000 f8bc 	bl	80083a0 <_sbrk_r>
 8008228:	6030      	str	r0, [r6, #0]
 800822a:	4621      	mov	r1, r4
 800822c:	4628      	mov	r0, r5
 800822e:	f000 f8b7 	bl	80083a0 <_sbrk_r>
 8008232:	1c43      	adds	r3, r0, #1
 8008234:	d00a      	beq.n	800824c <sbrk_aligned+0x34>
 8008236:	1cc4      	adds	r4, r0, #3
 8008238:	f024 0403 	bic.w	r4, r4, #3
 800823c:	42a0      	cmp	r0, r4
 800823e:	d007      	beq.n	8008250 <sbrk_aligned+0x38>
 8008240:	1a21      	subs	r1, r4, r0
 8008242:	4628      	mov	r0, r5
 8008244:	f000 f8ac 	bl	80083a0 <_sbrk_r>
 8008248:	3001      	adds	r0, #1
 800824a:	d101      	bne.n	8008250 <sbrk_aligned+0x38>
 800824c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008250:	4620      	mov	r0, r4
 8008252:	bd70      	pop	{r4, r5, r6, pc}
 8008254:	20000e34 	.word	0x20000e34

08008258 <_malloc_r>:
 8008258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800825c:	1ccd      	adds	r5, r1, #3
 800825e:	f025 0503 	bic.w	r5, r5, #3
 8008262:	3508      	adds	r5, #8
 8008264:	2d0c      	cmp	r5, #12
 8008266:	bf38      	it	cc
 8008268:	250c      	movcc	r5, #12
 800826a:	2d00      	cmp	r5, #0
 800826c:	4607      	mov	r7, r0
 800826e:	db01      	blt.n	8008274 <_malloc_r+0x1c>
 8008270:	42a9      	cmp	r1, r5
 8008272:	d905      	bls.n	8008280 <_malloc_r+0x28>
 8008274:	230c      	movs	r3, #12
 8008276:	603b      	str	r3, [r7, #0]
 8008278:	2600      	movs	r6, #0
 800827a:	4630      	mov	r0, r6
 800827c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008280:	4e2e      	ldr	r6, [pc, #184]	; (800833c <_malloc_r+0xe4>)
 8008282:	f000 f89d 	bl	80083c0 <__malloc_lock>
 8008286:	6833      	ldr	r3, [r6, #0]
 8008288:	461c      	mov	r4, r3
 800828a:	bb34      	cbnz	r4, 80082da <_malloc_r+0x82>
 800828c:	4629      	mov	r1, r5
 800828e:	4638      	mov	r0, r7
 8008290:	f7ff ffc2 	bl	8008218 <sbrk_aligned>
 8008294:	1c43      	adds	r3, r0, #1
 8008296:	4604      	mov	r4, r0
 8008298:	d14d      	bne.n	8008336 <_malloc_r+0xde>
 800829a:	6834      	ldr	r4, [r6, #0]
 800829c:	4626      	mov	r6, r4
 800829e:	2e00      	cmp	r6, #0
 80082a0:	d140      	bne.n	8008324 <_malloc_r+0xcc>
 80082a2:	6823      	ldr	r3, [r4, #0]
 80082a4:	4631      	mov	r1, r6
 80082a6:	4638      	mov	r0, r7
 80082a8:	eb04 0803 	add.w	r8, r4, r3
 80082ac:	f000 f878 	bl	80083a0 <_sbrk_r>
 80082b0:	4580      	cmp	r8, r0
 80082b2:	d13a      	bne.n	800832a <_malloc_r+0xd2>
 80082b4:	6821      	ldr	r1, [r4, #0]
 80082b6:	3503      	adds	r5, #3
 80082b8:	1a6d      	subs	r5, r5, r1
 80082ba:	f025 0503 	bic.w	r5, r5, #3
 80082be:	3508      	adds	r5, #8
 80082c0:	2d0c      	cmp	r5, #12
 80082c2:	bf38      	it	cc
 80082c4:	250c      	movcc	r5, #12
 80082c6:	4629      	mov	r1, r5
 80082c8:	4638      	mov	r0, r7
 80082ca:	f7ff ffa5 	bl	8008218 <sbrk_aligned>
 80082ce:	3001      	adds	r0, #1
 80082d0:	d02b      	beq.n	800832a <_malloc_r+0xd2>
 80082d2:	6823      	ldr	r3, [r4, #0]
 80082d4:	442b      	add	r3, r5
 80082d6:	6023      	str	r3, [r4, #0]
 80082d8:	e00e      	b.n	80082f8 <_malloc_r+0xa0>
 80082da:	6822      	ldr	r2, [r4, #0]
 80082dc:	1b52      	subs	r2, r2, r5
 80082de:	d41e      	bmi.n	800831e <_malloc_r+0xc6>
 80082e0:	2a0b      	cmp	r2, #11
 80082e2:	d916      	bls.n	8008312 <_malloc_r+0xba>
 80082e4:	1961      	adds	r1, r4, r5
 80082e6:	42a3      	cmp	r3, r4
 80082e8:	6025      	str	r5, [r4, #0]
 80082ea:	bf18      	it	ne
 80082ec:	6059      	strne	r1, [r3, #4]
 80082ee:	6863      	ldr	r3, [r4, #4]
 80082f0:	bf08      	it	eq
 80082f2:	6031      	streq	r1, [r6, #0]
 80082f4:	5162      	str	r2, [r4, r5]
 80082f6:	604b      	str	r3, [r1, #4]
 80082f8:	4638      	mov	r0, r7
 80082fa:	f104 060b 	add.w	r6, r4, #11
 80082fe:	f000 f865 	bl	80083cc <__malloc_unlock>
 8008302:	f026 0607 	bic.w	r6, r6, #7
 8008306:	1d23      	adds	r3, r4, #4
 8008308:	1af2      	subs	r2, r6, r3
 800830a:	d0b6      	beq.n	800827a <_malloc_r+0x22>
 800830c:	1b9b      	subs	r3, r3, r6
 800830e:	50a3      	str	r3, [r4, r2]
 8008310:	e7b3      	b.n	800827a <_malloc_r+0x22>
 8008312:	6862      	ldr	r2, [r4, #4]
 8008314:	42a3      	cmp	r3, r4
 8008316:	bf0c      	ite	eq
 8008318:	6032      	streq	r2, [r6, #0]
 800831a:	605a      	strne	r2, [r3, #4]
 800831c:	e7ec      	b.n	80082f8 <_malloc_r+0xa0>
 800831e:	4623      	mov	r3, r4
 8008320:	6864      	ldr	r4, [r4, #4]
 8008322:	e7b2      	b.n	800828a <_malloc_r+0x32>
 8008324:	4634      	mov	r4, r6
 8008326:	6876      	ldr	r6, [r6, #4]
 8008328:	e7b9      	b.n	800829e <_malloc_r+0x46>
 800832a:	230c      	movs	r3, #12
 800832c:	603b      	str	r3, [r7, #0]
 800832e:	4638      	mov	r0, r7
 8008330:	f000 f84c 	bl	80083cc <__malloc_unlock>
 8008334:	e7a1      	b.n	800827a <_malloc_r+0x22>
 8008336:	6025      	str	r5, [r4, #0]
 8008338:	e7de      	b.n	80082f8 <_malloc_r+0xa0>
 800833a:	bf00      	nop
 800833c:	20000e30 	.word	0x20000e30

08008340 <_realloc_r>:
 8008340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008344:	4680      	mov	r8, r0
 8008346:	4614      	mov	r4, r2
 8008348:	460e      	mov	r6, r1
 800834a:	b921      	cbnz	r1, 8008356 <_realloc_r+0x16>
 800834c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008350:	4611      	mov	r1, r2
 8008352:	f7ff bf81 	b.w	8008258 <_malloc_r>
 8008356:	b92a      	cbnz	r2, 8008364 <_realloc_r+0x24>
 8008358:	f000 f83e 	bl	80083d8 <_free_r>
 800835c:	4625      	mov	r5, r4
 800835e:	4628      	mov	r0, r5
 8008360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008364:	f000 f884 	bl	8008470 <_malloc_usable_size_r>
 8008368:	4284      	cmp	r4, r0
 800836a:	4607      	mov	r7, r0
 800836c:	d802      	bhi.n	8008374 <_realloc_r+0x34>
 800836e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008372:	d812      	bhi.n	800839a <_realloc_r+0x5a>
 8008374:	4621      	mov	r1, r4
 8008376:	4640      	mov	r0, r8
 8008378:	f7ff ff6e 	bl	8008258 <_malloc_r>
 800837c:	4605      	mov	r5, r0
 800837e:	2800      	cmp	r0, #0
 8008380:	d0ed      	beq.n	800835e <_realloc_r+0x1e>
 8008382:	42bc      	cmp	r4, r7
 8008384:	4622      	mov	r2, r4
 8008386:	4631      	mov	r1, r6
 8008388:	bf28      	it	cs
 800838a:	463a      	movcs	r2, r7
 800838c:	f7ff fee2 	bl	8008154 <memcpy>
 8008390:	4631      	mov	r1, r6
 8008392:	4640      	mov	r0, r8
 8008394:	f000 f820 	bl	80083d8 <_free_r>
 8008398:	e7e1      	b.n	800835e <_realloc_r+0x1e>
 800839a:	4635      	mov	r5, r6
 800839c:	e7df      	b.n	800835e <_realloc_r+0x1e>
	...

080083a0 <_sbrk_r>:
 80083a0:	b538      	push	{r3, r4, r5, lr}
 80083a2:	4d06      	ldr	r5, [pc, #24]	; (80083bc <_sbrk_r+0x1c>)
 80083a4:	2300      	movs	r3, #0
 80083a6:	4604      	mov	r4, r0
 80083a8:	4608      	mov	r0, r1
 80083aa:	602b      	str	r3, [r5, #0]
 80083ac:	f7fb f990 	bl	80036d0 <_sbrk>
 80083b0:	1c43      	adds	r3, r0, #1
 80083b2:	d102      	bne.n	80083ba <_sbrk_r+0x1a>
 80083b4:	682b      	ldr	r3, [r5, #0]
 80083b6:	b103      	cbz	r3, 80083ba <_sbrk_r+0x1a>
 80083b8:	6023      	str	r3, [r4, #0]
 80083ba:	bd38      	pop	{r3, r4, r5, pc}
 80083bc:	20000e38 	.word	0x20000e38

080083c0 <__malloc_lock>:
 80083c0:	4801      	ldr	r0, [pc, #4]	; (80083c8 <__malloc_lock+0x8>)
 80083c2:	f000 b85d 	b.w	8008480 <__retarget_lock_acquire_recursive>
 80083c6:	bf00      	nop
 80083c8:	20000e3c 	.word	0x20000e3c

080083cc <__malloc_unlock>:
 80083cc:	4801      	ldr	r0, [pc, #4]	; (80083d4 <__malloc_unlock+0x8>)
 80083ce:	f000 b858 	b.w	8008482 <__retarget_lock_release_recursive>
 80083d2:	bf00      	nop
 80083d4:	20000e3c 	.word	0x20000e3c

080083d8 <_free_r>:
 80083d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80083da:	2900      	cmp	r1, #0
 80083dc:	d044      	beq.n	8008468 <_free_r+0x90>
 80083de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083e2:	9001      	str	r0, [sp, #4]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	f1a1 0404 	sub.w	r4, r1, #4
 80083ea:	bfb8      	it	lt
 80083ec:	18e4      	addlt	r4, r4, r3
 80083ee:	f7ff ffe7 	bl	80083c0 <__malloc_lock>
 80083f2:	4a1e      	ldr	r2, [pc, #120]	; (800846c <_free_r+0x94>)
 80083f4:	9801      	ldr	r0, [sp, #4]
 80083f6:	6813      	ldr	r3, [r2, #0]
 80083f8:	b933      	cbnz	r3, 8008408 <_free_r+0x30>
 80083fa:	6063      	str	r3, [r4, #4]
 80083fc:	6014      	str	r4, [r2, #0]
 80083fe:	b003      	add	sp, #12
 8008400:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008404:	f7ff bfe2 	b.w	80083cc <__malloc_unlock>
 8008408:	42a3      	cmp	r3, r4
 800840a:	d908      	bls.n	800841e <_free_r+0x46>
 800840c:	6825      	ldr	r5, [r4, #0]
 800840e:	1961      	adds	r1, r4, r5
 8008410:	428b      	cmp	r3, r1
 8008412:	bf01      	itttt	eq
 8008414:	6819      	ldreq	r1, [r3, #0]
 8008416:	685b      	ldreq	r3, [r3, #4]
 8008418:	1949      	addeq	r1, r1, r5
 800841a:	6021      	streq	r1, [r4, #0]
 800841c:	e7ed      	b.n	80083fa <_free_r+0x22>
 800841e:	461a      	mov	r2, r3
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	b10b      	cbz	r3, 8008428 <_free_r+0x50>
 8008424:	42a3      	cmp	r3, r4
 8008426:	d9fa      	bls.n	800841e <_free_r+0x46>
 8008428:	6811      	ldr	r1, [r2, #0]
 800842a:	1855      	adds	r5, r2, r1
 800842c:	42a5      	cmp	r5, r4
 800842e:	d10b      	bne.n	8008448 <_free_r+0x70>
 8008430:	6824      	ldr	r4, [r4, #0]
 8008432:	4421      	add	r1, r4
 8008434:	1854      	adds	r4, r2, r1
 8008436:	42a3      	cmp	r3, r4
 8008438:	6011      	str	r1, [r2, #0]
 800843a:	d1e0      	bne.n	80083fe <_free_r+0x26>
 800843c:	681c      	ldr	r4, [r3, #0]
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	6053      	str	r3, [r2, #4]
 8008442:	4421      	add	r1, r4
 8008444:	6011      	str	r1, [r2, #0]
 8008446:	e7da      	b.n	80083fe <_free_r+0x26>
 8008448:	d902      	bls.n	8008450 <_free_r+0x78>
 800844a:	230c      	movs	r3, #12
 800844c:	6003      	str	r3, [r0, #0]
 800844e:	e7d6      	b.n	80083fe <_free_r+0x26>
 8008450:	6825      	ldr	r5, [r4, #0]
 8008452:	1961      	adds	r1, r4, r5
 8008454:	428b      	cmp	r3, r1
 8008456:	bf04      	itt	eq
 8008458:	6819      	ldreq	r1, [r3, #0]
 800845a:	685b      	ldreq	r3, [r3, #4]
 800845c:	6063      	str	r3, [r4, #4]
 800845e:	bf04      	itt	eq
 8008460:	1949      	addeq	r1, r1, r5
 8008462:	6021      	streq	r1, [r4, #0]
 8008464:	6054      	str	r4, [r2, #4]
 8008466:	e7ca      	b.n	80083fe <_free_r+0x26>
 8008468:	b003      	add	sp, #12
 800846a:	bd30      	pop	{r4, r5, pc}
 800846c:	20000e30 	.word	0x20000e30

08008470 <_malloc_usable_size_r>:
 8008470:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008474:	1f18      	subs	r0, r3, #4
 8008476:	2b00      	cmp	r3, #0
 8008478:	bfbc      	itt	lt
 800847a:	580b      	ldrlt	r3, [r1, r0]
 800847c:	18c0      	addlt	r0, r0, r3
 800847e:	4770      	bx	lr

08008480 <__retarget_lock_acquire_recursive>:
 8008480:	4770      	bx	lr

08008482 <__retarget_lock_release_recursive>:
 8008482:	4770      	bx	lr

08008484 <_init>:
 8008484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008486:	bf00      	nop
 8008488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800848a:	bc08      	pop	{r3}
 800848c:	469e      	mov	lr, r3
 800848e:	4770      	bx	lr

08008490 <_fini>:
 8008490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008492:	bf00      	nop
 8008494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008496:	bc08      	pop	{r3}
 8008498:	469e      	mov	lr, r3
 800849a:	4770      	bx	lr
